<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/03/04/SpringMVC/"/>
    <url>/2021/03/04/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ssm springmvc+spring+mybaits MVC三层架构</p><p>javaSE：认真学习，快速入门<br>javaWeb：认真学习</p><p>框架：研究官方文档，锻炼自学/笔记/项目能力</p><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><p>mvc是模型model，视图view，控制器controller的简写，是一种软件设计思想。<br>是将业务逻辑、数据、显示分离的方法来组织代码</p><h2 id="model1时代"><a href="#model1时代" class="headerlink" title="model1时代"></a>model1时代</h2><p><img src="https://img-blog.csdnimg.cn/20210228154546775.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="model2时代"><a href="#model2时代" class="headerlink" title="model2时代"></a>model2时代</h2><p><img src="https://img-blog.csdnimg.cn/20210228155404136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>model2这样不仅提高了代码的复用率与项目的拓展性，且大大降低了项目的维护成本，Model1的实现方式比较简单，适用于开发小规模项目，Model中jsp页面兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用率非常低，增加了应用的拓展性和维护的难度，model2消除了model1的缺点。</p><h1 id="学习复习前提"><a href="#学习复习前提" class="headerlink" title="学习复习前提"></a>学习复习前提</h1><p>新建项目<br>在pom.xml中添加依赖<br>创建子项目<br>然后右键点击增加框架，增加web框架</p><h2 id="servlet用来处理请求"><a href="#servlet用来处理请求" class="headerlink" title="servlet用来处理请求"></a>servlet用来处理请求</h2><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-type">ServletException</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServlet</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletRequest</span>;<span class="hljs-keyword">import</span> javax.servlet.http.<span class="hljs-type">HttpServletResponse</span>;<span class="hljs-keyword">import</span> java.io.<span class="hljs-type">IOException</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname com.mmz.servlet.HelloServlet</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2021/2/28 19:59</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doGet(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        <span class="hljs-comment">// 1 获取前端参数</span>        <span class="hljs-type">String</span> method  = req.getParameter(<span class="hljs-string">&quot;method&quot;</span>);        <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;add&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了add方法&quot;</span>);        &#125;        <span class="hljs-keyword">if</span>(method.equals(<span class="hljs-string">&quot;delete&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;执行了delete方法&quot;</span>);        &#125;        <span class="hljs-comment">// 2 调用业务层</span>        <span class="hljs-comment">// 3 视图转发或者重定向</span>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> req, <span class="hljs-type">HttpServletResponse</span> resp) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;        doGet(req,resp);    &#125;&#125;</code></pre><h2 id="jsp返回页面"><a href="#jsp返回页面" class="headerlink" title="jsp返回页面"></a>jsp返回页面</h2><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%--</span></span></span><span class="xml">  Created by IntelliJ IDEA.</span><span class="xml">  User: mmz</span><span class="xml">  Date: 2021/2/28</span><span class="xml">  Time: 20:02</span><span class="xml">  To change this template use File | Settings | File Templates.</span><span class="xml">--%&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">%@</span> <span class="hljs-attr">page</span> <span class="hljs-attr">contentType</span>=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;java&quot;</span> %&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><span class="xml">$</span><span class="hljs-template-variable">&#123;msg&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></code></pre><h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.mmz.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-comment">&lt;!--    &lt;session-config&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;session-timeout&gt;15&lt;/session-timeout&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;/session-config&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;welcome-file-list&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;/welcome-file-list&gt;--&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><h2 id="总结-mvc框架可能要做哪些事情"><a href="#总结-mvc框架可能要做哪些事情" class="headerlink" title="总结 mvc框架可能要做哪些事情"></a>总结 mvc框架可能要做哪些事情</h2><p>将url映射到java类或者java类的方法<br>封装用户提交的数据<br>处理请求-调用相关的业务-封装响应数据<br>将响应的数据进行渲染 .jsp/html 等表示层数据</p><h1 id="中心控制器DispatcherServlet"><a href="#中心控制器DispatcherServlet" class="headerlink" title="中心控制器DispatcherServlet"></a>中心控制器DispatcherServlet</h1><p>spring的web框架围绕DispathcerServlet设计，dispatcherservlet的作用是将请求分发到不同的处理器。<br>现在可以基于Controller的注解声明处理器。<br><img src="https://img-blog.csdnimg.cn/20210228211133629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>DispatcherServlet本质也是一个Servlet</p><h1 id="Springmvc-执行流程"><a href="#Springmvc-执行流程" class="headerlink" title="Springmvc 执行流程"></a>Springmvc 执行流程</h1><p><img src="https://img-blog.csdnimg.cn/20210302004739892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="配置dispatcherServlet"><a href="#配置dispatcherServlet" class="headerlink" title="配置dispatcherServlet"></a>配置dispatcherServlet</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><h2 id="执行handler"><a href="#执行handler" class="headerlink" title="执行handler"></a>执行handler</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;/hello&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.controller.HelloController&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="找到相应Controller并且返回视图模型"><a href="#找到相应Controller并且返回视图模型" class="headerlink" title="找到相应Controller并且返回视图模型"></a>找到相应Controller并且返回视图模型</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> HelloController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/1 21:10</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;HelloSpringMVC&quot;</span>);        modelAndView.setViewName(<span class="hljs-string">&quot;hello&quot;</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre><h2 id="具体的执行流程"><a href="#具体的执行流程" class="headerlink" title="具体的执行流程"></a>具体的执行流程</h2><p>这部分以前整理过，就是从前端发送请求到后端，首先先到DispatcherServlet，然后HandlerMapping处理器映射器去寻找相应的handler，在根据handler被HandlerAdapter处理器适配器去执行。Handler最后会执行controller，controller把执行的信息返回ModelAndView给HandlerApadter，然后dispatcherServlet调用视图解析器ViewResolver去解析视图。最后视图呈现给用户。</p><h1 id="注解开发SpringMVC"><a href="#注解开发SpringMVC" class="headerlink" title="注解开发SpringMVC"></a>注解开发SpringMVC</h1><h2 id="首先还是要配置web-xml"><a href="#首先还是要配置web-xml" class="headerlink" title="首先还是要配置web.xml"></a>首先还是要配置web.xml</h2><p>配置dispatcherServlet</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;GBK&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><h2 id="配置注解使用SpringMVC"><a href="#配置注解使用SpringMVC" class="headerlink" title="配置注解使用SpringMVC"></a>配置注解使用SpringMVC</h2><p>无论哪种方式配置SpringMVC都需要配置处理器映射器，处理器适配器，视图解析器</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span></span><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">        <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--自动扫描包+--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.mmz.controller&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span>    <span class="hljs-comment">&lt;!--SpringMVC不处理静态资源  .css .js .html 不走视图解析--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:default-servlet-handler</span>&gt;</span>    <span class="hljs-comment">&lt;!--原来需要配置两个，现在只需要配置--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>    <span class="hljs-comment">&lt;!--视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="最后编写Controller"><a href="#最后编写Controller" class="headerlink" title="最后编写Controller"></a>最后编写Controller</h2><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> HelloController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/2 14:13</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/hello&quot;</span>)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-comment">/*localhost:8080/hello/h1*/</span>    <span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/h1&quot;</span>)</span>    <span class="hljs-keyword">public</span> String hello(Model model)&#123;        <span class="hljs-comment">// 封装数据</span>        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello,springmvc&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>; <span class="hljs-comment">// 会被视图解析器处理</span>    &#125;&#125;</code></pre><p>Controller注解，就是标记该类是个Controller，与extends一样，是继承类。<br>RequestMapping标记url，在类上是上级url，方法是下级url<br>需要在里面封装数据，使用Model封装，同样的增加属性<br>最后返回值return的字符串，就是根据web.xml配置的dispatcherServlet的地方的jsp</p><h1 id="深入学习Controller"><a href="#深入学习Controller" class="headerlink" title="深入学习Controller"></a>深入学习Controller</h1><h2 id="第一种implement-Controller接口"><a href="#第一种implement-Controller接口" class="headerlink" title="第一种implement Controller接口"></a>第一种implement Controller接口</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.Controller;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> ControllerTest1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/2 15:09</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest1&quot;</span>);        modelAndView.setViewName(<span class="hljs-string">&quot;test&quot;</span>);        <span class="hljs-keyword">return</span> modelAndView;    &#125;&#125;</code></pre><p>然后在spring中配置bean</p><pre><code class="hljs routeros">&lt;bean <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;/text1&quot;</span> <span class="hljs-attribute">class</span>=<span class="hljs-string">&quot;com.mmz.controller.ControllerTest1&quot;</span>&gt;&lt;/bean&gt;</code></pre><p>这种方式，一个控制器中只有一种方法， 如果要多个方法使用，需要定义多个Controller，定义的方式比较麻烦。</p><h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> ControllerTest2</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/2 15:17</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span> <span class="hljs-comment">// 代表被Spring托管</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControllerTest2</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(<span class="hljs-meta-string">&quot;/t2&quot;</span>)</span>    <span class="hljs-keyword">public</span> String test(Model model)&#123;        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;ControllerTest2&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;    &#125;&#125;</code></pre><h1 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h1><p>注解应用于映射url到控制器或一个特定的处理程序方法。可用于类或者方法上，用于类上表示类中的所有响应请求的方法都是以该地址为父路径。</p><h1 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h1><p>Restful就是一个资源定位及资源操作的风格，不是标准也不是协议，只是一种风格，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> RestController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/2 19:58</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/add&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> result = a+b;        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;结果为&quot;</span>+result);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;    &#125;&#125;</code></pre><p>我们输入url<code>http://localhost:8080/springmvc_04_controller_war_exploded/add/?a=1&amp;b=2</code> 才能得到结果</p><h2 id="路径变量"><a href="#路径变量" class="headerlink" title="路径变量"></a>路径变量</h2><p>因为如果这样，还需要在url写？后面加上在变量，但是这样不是纯真的restful风格。</p><p>可以使用<code>@PathVariable</code>注解，让方法参数的值对应绑定到一个URL模板变量上。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.ui.Model;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> RestController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/2 19:58</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RestController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> a,<span class="hljs-meta">@PathVariable</span> <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> result = a+b;        model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;结果为&quot;</span>+result);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;    &#125;&#125;</code></pre><p>url输入为</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/springmvc_04_controller_war_exploded/</span>add<span class="hljs-regexp">/1/</span><span class="hljs-number">12</span></code></pre><p>结果为<br><img src="https://img-blog.csdnimg.cn/20210303005939426.png" alt="在这里插入图片描述"></p><h2 id="可以控制传递方法"><a href="#可以控制传递方法" class="headerlink" title="可以控制传递方法"></a>可以控制传递方法</h2><p>在requestMapping下面的RequestMethod[] method()</p><pre><code class="hljs crystal">public <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RequestMethod</span> &#123;</span>    GET,    HEAD,    POST,    PUT,    PATCH,    DELETE,    OPTIONS,    TRACE;    <span class="hljs-keyword">private</span> RequestMethod() &#123;    &#125;&#125;</code></pre><p>可以控制几种方法</p><pre><code class="hljs pgsql">@RequestMapping(<span class="hljs-keyword">value</span> = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,<span class="hljs-keyword">method</span> = RequestMethod.<span class="hljs-keyword">DELETE</span>)</code></pre><p>就是用delete方式的请求</p><p>也可以直接用<code>/*@GetMapping*/</code>这种注解来直接标记为get方法</p><h1 id="提交的域名名称和处理方法的参数不一样"><a href="#提交的域名名称和处理方法的参数不一样" class="headerlink" title="提交的域名名称和处理方法的参数不一样"></a>提交的域名名称和处理方法的参数不一样</h1><p>就比如在url传递的参数 ?username=mmz<br>但是我用String name接受这个参数，需要用这个注解@RequestParam来实现</p><pre><code class="hljs autoit"><span class="hljs-symbol">@RequestParam</span>（“username”） <span class="hljs-built_in">String</span> name<span class="hljs-comment">;</span></code></pre><p> 接受前端用户传递的参数，判断参数的名字，假设名字直接在方法上，可以直接使用<br> 假设传递的是一个对象User，匹配User对象中的字段名。如果名字一致直接匹配，如果不是匹配不到</p><h1 id="前端返回类型"><a href="#前端返回类型" class="headerlink" title="前端返回类型"></a>前端返回类型</h1><p>返回类型其实有三个，model， modelmap , modelandview</p><p>model：只有寥寥几个方法只适用于储存数据，简化了新手对Model对象的操作和理解。<br>modelmap: 继承了LinkedMap，除了实现了资深的一些方法，同样继承了LinkedMap的方法和特性<br>modelandview：可以在存储数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p><h1 id="配置SpringMVC的乱码过滤器"><a href="#配置SpringMVC的乱码过滤器" class="headerlink" title="配置SpringMVC的乱码过滤器"></a>配置SpringMVC的乱码过滤器</h1><p>使用过滤器</p><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">filter</span>&gt;        &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">encoding</span>&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;        &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;org.springframework.web.<span class="hljs-keyword">filter</span>.CharacterEncodingFilter&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">class</span>&gt;        &lt;init-param&gt;            &lt;param-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">encoding</span>&lt;/param-<span class="hljs-type">name</span>&gt;            &lt;param-<span class="hljs-keyword">value</span>&gt;utf<span class="hljs-number">-8</span>&lt;/param-<span class="hljs-keyword">value</span>&gt;        &lt;/init-param&gt;    &lt;/<span class="hljs-keyword">filter</span>&gt;    &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;        &lt;<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;<span class="hljs-keyword">encoding</span>&lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-type">name</span>&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/<span class="hljs-keyword">filter</span>-<span class="hljs-keyword">mapping</span>&gt;</code></pre><h1 id="Controller返回json数据"><a href="#Controller返回json数据" class="headerlink" title="Controller返回json数据"></a>Controller返回json数据</h1><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.ResponseBody;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/3/3 20:46</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;    <span class="hljs-comment">// 不会走视图解析器，会直接返回一个字符串</span>    <span class="hljs-meta">@RequestMapping(value = <span class="hljs-meta-string">&quot;/j1&quot;</span>,produces = <span class="hljs-meta-string">&quot;application/json;charset=utf-8&quot;</span>)</span>    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-keyword">public</span> String json1() throws JsonProcessingException &#123;        <span class="hljs-comment">// jackson , objectMapper</span>        ObjectMapper objectMapper = new ObjectMapper();        <span class="hljs-comment">// 创建一个对象</span>        User user = new User(<span class="hljs-string">&quot;mmz&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>);        String string =  objectMapper.writeValueAsString(user);        <span class="hljs-keyword">return</span> string;    &#125;&#125;</code></pre><h2 id="解决json乱码问题"><a href="#解决json乱码问题" class="headerlink" title="解决json乱码问题"></a>解决json乱码问题</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span></code></pre><h2 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h2><p>这个注解在类上注解，表示返回的都是json格式的字符串，不用在每个方法上面都注解@ResponseBody</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pom.xml中的资源过滤</title>
    <link href="/2021/03/02/pom-xml%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%BF%87%E6%BB%A4/"/>
    <url>/2021/03/02/pom-xml%E4%B8%AD%E7%9A%84%E8%B5%84%E6%BA%90%E8%BF%87%E6%BB%A4/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>配置文件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>pom.xml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring(下)</title>
    <link href="/2021/02/28/Spring-%E4%B8%8B/"/>
    <url>/2021/02/28/Spring-%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h1><p>自动装配是Spring满足bean依赖的一种方式<br>Spring会自动从上下文中寻找，并且自动装配属性</p><p>在Spring有三种装配的方式</p><p> 1）在xml显示配置</p><p>2） 在java中显示配置</p><p>3） 隐式的自动装配bean</p><h2 id="ByName自动装配"><a href="#ByName自动装配" class="headerlink" title="ByName自动装配"></a>ByName自动装配</h2><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    &lt;bean id=&quot;person&quot; class=&quot;com.mmz.pojo.Person&quot;&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;property name=&quot;name&quot; value=&quot;mmz&quot;&gt;&lt;/property&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;property name=&quot;dog&quot; ref=&quot;dog&quot;&gt;&lt;/property&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;property name=&quot;cat&quot; ref=&quot;cat&quot;&gt;&lt;/property&gt;--&gt;</span><span class="hljs-comment">&lt;!--     &lt;/bean&gt;--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;person&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.Person&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mmz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><p>Byname会自动在容器上下文中查找，和自己对象set方法后面的值对应的bean的id<br>所以dog和cat可以进行自动装配</p><h2 id="ByType自动装配"><a href="#ByType自动装配" class="headerlink" title="ByType自动装配"></a>ByType自动装配</h2><p>对象属性类型相同的bean，必须保证id全局唯一。</p><h2 id="使用注解实现自动装配"><a href="#使用注解实现自动装配" class="headerlink" title="使用注解实现自动装配"></a>使用注解实现自动装配</h2><p>注解的配置比xml好，大部分会使用注解开发</p><p>要使用注解须知：<br>1）导入约束，context约束<br>2）配置注解的支持</p><pre><code class="hljs avrasm"><span class="hljs-symbol">xmlns:</span>context=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></code></pre><pre><code class="hljs crystal">&lt;<span class="hljs-symbol">context:</span><span class="hljs-keyword">annotation</span>-<span class="hljs-title">config</span>&gt;&lt;/<span class="hljs-title">context</span>:<span class="hljs-title">annotation</span>-<span class="hljs-title">config</span>&gt;</code></pre><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>直接在属性上面可以用，也可以在set方法上面也可以</p><p>使用Autowired我们可以不用编写set方法了，前提是你这个自动装配的属性在ioc容器中存在，且符合名字。</p><h3 id="Nullable"><a href="#Nullable" class="headerlink" title="@Nullable"></a>@Nullable</h3><p>字段标记了这个注解，说明这个字段可以为null</p><h3 id="Required"><a href="#Required" class="headerlink" title="@Required"></a>@Required</h3><pre><code class="hljs routeros">public @interface Autowired &#123;    boolean required()<span class="hljs-built_in"> default </span><span class="hljs-literal">true</span>;&#125;</code></pre><p>如果显示定义了autowired的属性为false<br>说明这个对象可以为null，否则不允许为空</p><h3 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h3><p>指定装配的值，比如我们在beans.xml中配置的id为dog11<br>我们就可以在person实体类上面的dog，给其配置@Qualifier(value=”dog11”)</p><p>如果自动装配autowired的环境比较复杂，就可以用这个注解配合使用，指定唯一的一个bean注入</p><h3 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h3><p>这个是java的注解，根据名字先去查找，如果找不到再去根据类型找，如果两个都没有，那么直接报错</p><h1 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h1><p>bean如何注册<br>属性如何注入<br>衍生的注解<br>自动装配注解<br>作用域</p><p>使用注解需要导入context的约束，增加注解的支持<br><img src="https://img-blog.csdnimg.cn/20210213014139650.png" alt="在这里插入图片描述"></p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>组件，放在类上一般，说明这个类被Spring管理了，就是bean</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> User</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/* 等价于&lt;bean&gt;标签*/</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">public</span> String name = <span class="hljs-string">&quot;mmz&quot;</span>;&#125;</code></pre><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>相当于注入属性</p><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> User</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/* 等价于&lt;bean&gt;标签*/</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Value(<span class="hljs-meta-string">&quot;mmz123&quot;</span>)</span>    <span class="hljs-keyword">public</span> String name;&#125;</code></pre><p>也可以注入在set方法上面</p><h2 id="衍生的注解"><a href="#衍生的注解" class="headerlink" title="衍生的注解"></a>衍生的注解</h2><p>@Component有几个衍生的注解，我们在web开发中会有三层，controller，service，dao</p><p>dao层</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.dao;<span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserDao</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:52</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;&#125;</code></pre><p>服务层</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.service;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserService</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:53</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserService</span> </span>&#123;&#125;</code></pre><p>控制层</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserController</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:54</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;&#125;</code></pre><p>这四个注解的功能是一样的，都是代表讲某个类注册到spring中，装配Bean</p><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><p>生命周期</p><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Scope;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> User</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/13 1:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/* 等价于&lt;bean&gt;标签*/</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@Data</span><span class="hljs-meta">@Scope</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Value(<span class="hljs-meta-string">&quot;mmz123&quot;</span>)</span>    <span class="hljs-keyword">public</span> String name;&#125;</code></pre><p>单例</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Scope(<span class="hljs-meta-string">&quot;singleton&quot;</span>)</span></code></pre><p>多例</p><pre><code class="hljs kotlin"><span class="hljs-meta">@Scope(<span class="hljs-meta-string">&quot;prototype&quot;</span>)</span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>xml适用于任何场合，维护简单方便<br>注解不是自己的类用不了，维护相对复杂</p><p>xml用来管理bean<br>注解只负责完成属性的注入</p><p>我们在使用的过程中，只需要注意一个问题，必须让注解生效，就需要开启对注解的支持</p><h1 id="使用java的方式配置Spring"><a href="#使用java的方式配置Spring" class="headerlink" title="使用java的方式配置Spring"></a>使用java的方式配置Spring</h1><p>我们完全不适用xml配置来使用，完全交给java来做。<br>JavaConfig是Spring一个子项目，他是Spring4之后它成为一个核心功能</p><h2 id="实体类User"><a href="#实体类User" class="headerlink" title="实体类User"></a>实体类User</h2><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> User</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:24</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-meta">@Value(<span class="hljs-meta-string">&quot;mmz&quot;</span>)</span>    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><h2 id="配置类MyConfig"><a href="#配置类MyConfig" class="headerlink" title="配置类MyConfig"></a>配置类MyConfig</h2><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.mmz.config;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Bean;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Configuration;<span class="hljs-keyword">import</span> org.springframework.context.<span class="hljs-keyword">annotation</span>.Import;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> MyConfig</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:25</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">// 被Spring容器托管，注册到容器中，因为他本来就是一个Component</span><span class="hljs-meta">@Import(MyConfig2.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;    <span class="hljs-comment">// 注册一个bean，就相当于写的一个bean，这个方法的名字就相当于bean标签中的id属性。方法返回值，就相当于bean标签的class属性</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> User getUser()&#123;        <span class="hljs-keyword">return</span> new User();    &#125;&#125;</code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre><code class="hljs actionscript"><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> com.mmz.config.MyConfig;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> com.mmz.pojo.User;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.junit.Test;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.springframework.context.ApplicationContext;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname MyTest</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2021/2/24 15:27</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    @Test    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test()&#123;        <span class="hljs-comment">// 如果完全使用了配置类方式去做，我们就只能通过Annotationconfig的方式来获取容器，通过配置类的class对象加载</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);        User getUser = (User)applicationContext.getBean(<span class="hljs-string">&quot;getUser&quot;</span>);        System.out.println(getUser);    &#125;&#125;</code></pre><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>以前我们使用xml的方式类配置bean，现在只要在配置类中，使用@Configuration注解标识，然后在下面注册bean即可达到效果，但是如果我们使用了javaconfig这种方式，那么applicationContext这个实例化对象的构造方法是Annotation这种方法，不是以前xml的方式了。</p><p><img src="https://img-blog.csdnimg.cn/20210224153858994.png" alt="在这里插入图片描述"></p><p>在java的配置方式，springboot随处可见。</p><h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式是SpringAOP的底层<br>代理模式有两种模式，静态与动态代理</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>抽象角色：一般会使用接口或者抽象类来解决</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo1;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Rent</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:48</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 租房的接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>真实角色：被代理的对象</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo1;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Host</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:48</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 房东</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span>  </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);    &#125;&#125;</code></pre><p>代理角色：代理真实对象，我们一般会进行一些附属操作</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo1;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Proxy</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:50</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span></span>&#123;    <span class="hljs-keyword">private</span> Host host;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">()</span></span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Proxy</span><span class="hljs-params">(Host host)</span></span>&#123;        <span class="hljs-keyword">this</span>.host = host;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rent</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;我是代理&quot;</span>);        host.rent();    &#125;&#125;</code></pre><p>客户：访问代理对象的人</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo1;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Client</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 15:49</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Host host = <span class="hljs-keyword">new</span> Host();        Proxy proxy = <span class="hljs-keyword">new</span> Proxy(host);        proxy.rent();    &#125;&#125;</code></pre><p>代理模式的好处，<br>可以使真实角色的操作可以更加纯粹，不用去关注一些公共的业务<br>公共业务就交给了代理角色，实现了业务的分工<br>公共业务发生拓展的时候，方便集中管理</p><p>缺点：<br>一个真实角色，就会产生一个代理角色，代码量会翻倍，开发效率会变低。</p><h3 id="静态代理的另一个列子"><a href="#静态代理的另一个列子" class="headerlink" title="静态代理的另一个列子"></a>静态代理的另一个列子</h3><p>就是日志功能，我们想在进行功能模块的之后，进行日志的一个输出，但是正常功能的模块不应该包含输出内容，所以需要用代理模式。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo2;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserServiceProxy</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 17:18</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    UserServiceImpl userService;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;        log(<span class="hljs-string">&quot;add&quot;</span>);        userService.add();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delate</span><span class="hljs-params">()</span> </span>&#123;        log(<span class="hljs-string">&quot;delete&quot;</span>);        userService.delate();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">()</span> </span>&#123;        log(<span class="hljs-string">&quot;update&quot;</span>);        userService.update();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;        log(<span class="hljs-string">&quot;query&quot;</span>);        userService.query();    &#125;    <span class="hljs-comment">// 日志方法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String message)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;使用了&quot;</span> + message + <span class="hljs-string">&quot;方法&quot;</span>);    &#125;&#125;</code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>动态代理和静态代理角色一样<br>动态代理的类是动态生成的不是我们直接写好的。<br>动态代理可以分成两大类，基于接口和基于类</p><p>基于接口jdk<br>基于类 cglib<br>java字节码，javassist</p><p>需要了解两个类，Proxy InvocationHandler</p><p>动态代理的好处：静态代理的好处都有<br>一个动态代理类的是一个接口，一般就是对应的一类业务<br>一个动态代理类可以代理多个类，只要是实现了一个同样的接口即可。</p><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> com.mmz.demo4;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> ProxyInvocationHandler</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 18:25</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;    <span class="hljs-keyword">private</span> Object <span class="hljs-keyword">target</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        log(method.getName());        Object result = method.invoke(<span class="hljs-keyword">target</span>,args);        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function">Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),<span class="hljs-keyword">target</span>.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String msg)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+ msg + <span class="hljs-string">&quot;方法&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.demo4;<span class="hljs-keyword">import</span> com.mmz.demo2.UserService;<span class="hljs-keyword">import</span> com.mmz.demo2.UserServiceImpl;<span class="hljs-keyword">import</span> sun.plugin.util.UserProfile;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Client</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/24 18:28</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 真实角色</span>        UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();        <span class="hljs-comment">// 代理角色，不存在</span>        ProxyInvocationHandler proxyInvocationHandler = <span class="hljs-keyword">new</span> ProxyInvocationHandler();        proxyInvocationHandler.setTarget(userService); <span class="hljs-comment">// 设置要代理的对象</span>        <span class="hljs-comment">// 动态生成代理类</span>        UserService proxy = (UserService) proxyInvocationHandler.getProxy();        proxy.delate();    &#125;&#125;</code></pre><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>应用动态的代理，个人理解核心在于我们写的代理类的代码，通过这个代理类代码，我们最后通过getProxy方法返回一个代理的类，当然我们也需要重写invoke方法处理代理方法，代理接口，代理类。</p><p>我们如果想要在代理的方法上下进行增加其他方法，只需要在重写invoke方法的时候，在其上下增加。</p><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>面向切面编程aspect oriented programming ，通过预编译的方式和运行期动态代理实现程序功能的统一维护的一种技术。<br><img src="https://img-blog.csdnimg.cn/20210224183846578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Aop在Spring中的作用"><a href="#Aop在Spring中的作用" class="headerlink" title="Aop在Spring中的作用"></a>Aop在Spring中的作用</h2><p>提供声明式事务，允许用户自定义切面<br><img src="https://img-blog.csdnimg.cn/2021022418403059.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210224184052349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210224190423822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="使用Spring实现aop"><a href="#使用Spring实现aop" class="headerlink" title="使用Spring实现aop"></a>使用Spring实现aop</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="方式一：使用Spring的API接口"><a href="#方式一：使用Spring的API接口" class="headerlink" title="方式一：使用Spring的API接口"></a>方式一：使用Spring的API接口</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string"></span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注解bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.service.UserServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.log.Log&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.log.AfterLog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置aop，需要导入aop约束--&gt;</span>    <span class="hljs-comment">&lt;!--方式一：使用原生的Spring API接口--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--切入点：需要在哪里执行--&gt;</span>        <span class="hljs-comment">&lt;!--expression 表达式，execution(要执行的位置） * * * * * --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mmz.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span>        <span class="hljs-comment">&lt;!--执行环绕增强--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="方式二：使用自定义类实现aop"><a href="#方式二：使用自定义类实现aop" class="headerlink" title="方式二：使用自定义类实现aop"></a>方式二：使用自定义类实现aop</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:aop</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string"></span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/aop</span></span><span class="hljs-tag"><span class="hljs-string">https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--注解bean--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.service.UserServiceImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.log.Log&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;afterLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.log.AfterLog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-comment">&lt;!--    &amp;lt;!&amp;ndash;配置aop，需要导入aop约束&amp;ndash;&amp;gt;--&gt;</span><span class="hljs-comment">&lt;!--    &amp;lt;!&amp;ndash;方式一：使用原生的Spring API接口&amp;ndash;&amp;gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;aop:config&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &amp;lt;!&amp;ndash;切入点：需要在哪里执行&amp;ndash;&amp;gt;--&gt;</span><span class="hljs-comment">&lt;!--        &amp;lt;!&amp;ndash;expression 表达式，execution(要执行的位置） * * * * * &amp;ndash;&amp;gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.mmz.service.UserServiceImpl.*(..))&quot;/&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &amp;lt;!&amp;ndash;执行环绕增强&amp;ndash;&amp;gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;aop:advisor advice-ref=&quot;log&quot; pointcut-ref=&quot;pointcut&quot;&gt;&lt;/aop:advisor&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;aop:advisor advice-ref=&quot;afterLog&quot; pointcut-ref=&quot;pointcut&quot;&gt;&lt;/aop:advisor&gt;--&gt;</span><span class="hljs-comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--方式二：自定义类--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.diy.DiyPointCut&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-comment">&lt;!--自定义切面--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span>            <span class="hljs-comment">&lt;!--切入点--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;point&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mmz.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:before</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;point&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:after</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>方法一的方式，是利用接口实现，实现一个org.springframework.aop包下面的接口，然后在applicationContext中去配置。<br>方式二就是正常写一个方法，然后利用标签aop/after-before这种去完成。</p><h2 id="方式三：使用注解实现"><a href="#方式三：使用注解实现" class="headerlink" title="方式三：使用注解实现"></a>方式三：使用注解实现</h2><p>配置文件applicationContext</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointCut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.diy.AnnotationPoint&quot;</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>   <span class="hljs-comment">&lt;!--开启注解支持--&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspectj-autoproxy</span>&gt;</span></code></pre><p>注解类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.diy;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> AnnotationPoint</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/25 15:51</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Aspect</span> <span class="hljs-comment">// 注解标记这个类是一个切面</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPoint</span> </span>&#123;    <span class="hljs-meta">@Before(&quot;execution(* com.mmz.service.UserServiceImpl.*(..))&quot;)</span> <span class="hljs-comment">// 写入切入点</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;方法执行前&quot;</span>);    &#125;&#125;</code></pre><h1 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h1><p>步骤：<br>1）导入jar包<br>2）编写配置文件<br>3）测试</p><h2 id="回忆mybatis"><a href="#回忆mybatis" class="headerlink" title="回忆mybatis"></a>回忆mybatis</h2><p>编写实体类<br>编写核心配置文件<br>编写接口<br>编写mapper.xml<br>测试</p><h1 id="Mybatis-Spring"><a href="#Mybatis-Spring" class="headerlink" title="Mybatis-Spring"></a>Mybatis-Spring</h1><p>原来我们都是使用xml的方式，编写mybatis-config.xml 然后在里面去配置configuration<br>但是现在Spring与Mybatis进行了整合，我们只需要在spring中的配置文件配置即可。<br>所以我们之前利用resource去build factory，然后opensession方法得到mapper，最后mapper调用方法。现在我们都可以在spring中配置实现了。</p><p>之前我们需要配置dataSource，在xml中</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;</span>           <span class="hljs-comment">&lt;!--            事务类型--&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>           <span class="hljs-comment">&lt;!--   配置数据源（连接池）         --&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span>               <span class="hljs-comment">&lt;!--                配置数据库的四个基本信息--&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatismmz?serverTimezone=UTC<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></code></pre><p> 现在</p><pre><code class="hljs applescript">&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;datasource&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;        &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> value=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;        &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatismmz?serverTimezone=UTC&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;        &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;        &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;    &lt;/bean&gt;</code></pre><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置sqlsessionFactory和DataSource--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--绑定mybatis--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:com/mmz/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>编写数据源配置<br>sqlsessionFactory<br>sqlsessionTemplate<br>需要给接口添加实现类<br>测试，将自己写的实现类，注入到spring中，测试使用即可。</p><h1 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h1><h2 id="回顾事务"><a href="#回顾事务" class="headerlink" title="回顾事务"></a>回顾事务</h2><p>要么都成功，要么都失败<br>事务在项目开发中，十分的重要，涉及到数据的一致性问题，不能马虎。<br>确保完整性和一致性</p><h2 id="事务acid"><a href="#事务acid" class="headerlink" title="事务acid"></a>事务acid</h2><p>原子性<br>一致性<br>隔离性：多个业务操作一个资源，防止数据损坏<br>持久性：事务一旦提交，无论系统发生了什么事情，结果都不再会影响，被持久化的写到存储器中。</p><h2 id="模拟事务"><a href="#模拟事务" class="headerlink" title="模拟事务"></a>模拟事务</h2><p>我又新增了两个功能，一个是增加用户，另一个是删除用户。但是我在删除用户的sql故意写错一个字母，导致只能实现新增用户的功能，并且把两个功能，都放在遍历输出user的功能下面。<br>运行，果不其然，idea报错，但是我们可以清晰看到，user被新增了，这样是不符合业务逻辑，如果出现问题，其实应该事务控制导致回滚。<br>那么spring就提供了事务的这个概念，帮助我们实现事务。</p><h2 id="Spring中的事务管理"><a href="#Spring中的事务管理" class="headerlink" title="Spring中的事务管理"></a>Spring中的事务管理</h2><p>声明式事务：AOP</p><p>编程式事务：需要在代码中，进行事务的管理</p><p>为什么需要事务，<br>如果不配置事务，可能存在数据提交不一致的情况下<br>如果我们不在spring中去配置声明式事务   我们就需要在代码中手动配置事务<br>事务在项目的开发中十分重要，涉及到数据的一致性和完整性，不容马虎</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置声明式事务--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-comment">&lt;!--结合AOP实现事务的织入--&gt;</span>    <span class="hljs-comment">&lt;!--配置事务的通知--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--配置事务的传播特性--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span>    <span class="hljs-comment">&lt;!--配置事务切入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointCut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mmz.mapper.*.*(..))&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointCut&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aop:advisor</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring(上)</title>
    <link href="/2021/02/07/Spring-%E4%B8%8A/"/>
    <url>/2021/02/07/Spring-%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring 春天，给软件行业带来了春天<br>2002，首次推出了框架interface21（spring前身）<br>2004，推出了spring框架<br>spring理念，使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的框架</p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>Spring是一个开源的免费框架<br>Spring是一个轻量级，非入侵式的框架<br>控制反转，面向切面编程<br>支持事务的处理，对框架整合的支持</p><p>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架</p><h1 id="Spring的组成"><a href="#Spring的组成" class="headerlink" title="Spring的组成"></a>Spring的组成</h1><p><img src="https://img-blog.csdnimg.cn/20210205222832773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p><img src="https://img-blog.csdnimg.cn/20210205222934932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在spring的官网的介绍，现代化的java开发， 就是基于Spring开发</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p>快速开发的脚手架，基于SpringBoot可以开发一个微服务<br>约定大于配置<br>学习SpringBoot，需要掌握Spring以及SpringMVC</p><h2 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h2><p>基于SpringBoot实现的</p><h1 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h1><p>UserDao接口——UserDaoImpl实现类——UserService业务接口——UserServiceImpl业务实现类</p><p>下面是正常的项目目录结构<br><img src="https://img-blog.csdnimg.cn/20210205224359252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以前我们如果想要去改变这个接口，必须修改dao层的源码，如果有很多的类，就要一样的修改。但是现在我们利用接口的思想，只需要Service去调用即可。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.service;<span class="hljs-keyword">import</span> com.mmz.dao.UserDao;<span class="hljs-keyword">import</span> com.mmz.dao.UserDaoImpl;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserServiceImpl</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/2/5 22:40</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;    <span class="hljs-keyword">private</span> UserDao userDao;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(UserDao userDao)</span></span>&#123;        <span class="hljs-keyword">this</span>.userDao = userDao;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;        userDao.getUser();    &#125;&#125;</code></pre><p>相当于用一个set函数可以选择你到底使用什么dao层的类型。</p><p>在之前的业务中，用户的需求的变动会影响我们的代码，我们需要根据用户的需求去修改代码，如果程序的代码量十分庞大，修改一次的成本会特别高。</p><p>我们用一个set接口实现，已经发生了革命性的变化，原来的程序主动创建对象，控制权在程序员手上。使用set注入，程序不再有主动性，而是变成了被动的接收对象</p><p>这种思想从本质上解决了问题，程序员不用在管理对象的创建了。<br>系统的耦合性大大降低，可以更加专注在业务上的实现，这是IOC的原型。</p><h2 id="IOC的本质"><a href="#IOC的本质" class="headerlink" title="IOC的本质"></a>IOC的本质</h2><p>解耦之后，用户想要去调用谁就使用谁<br><img src="https://img-blog.csdnimg.cn/20210205230219675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Ioc是Spring框架的核心内容，使用多种方式完美的实现了Ioc，可以使用xml配置，也可以使用注解，新版本的Spring也可以零配置实现Ioc</p><p>Spring容器在初始化的读取配置文件，根据配置文件或者元数据创建与组织对象存入容器，程序使用时在从Ioc容器中取出需要的对象。</p><p><img src="https://img-blog.csdnimg.cn/20210205230511952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><h2 id="首先编写自己pojo的类，这里用了lombok插件"><a href="#首先编写自己pojo的类，这里用了lombok插件" class="headerlink" title="首先编写自己pojo的类，这里用了lombok插件"></a>首先编写自己pojo的类，这里用了lombok插件</h2><p><img src="https://img-blog.csdnimg.cn/20210205231409941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="编写beans-xml文件"><a href="#编写beans-xml文件" class="headerlink" title="编写beans.xml文件"></a>编写beans.xml文件</h2><p>beans.xml模板xml文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p> 创建bean</p><pre><code class="hljs applescript">&lt;bean <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-built_in">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.Hello&quot;</span>&gt;     &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;Spring&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt; &lt;/bean&gt;</code></pre><h2 id="实例化容器"><a href="#实例化容器" class="headerlink" title="实例化容器"></a>实例化容器</h2><p>提供使用applicationContext，可以从外部资源中加载我们的元数据</p><p>直接调用getBeans直接获取到对象，参数为当时我们在xml中注册的id即可。</p><pre><code class="hljs reasonml">@Test   public void test<span class="hljs-constructor">OfApp()</span>&#123;       <span class="hljs-comment">// 如果用xml去配置，必须使用这个实现类</span>       <span class="hljs-comment">// 获取spring的上下文对象</span>       ApplicationContext applicationContext = <span class="hljs-keyword">new</span> <span class="hljs-constructor">ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>)</span>;       <span class="hljs-comment">// 现在我们使用的对象都在spring中管理了，我们想要使用哪个对象直接从Spring中取出来即可。</span>       Hello hello = (Hello)applicationContext.get<span class="hljs-constructor">Bean(<span class="hljs-string">&quot;hello&quot;</span>)</span>;       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hello);   &#125;</code></pre><p>测试结果<br><img src="https://img-blog.csdnimg.cn/20210205232055438.png" alt="在这里插入图片描述"></p><p>传统的对象是程序本身控制创建，使用Spring之后，对象是由Spring创建的，<br>反转之后，程序不会主动的创建对象，而变成被动的接受对象</p><p>依赖注入：本质就是由set注入的</p><h1 id="根据上面学到的ioc修改一下ioc本质的代码"><a href="#根据上面学到的ioc修改一下ioc本质的代码" class="headerlink" title="根据上面学到的ioc修改一下ioc本质的代码"></a>根据上面学到的ioc修改一下ioc本质的代码</h1><h2 id="创建beans-xml"><a href="#创建beans-xml" class="headerlink" title="创建beans.xml"></a>创建beans.xml</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd &quot;</span>&gt;</span>    <span class="hljs-comment">&lt;!--使用Spring来创建，在Spring中都叫做bean--&gt;</span>    <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">    id 相当于变量名</span><span class="hljs-comment">    class new的对象</span><span class="hljs-comment">    property 给对象中的属性设置一个值</span><span class="hljs-comment">    --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mysqlImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.dao.UserDaoMysqlImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;oracleImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.dao.UserDaoOracleImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.service.UserServiceImpl&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--ref引用spring容器中创建好的对象--&gt;</span>        <span class="hljs-comment">&lt;!--value基本引用类型--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;mysqlImpl&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="测试类直接调用"><a href="#测试类直接调用" class="headerlink" title="测试类直接调用"></a>测试类直接调用</h2><pre><code class="hljs actionscript"><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> com.mmz.dao.UserDaoMysqlImpl;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> com.mmz.service.UserServiceImpl;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.springframework.context.ApplicationContext;</span><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname MyTest</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2021/2/5 22:41</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;        <span class="hljs-comment">// 用户实际调用的是业务层，dao层他们不需要接触</span>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);        UserServiceImpl userServiceImpl = (UserServiceImpl)applicationContext.getBean(<span class="hljs-string">&quot;UserServiceImpl&quot;</span>);        userServiceImpl.getUser();    &#125;&#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210205235815947.png" alt="在这里插入图片描述"></p><h1 id="IOC创建对象的方式"><a href="#IOC创建对象的方式" class="headerlink" title="IOC创建对象的方式"></a>IOC创建对象的方式</h1><h2 id="使用无参构造函数创建对象，默认"><a href="#使用无参构造函数创建对象，默认" class="headerlink" title="使用无参构造函数创建对象，默认"></a>使用无参构造函数创建对象，默认</h2><h2 id="假设我们要使用有参构造创建对象"><a href="#假设我们要使用有参构造创建对象" class="headerlink" title="假设我们要使用有参构造创建对象"></a>假设我们要使用有参构造创建对象</h2><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">User</span>(String <span class="hljs-type">name</span>)&#123;       this.name = <span class="hljs-type">name</span>;   &#125;</code></pre><h3 id="下标赋值"><a href="#下标赋值" class="headerlink" title="下标赋值"></a>下标赋值</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--第一种，下标赋值--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mmz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h3 id="通过类型创建"><a href="#通过类型创建" class="headerlink" title="通过类型创建"></a>通过类型创建</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--不建议使用 通过类型创建--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mmz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h3 id="使用参数名来构造"><a href="#使用参数名来构造" class="headerlink" title="使用参数名来构造"></a>使用参数名来构造</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用参数名来构造--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mmz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在配置文件中加载的时候，容器中管理的对象就已经初始化了。</p><h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><pre><code class="hljs monkey">&lt;<span class="hljs-keyword">alias</span> <span class="hljs-title">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-keyword">alias</span>=<span class="hljs-string">&quot;asdad&quot;</span>&gt;&lt;/<span class="hljs-keyword">alias</span>&gt;</code></pre><p>就是在getBean的时候，可以用别名的id来替换<br>相当于用别名来获取Bean</p><h2 id="Bean的配置"><a href="#Bean的配置" class="headerlink" title="Bean的配置"></a>Bean的配置</h2><p>暂无</p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>这个import，一般用于团队开发使用，可以将多个配置文件，导入合并为一个<br><img src="https://img-blog.csdnimg.cn/20210207021256140.png" alt="在这里插入图片描述"></p><p>在这个resources目录下面，可以创建多个beans.xml可以不叫这个名字，最后我们在多个beans.xml 可以配置各自的bean，最后用import到导入一个xml文件即可。<br><img src="https://img-blog.csdnimg.cn/20210207021345851.png" alt="在这里插入图片描述"><br>内容相同也会被合并。</p><h1 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI 依赖注入"></a>DI 依赖注入</h1><h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><p>前面已经说过，constructor-arg</p><h2 id="set方式注入"><a href="#set方式注入" class="headerlink" title="set方式注入"></a>set方式注入</h2><p>property<br>依赖：bean对象都依赖于容器<br>注入：bean对象中的所有属性由容器注入</p><p>一样</p><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;mmz&quot;</span>&gt;&lt;/<span class="hljs-keyword">property</span>&gt;       &lt;<span class="hljs-keyword">property</span> <span class="hljs-built_in">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;           &lt;value&gt;mmz&lt;/value&gt;       &lt;/<span class="hljs-keyword">property</span>&gt;</code></pre><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">http://www.springframework.org/schema/beans/spring-beans-4.2.xsd &quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.Address&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xixi&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mmz.pojo.Student&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--第一种，普通的值注入，直接用name/value就可以了--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mmz&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-comment">&lt;!--        &lt;property name=&quot;name&quot;&gt;--&gt;</span><span class="hljs-comment">&lt;!--            &lt;value&gt;mmz&lt;/value&gt;--&gt;</span><span class="hljs-comment">&lt;!--        &lt;/property&gt;--&gt;</span>        <span class="hljs-comment">&lt;!--第二种，bean注入，ref--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第三种，数组注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;book&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第四种，list注入--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>敲代码<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第五种，map--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;身份证&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;银行卡&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;654321&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第六种，set--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>英雄联盟<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>炉石传说<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第七种，null--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">null</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-comment">&lt;!--第八种，info--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>2018544031<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span>mmz<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><h2 id="拓展方式注入"><a href="#拓展方式注入" class="headerlink" title="拓展方式注入"></a>拓展方式注入</h2><h1 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h1><p>六种<br><img src="https://img-blog.csdnimg.cn/20210207023410713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重点掌握单例和多例</p><h2 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h2><p><img src="https://img-blog.csdnimg.cn/20210207023435682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就只有一个实例，默认为单例</p><h2 id="多例-原型模式"><a href="#多例-原型模式" class="headerlink" title="多例 原型模式"></a>多例 原型模式</h2><p>在bean标签中的修改</p><p><img src="https://img-blog.csdnimg.cn/20210207023713636.png" alt="在这里插入图片描述"><br>每次从容器中get一个bean，都会产生一个新的对象</p><h2 id="其余的"><a href="#其余的" class="headerlink" title="其余的"></a>其余的</h2><p>request session application<br>在web开发情况中使用</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-下</title>
    <link href="/2021/02/03/Mybatis-%E4%B8%8B/"/>
    <url>/2021/02/03/Mybatis-%E4%B8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h1><p>偷懒神器</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在settings里面Plugins搜索lombok<br>在项目中导入lombok的jar包</p><pre><code class="hljs java">&lt;!-- https:<span class="hljs-comment">//mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span>&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;version&gt;1.18.12&lt;/version&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>@Data 无参构造 get/set toString hashcode equals<br>@AllArgsConstructor 有参构造<br>@NoArgsConstructor 无参构造</p><h1 id="多对一处理"><a href="#多对一处理" class="headerlink" title="多对一处理"></a>多对一处理</h1><p>多个学生对应一个老师，<br>对于学生这边而言，关联， 多个学生关联一个老师<br>对于老师而言，集合，一个老师有很多学生</p><h2 id="重新开启一个module模块"><a href="#重新开启一个module模块" class="headerlink" title="重新开启一个module模块"></a>重新开启一个module模块</h2><p>复制一些配置文件，创建两个实体类，Teacher和Student<br>然后在resource下面创建同名包，TeacherMapper.xml 和 StudentMapper.xml两个配置文件<br>配置内容，复制一下mybatis的配置文件，把所有的configuration改成mapper即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>导入lombok<br>新建实体类Teacher Student<br>建立Mapper接口<br>建立Mapper.xml文件<br>在核心配置文件中绑定注册的我们的Mapper接口或者文件<br>测试查询是否成功</p><h2 id="复杂的多对一查询"><a href="#复杂的多对一查询" class="headerlink" title="复杂的多对一查询"></a>复杂的多对一查询</h2><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF8&quot;</span>?&gt;&lt;!DOCTYPE mapper        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;&lt;!--核心配置文件--&gt;&lt;mapper namespace=<span class="hljs-string">&quot;com.mmz.dao.StudentMapper&quot;</span>&gt;    &lt;!--思路    <span class="hljs-number">1.</span>查询所有的学生信息    <span class="hljs-number">2.</span>根据查询出来的学生的id，寻找对应的老师！    --&gt;   &lt;resultMap id=<span class="hljs-string">&quot;StudentTeacher&quot;</span> type=<span class="hljs-string">&quot;Student&quot;</span>&gt;       &lt;result property=&quot;id&quot; column=&quot;id&quot;&gt;&lt;/result&gt;       &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;       &lt;!--复杂的属性需要单独处理       对象使用assocation       集合使用collection       --&gt;       &lt;association property=<span class="hljs-string">&quot;teacher&quot;</span> column=<span class="hljs-string">&quot;tid&quot;</span> javaType=<span class="hljs-string">&quot;com.mmz.pojo.Teacher&quot;</span> select=<span class="hljs-string">&quot;getTeacher&quot;</span>&gt;       &lt;/association&gt;   &lt;/resultMap&gt;        &lt;select id=<span class="hljs-string">&quot;getStudent&quot;</span> resultMap=<span class="hljs-string">&quot;StudentTeacher&quot;</span>&gt;        select * from student    &lt;/select&gt;    &lt;select id=<span class="hljs-string">&quot;getTeacher&quot;</span> resultType=<span class="hljs-string">&quot;com.mmz.pojo.Teacher&quot;</span>&gt;        select * from teacher where id = #&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre><p>首先明确，老师的查询是通过tid进行查询的，那么学生可以得到老师的tid，所以查询到了学生就能查询到了老师。</p><p>需要用resultMap进行一个整合的查询，首先查询学生的信息并且查询其老师。需要用result标签查询，property是java属性名，column是数据库的列名。然后teacher是一个引用类型，用assocation标签，property属性是student类中的id，column是对应的数据库中的tid，然后在要声明这个javaType是什么类型，然后在调用查询老师，select =”getTeacher”</p><h1 id="一对多处理"><a href="#一对多处理" class="headerlink" title="一对多处理"></a>一对多处理</h1><p>一个老师拥有多个学生<br>对于老师而言，就是一对多的关系</p><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF8&quot;</span>?&gt;&lt;!DOCTYPE mapper        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;&lt;!--核心配置文件--&gt;&lt;mapper namespace=<span class="hljs-string">&quot;com.mmz.dao.TeacherMapper&quot;</span>&gt;    &lt;resultMap id=<span class="hljs-string">&quot;TeacherStudent&quot;</span> type=<span class="hljs-string">&quot;com.mmz.pojo.Teacher&quot;</span>&gt;        &lt;result property=&quot;id&quot; column=&quot;tid&quot;&gt;&lt;/result&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/result&gt;        &lt;collection property=<span class="hljs-string">&quot;students&quot;</span> ofType=<span class="hljs-string">&quot;com.mmz.pojo.Student&quot;</span>&gt;            &lt;result property=&quot;id&quot; column=&quot;sid&quot;&gt;&lt;/result&gt;            &lt;result property=&quot;name&quot; column=&quot;sname&quot;&gt;&lt;/result&gt;            &lt;result property=&quot;tid&quot; column=&quot;tid&quot;&gt;&lt;/result&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;        &lt;select id=<span class="hljs-string">&quot;getTeacher&quot;</span> resultMap=<span class="hljs-string">&quot;TeacherStudent&quot;</span>&gt;        select s.id sid,s.name sname,t.id tid        from student s ,teacher t        where s.tid = t.id and t.id = #&#123;tid&#125;    &lt;/select&gt;    &lt;select id=<span class="hljs-string">&quot;getTeachers&quot;</span> resultType=<span class="hljs-string">&quot;com.mmz.pojo.Teacher&quot;</span>&gt;        select * from teacher    &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h1 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h1><p>动态sql就是根据不同的条件生成不同的sql语句</p><p>新建sql</p><pre><code class="hljs java">CREATE TABLE `blog`(`id` VARCHAR(<span class="hljs-number">50</span>) NOT NULL COMMENT <span class="hljs-string">&#x27;博客id&#x27;</span>,`title` VARCHAR(<span class="hljs-number">100</span>) NOT NULL COMMENT <span class="hljs-string">&#x27;博客标题&#x27;</span>,`author` VARCHAR(<span class="hljs-number">30</span>) NOT NULL COMMENT <span class="hljs-string">&#x27;博客作者&#x27;</span>,`create_time` DATETIME NOT NULL COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,`views` INT(<span class="hljs-number">30</span>) NOT NULL COMMENT <span class="hljs-string">&#x27;浏览量&#x27;</span>)ENGINE=INNODB DEFAULT CHARSET=utf8</code></pre><p>创建一个基础工程<br>1.导包<br>2.编写配置文件<br>3.编写实体类<br>4.编写mapper以及mapper.xml<br>5.测试</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.pojo;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Blog</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/1/11 16:34</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Blog</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id ;    <span class="hljs-keyword">private</span> String title;    <span class="hljs-keyword">private</span> String author;    <span class="hljs-keyword">private</span> Date createTime;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> views;&#125;</code></pre><h2 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h2><p><img src="https://img-blog.csdnimg.cn/20210120143910467.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>目的需求就是在于if进行条件判断，如果有这个条件参数那么进行判断，如果没有照常查询。</p><p>下面是xml配置文件的sql语句</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mmz.pojo.Blog&quot;</span>&gt;</span></span><span class="xml">       select * from blog where 1=1</span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span></span><span class="xml">           and title = #</span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="xml">           and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre><p>我们用万能的map类型先进行测试一下，这里map为空</p><pre><code class="hljs reasonml">@Test   public void test<span class="hljs-constructor">If()</span>&#123;       SqlSession sqlsession = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">MybatisUtils</span>.</span></span>get<span class="hljs-constructor">Sqlsession()</span>;       BlogMapper mapper = sqlsession.get<span class="hljs-constructor">Mapper(BlogMapper.<span class="hljs-params">class</span>)</span>;       HashMap hashMap = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HashMap()</span>;       List&lt;Blog&gt; blogs = mapper.query<span class="hljs-constructor">BlogIF(<span class="hljs-params">hashMap</span>)</span>;       <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(blog);       &#125;       sqlsession.close<span class="hljs-literal">()</span>;   &#125;</code></pre><p>输出显而易见<img src="https://img-blog.csdnimg.cn/20210121002805434.png" alt="在这里插入图片描述"></p><p>那么我们在进行对map进行一次操作</p><pre><code class="hljs applescript">hashMap.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;java yyds&quot;</span>);</code></pre><p><img src="https://img-blog.csdnimg.cn/20210121002927721.png" alt="在这里插入图片描述"><br>就会只查询到两条记录</p><h2 id="choose-when-otherwise标签"><a href="#choose-when-otherwise标签" class="headerlink" title="choose when otherwise标签"></a>choose when otherwise标签</h2><p>有时候我们不想应用到所有的条件语句，而只想从中选择其中一项，针对这种情况，mybatis提供了choose元素，它有点像java中switch语句。<br><img src="https://img-blog.csdnimg.cn/20210201220735827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>那么if标签其实相当于有多个条件的时候，进行并列的查询。choose标签上面也提及到了相当于switch语句，只判断一个等价的条件。</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogChoose&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;blog&quot;</span>&gt;</span></span><span class="xml">        select * from blog</span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span></span><span class="xml">                    title = #</span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="xml">                    and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span></span><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span></span><span class="xml">                    and views = #</span><span class="hljs-template-variable">&#123;views&#125;</span><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span></code></pre><h2 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h2><p>这种情况会导致查询失败，如果我们不使用where标签的情况下<br><img src="https://img-blog.csdnimg.cn/20210201221112577.png" alt="在这里插入图片描述"></p><p>那么mybatis提供了一个where标签<br><img src="https://img-blog.csdnimg.cn/20210201221154190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>where元素只会在至少有一个子元素的条件返回Sql子句的情况下才会去插入where子句，而且开头为AND或者OR，where元素也会将它们去除</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span></span><span class="xml">                title = #</span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">           <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="xml">               and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="xml">           <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">       <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span></code></pre><h2 id="set标签"><a href="#set标签" class="headerlink" title="set标签"></a>set标签</h2><p>set类似于应用在更新这个函数中，update/set<br><img src="https://img-blog.csdnimg.cn/20210201222454152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>正常的sql更新语句</p><pre><code class="hljs routeros">UPDATE Person <span class="hljs-builtin-name">SET</span><span class="hljs-built_in"> Address </span>= <span class="hljs-string">&#x27;Zhongshan 23&#x27;</span>, City = <span class="hljs-string">&#x27;Nanjing&#x27;</span>WHERE LastName = <span class="hljs-string">&#x27;Wilson&#x27;</span></code></pre><p>那么set标签就起到一个考虑逗号的作用。</p><p>所谓的动态sql，其实还是sql语句。只是我们可以在sql层面去执行一些逻辑代码。</p><h2 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h2><p>有的时候，我们会将公共的sql部分抽取出来，方便复用。</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryBlogIF&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;map&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mmz.pojo.Blog&quot;</span>&gt;</span></span><span class="xml">        select * from blog</span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span></span><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><span class="xml">    </span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;if-title-author&quot;</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span></span><span class="xml">            title = #</span><span class="hljs-template-variable">&#123;title&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span></span><span class="xml">            and author = #</span><span class="hljs-template-variable">&#123;author&#125;</span><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span></span></code></pre><p>首先把复用的代码写入一个sql标签中，标明好其id，然后在要使用的地方，用include标签进行引入。</p><p>注意事项：1）最好基于单表来定义SQL字段。2）不要存在where标签</p><h2 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h2><p>动态sql的另外一个常用的操作需求是对一个集合进行遍历，通常是在构建in条件语句的时候，比如： ID in 集合<br><img src="https://img-blog.csdnimg.cn/20210201224513777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>动态sql就是在拼接sql语句，我们只要保证sql的正确性，按照sql的格式，排列组合就可以了。</p><p>提出建议，先在mysql写出完整的sql，在对应的去修改成为我们的动态sql，实现通用。</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们每次进行查询的时候，都需要连接数据库，浪费消耗资源。<br>所以我们把查询的结果，放置在内存中暂存。<br>我们再次查询相同数据的时候，直接走缓存就可以了。<br>主要解决高并发的系统性能问题。</p><h2 id="mybatis中的缓存"><a href="#mybatis中的缓存" class="headerlink" title="mybatis中的缓存"></a>mybatis中的缓存</h2><p>Mybatis包含了一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存，缓存可以极大的提升查询效率。</p><p>mybatis定了一级缓存和二级缓存，默认情况下，只有一级缓存开启，sqlsession级别的缓存，也称为本地缓存（也就是sqlsession.close）。二级缓存需要开启和配置，它是基于namespace级别的缓存。</p><p>为了提高拓展性，mybatis定义了缓存接口cache，我们可以通过实现Cache接口来自定义二级接口。</p><h2 id="Cache类"><a href="#Cache类" class="headerlink" title="Cache类"></a>Cache类</h2><p>是ibatis下面的类</p><p><img src="https://img-blog.csdnimg.cn/20210202182321781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="缓存的更新策略"><a href="#缓存的更新策略" class="headerlink" title="缓存的更新策略"></a>缓存的更新策略</h2><p><img src="https://img-blog.csdnimg.cn/20210202182412405.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>一级缓存上述说道是默认存在的，又开启了一个新的模块。对User进行查询的功能。<br><img src="https://img-blog.csdnimg.cn/20210202183742597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以发现查询到User对象是相同的。<br><img src="https://img-blog.csdnimg.cn/20210202183916712.png" alt="在这里插入图片描述"><br>为了进行测试，在两次查询中间加入一次更新的操作。</p><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> com.mmz.dao.UserMapper;<span class="hljs-keyword">import</span> com.mmz.pojo.<span class="hljs-keyword">User</span>;<span class="hljs-keyword">import</span> com.mmz.utils.MybatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.<span class="hljs-keyword">session</span>.SqlSession;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname MyTest</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2021/2/2 18:31</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyTest &#123;    @Test    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testUser()&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);        List&lt;<span class="hljs-keyword">User</span>&gt; users = mapper.queryUsers();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> : users) &#123;            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);        &#125;        sqlsession.<span class="hljs-keyword">close</span>();    &#125;    @Test    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testUserById()&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = mapper.queryUserById(<span class="hljs-number">1</span>);        <span class="hljs-keyword">User</span> user1 = mapper.queryUserById(<span class="hljs-number">1</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user1);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span> == user1);        sqlsession.<span class="hljs-keyword">close</span>();    &#125;    @Test    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> testUserUpdateAndSelect()&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.<span class="hljs-keyword">class</span>);        <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = mapper.queryUserById(<span class="hljs-number">1</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);        <span class="hljs-keyword">User</span> user1 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();        user1.setId(<span class="hljs-number">1</span>);        user1.setName(&quot;zxg&quot;);        user1.setPwd(&quot;xixi&quot;);        mapper.updateUser(user1);        <span class="hljs-keyword">User</span> user2 = mapper.queryUserById(<span class="hljs-number">1</span>);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(user2);        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span> == user2);        sqlsession.<span class="hljs-keyword">close</span>();    &#125;&#125;</code></pre><p>结果测试截图如下<br><img src="https://img-blog.csdnimg.cn/20210202184544914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>最后结果可以看到，两个独享的结果不一样了。是false</p><h2 id="缓存失效的原因"><a href="#缓存失效的原因" class="headerlink" title="缓存失效的原因"></a>缓存失效的原因</h2><p>1）查询不同的语句<br>2）增删改操作，可能会改变原来的数据，所以必定会刷新缓存<br>3）查询不同的mapper<br>4）手动清理缓存</p><pre><code class="hljs abnf">sqlsession.clearCache()<span class="hljs-comment">;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210202185031946.png" alt="在这里插入图片描述"></p><p>一级缓存是默认开启的，只在一次sqlsession中有效果，也就是拿到连接到关闭连接这个区间之内。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><p>默认情况下，只启动了本地的会话缓存，它仅仅会对一个会话的数据进行缓存，要启用全局的二级缓存，只需要在sql映射文件添加一行</p><pre><code class="hljs apache"><span class="hljs-section">&lt;cache/&gt;</span></code></pre><p><img src="https://img-blog.csdnimg.cn/20210202185443741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="cache内部还可以添加一些属性"><a href="#cache内部还可以添加一些属性" class="headerlink" title="cache内部还可以添加一些属性"></a>cache内部还可以添加一些属性</h3><p><img src="https://img-blog.csdnimg.cn/20210202185513324.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20210202185526335.png" alt="在这里插入图片描述"></p><h3 id="二级缓存开启步骤"><a href="#二级缓存开启步骤" class="headerlink" title="二级缓存开启步骤"></a>二级缓存开启步骤</h3><p>1）开启全局缓存</p><pre><code class="hljs routeros">&lt;setting <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</code></pre><p>2）在mapper里面开启</p><pre><code class="hljs apache"><span class="hljs-section">&lt;cache/&gt;</span></code></pre><h2 id="Mybatis缓存原理"><a href="#Mybatis缓存原理" class="headerlink" title="Mybatis缓存原理"></a>Mybatis缓存原理</h2><p><img src="https://img-blog.csdnimg.cn/20210203214245584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis(上)</title>
    <link href="/2021/01/05/Mybatis-%E4%B8%8A/"/>
    <url>/2021/01/05/Mybatis-%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>mybatis是一个持久层框架，支持定制化的sql，存储过程以及高级映射，避免了所有jdbc代码和手动参数集以及获取结果集，mybatis可以使用简单的xml或者注解来配置和映射原生类型，接口和java中的pojo</p><h1 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h1><p>数据持久化，就是将程序的数据在持久状态和瞬时状态转化的过程。<br>内存：数据断电就丢失了<br>数据库（jdbc），io文件持久化</p><h1 id="第一个mybatis程序"><a href="#第一个mybatis程序" class="headerlink" title="第一个mybatis程序"></a>第一个mybatis程序</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>在navicat中创建数据库</p><pre><code class="hljs csharp">CREATE DATABASE `mybatismmz`;</code></pre><p>创建表</p><pre><code class="hljs csharp"><span class="hljs-function">CREATE TABLE <span class="hljs-title">user</span>(<span class="hljs-params"></span></span><span class="hljs-function"><span class="hljs-params">id INT(<span class="hljs-number">20</span></span>) not <span class="hljs-literal">null</span> PRIMARY KEY,</span><span class="hljs-function">name <span class="hljs-title">VARCHAR</span>(<span class="hljs-params"><span class="hljs-number">30</span></span>) DEFAULT NULL,</span><span class="hljs-function">pwd <span class="hljs-title">VARCHAR</span>(<span class="hljs-params"><span class="hljs-number">30</span></span>) DEFAULT NULL</span><span class="hljs-function">)ENGINE</span>=INNODB DEFAULT CHARSET=utf8;</code></pre><p>别忘符号的关系</p><p>插入数据</p><pre><code class="hljs csharp"><span class="hljs-function">INSERT INTO <span class="hljs-title">user</span>(<span class="hljs-params">id,name,pwd</span>) VALUES</span><span class="hljs-function">(<span class="hljs-params"><span class="hljs-number">1</span>,<span class="hljs-string">&#x27;mmz&#x27;</span>,<span class="hljs-string">&#x27;123&#x27;</span></span>),</span><span class="hljs-function">(<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-string">&#x27;mmz1&#x27;</span>,<span class="hljs-string">&#x27;213&#x27;</span></span>),</span><span class="hljs-function">(<span class="hljs-params"><span class="hljs-number">3</span>,<span class="hljs-string">&#x27;mmz2&#x27;</span>,<span class="hljs-string">&#x27;321&#x27;</span></span>)</span><span class="hljs-function"></span></code></pre><h2 id="创建一个普通的maven项目，是父工程。导入依赖创建子工程"><a href="#创建一个普通的maven项目，是父工程。导入依赖创建子工程" class="headerlink" title="创建一个普通的maven项目，是父工程。导入依赖创建子工程"></a>创建一个普通的maven项目，是父工程。导入依赖创建子工程</h2><p>导入父工程依赖pom.xml</p><pre><code class="hljs csharp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;project xmlns=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         xsi:schemaLocation=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;    &lt;modelVersion&gt;<span class="hljs-number">4.0</span><span class="hljs-number">.0</span>&lt;/modelVersion&gt;    &lt;groupId&gt;com.mmz&lt;/groupId&gt;    &lt;artifactId&gt;MmzMybatisLearning&lt;/artifactId&gt;    &lt;version&gt;<span class="hljs-number">1.0</span>-SNAPSHOT&lt;/version&gt;    &lt;!--导入依赖--&gt;    &lt;dependencies&gt;        &lt;!--mysql驱动--&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.11</span>&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--mybatis--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;<span class="hljs-number">3.4</span><span class="hljs-number">.5</span>&lt;/version&gt;        &lt;/dependency&gt;        &lt;!--junit--&gt;        &lt;dependency&gt;            &lt;groupId&gt;junit&lt;/groupId&gt;            &lt;artifactId&gt;junit&lt;/artifactId&gt;            &lt;version&gt;<span class="hljs-number">4.10</span>&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><h2 id="创建一个子module"><a href="#创建一个子module" class="headerlink" title="创建一个子module"></a>创建一个子module</h2><p>在子module中配置mybatis的</p><h2 id="配置文件mybatis-config-xml"><a href="#配置文件mybatis-config-xml" class="headerlink" title="配置文件mybatis-config.xml"></a>配置文件mybatis-config.xml</h2><pre><code class="hljs csharp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;!DOCTYPE configuration        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;&lt;!--核心配置文件--&gt;&lt;configuration&gt;    &lt;!--    配置环境--&gt;    &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;        &lt;environment id=<span class="hljs-string">&quot;mysql&quot;</span>&gt;            &lt;!--            事务类型--&gt;            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span>&gt;&lt;/transactionManager&gt;            &lt;!--   配置数据源（连接池）         --&gt;            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;                &lt;!--                配置数据库的四个基本信息--&gt;                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;                &lt;property name=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatismmz?serverTimezone=UTC&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&quot;</span>&gt;&lt;/property&gt;                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;&lt;/property&gt;                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;/property&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;!--如果是用注解来配置的话，应该使用class属性指定被注解的dao全限定类名--&gt;    &lt;mappers&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h2 id="编写mybatis工具类"><a href="#编写mybatis工具类" class="headerlink" title="编写mybatis工具类"></a>编写mybatis工具类</h2><p>每个基于mybatis的应用都是以一个sqlsessionfactory的实例为核心的，sqlsessionfactory的实例可以通过sqlsessionfactorybuilder获得。这个builder可以通过xml配置文件或者一个预定先定制的Configuration的实例构建出来。<br><img src="https://img-blog.csdnimg.cn/20201224213408985.png" alt="在这里插入图片描述"></p><p>可以从sqlsessionfactory中获取sqlsession，因为sqlsession里面包含了所有数据库执行sql命令所需要的方法，你可以通过sqlsession实例来直接执行已经映射的sql语句</p><p><img src="https://img-blog.csdnimg.cn/20201224213345886.png" alt="在这里插入图片描述"></p><h2 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h2><pre><code class="hljs csharp">package com.mmz.pojo;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname User</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/24 21:57</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 实体类</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">User</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span>(<span class="hljs-params"></span>)</span> &#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> id, String name, String pwd</span>)</span> &#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> id</span>)</span> &#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params">String name</span>)</span> &#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">return</span> pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span>(<span class="hljs-params">String pwd</span>)</span> &#123;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;&#125;</code></pre><h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><pre><code class="hljs csharp">package com.mmz.dao;import com.mmz.pojo.User;import com.mmz.utils.MybatisUtils;import org.apache.ibatis.session.SqlSession;import org.junit.Test;import java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname UserDaoTest</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/24 22:18</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> &#123;    @Test    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// 创建sqlsession对象</span>        SqlSession sqlsession = MybatisUtils.getSqlsession();        <span class="hljs-comment">// 得到mapper 方式一</span>        UserDao mapper = sqlsession.getMapper(UserDao.class);        <span class="hljs-comment">// 方式二</span>        List&lt;User&gt; userList = mapper.getUserList();        <span class="hljs-keyword">for</span> (User user : userList)&#123;            System.<span class="hljs-keyword">out</span>.println(user);        &#125;        <span class="hljs-comment">// 关闭sqlsession</span>        sqlsession.close();    &#125;&#125;</code></pre><h2 id="编写UserDao的mapper文件"><a href="#编写UserDao的mapper文件" class="headerlink" title="编写UserDao的mapper文件"></a>编写UserDao的mapper文件</h2><pre><code class="hljs csharp">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF8&quot;</span>?&gt;&lt;!DOCTYPE mapper        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;&lt;mapper <span class="hljs-keyword">namespace</span>=<span class="hljs-string">&quot;com.mmz.dao.UserDao&quot;</span>&gt;    &lt;!--    配置查询所有--&gt;    &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;        <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user;    &lt;/<span class="hljs-keyword">select</span>&gt;&lt;/mapper&gt;</code></pre><h2 id="小结-比较mybatis和传统的jdbc"><a href="#小结-比较mybatis和传统的jdbc" class="headerlink" title="小结 比较mybatis和传统的jdbc"></a>小结 比较mybatis和传统的jdbc</h2><p>首先，我们获得一个叫sqlsession的东西，sqlsession可以根据我们写的userdao这个类对象来获得相应的mapper对象，然后通过这个对象来调用方法。</p><pre><code class="hljs csharp">UserDao mapper = sqlsession.getMapper(UserDao.class);</code></pre><p>当然sqlsession是如何知道这个mapper，需要在mybatis-config.xml中配置</p><pre><code class="hljs csharp">&lt;mappers&gt;        &lt;mapper resource=<span class="hljs-string">&quot;com/mmz/dao/UserMapper.xml&quot;</span>&gt;&lt;/mapper&gt;    &lt;/mappers&gt;</code></pre><p>最后我们得到这个mapper，调用userdao接口中的方法。那方法之所以能执行sql语句，是因为mapper.xml中已经写好了sql语句。mapper.xml就是写了sql语句，与绑定的userdao</p><pre><code class="hljs csharp">&lt;mapper <span class="hljs-keyword">namespace</span>=<span class="hljs-string">&quot;com.mmz.dao.UserDao&quot;</span>&gt;    &lt;!--    配置查询所有--&gt;    &lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getUserList&quot;</span> resultType=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;        <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user;    &lt;/<span class="hljs-keyword">select</span>&gt;&lt;/mapper&gt;</code></pre><h1 id="基础CRUD"><a href="#基础CRUD" class="headerlink" title="基础CRUD"></a>基础CRUD</h1><h2 id="namespace-命名空间"><a href="#namespace-命名空间" class="headerlink" title="namespace 命名空间"></a>namespace 命名空间</h2><p>namespace中的包名和Dao/Mapper接口名称一致。</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>select标签相当于查询语句<br>id就是对应的namespace中的方法<br>resultType sql语句中执行的返回值<br>还可能有paramterType 参数类型</p><h2 id="根据用户id查找用户"><a href="#根据用户id查找用户" class="headerlink" title="根据用户id查找用户"></a>根据用户id查找用户</h2><p>当然我们只需要增加userdao中接口的方法</p><pre><code class="hljs csharp"><span class="hljs-comment">// 根据id查询用户</span><span class="hljs-function">User <span class="hljs-title">getUserById</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> id</span>)</span>;</code></pre><p>同样的，我们需要在usermapper.xml中增加select标签，添加查询的sql语句</p><pre><code class="hljs csharp">&lt;<span class="hljs-keyword">select</span> id=<span class="hljs-string">&quot;getUserById&quot;</span> resultType=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;    <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> id = <span class="hljs-meta">#&#123;id&#125;</span>&lt;/<span class="hljs-keyword">select</span>&gt;</code></pre><p>最后增加test测试方法</p><pre><code class="hljs csharp">@Test    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFindUserById</span>(<span class="hljs-params"></span>)</span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        <span class="hljs-comment">// 得到mapper 方式一</span>        UserDao mapper = sqlsession.getMapper(UserDao.class);        User userById = mapper.getUserById(<span class="hljs-number">1</span>);        System.<span class="hljs-keyword">out</span>.println(userById);    &#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/202012242328266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="增加一个用户"><a href="#增加一个用户" class="headerlink" title="增加一个用户"></a>增加一个用户</h2><p>xml配置文件中添加</p><pre><code class="hljs csharp">&lt;!--对象中的属性可以直接取出来--&gt;&lt;insert id=<span class="hljs-string">&quot;addUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span> &gt;    <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">user</span> (<span class="hljs-params">id, name, pwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params">#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;</span>)</span>;&lt;/insert&gt;</code></pre><p>测试代码</p><pre><code class="hljs csharp"><span class="hljs-comment">// 增删改需要提交事务</span>    @Test    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span>(<span class="hljs-params"></span>)</span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserDao mapper = sqlsession.getMapper(UserDao.class);        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;duoduo&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);        <span class="hljs-keyword">int</span> i = mapper.addUser(user);        System.<span class="hljs-keyword">out</span>.println(i);        sqlsession.commit();        sqlsession.close();    &#125;</code></pre><p>记住必须要记住，除了查询之外，增删改数据库，需要提交事务。</p><h2 id="修改更新"><a href="#修改更新" class="headerlink" title="修改更新"></a>修改更新</h2><p>xml配置文件</p><pre><code class="hljs csharp">&lt;update id=<span class="hljs-string">&quot;updateUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.mmz.pojo.User&quot;</span>&gt;       update user <span class="hljs-keyword">set</span> name = <span class="hljs-meta">#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;</span>   &lt;/update&gt;</code></pre><p>测试类代码</p><pre><code class="hljs csharp"><span class="hljs-comment">// 修改更新User</span>    @Test    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span>(<span class="hljs-params"></span>)</span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserDao mapper = sqlsession.getMapper(UserDao.class);        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;duoduo123&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);        <span class="hljs-keyword">int</span> i = mapper.updateUser(user);        System.<span class="hljs-keyword">out</span>.println(i);        sqlsession.commit();        sqlsession.close();    &#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201226161411475.png" alt="在这里插入图片描述"></p><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>xml配置文件</p><pre><code class="hljs csharp">&lt;delete id=<span class="hljs-string">&quot;deleteUser&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;        delete <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> id = <span class="hljs-meta">#&#123;id&#125;;</span>    &lt;/delete&gt;</code></pre><p>测试类</p><pre><code class="hljs csharp"><span class="hljs-comment">// 删除修改User</span>   @Test   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span>(<span class="hljs-params"></span>)</span>&#123;       SqlSession sqlsession = MybatisUtils.getSqlsession();       UserDao mapper = sqlsession.getMapper(UserDao.class);       <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">4</span>);       System.<span class="hljs-keyword">out</span>.println(i);       sqlsession.commit();       sqlsession.close();   &#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201226161714171.png" alt="在这里插入图片描述"></p><h1 id="万能map"><a href="#万能map" class="headerlink" title="万能map"></a>万能map</h1><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当会考虑Map</p><p>xml配置文件</p><pre><code class="hljs csharp">&lt;!--传递map中的key，这样解决了如果User类有过多属性--&gt;    &lt;insert id=<span class="hljs-string">&quot;addUser2&quot;</span> parameterType=<span class="hljs-string">&quot;map&quot;</span> &gt;        <span class="hljs-function">insert <span class="hljs-keyword">into</span> <span class="hljs-title">user</span> (<span class="hljs-params">id, name, pwd</span>) <span class="hljs-title">values</span> (<span class="hljs-params">#&#123;userid&#125;,#&#123;username&#125;,#&#123;userpwd&#125;</span>)</span>;    &lt;/insert&gt;</code></pre><pre><code class="hljs csharp"><span class="hljs-comment">// 增删改需要提交事务</span>   @Test   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser2</span>(<span class="hljs-params"></span>)</span>&#123;       SqlSession sqlsession = MybatisUtils.getSqlsession();       UserDao mapper = sqlsession.getMapper(UserDao.class);       Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();       map.put(<span class="hljs-string">&quot;userid&quot;</span>,<span class="hljs-number">5</span>);       map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;xiaoqi&quot;</span>);       map.put(<span class="hljs-string">&quot;userpwd&quot;</span>,<span class="hljs-string">&quot;jinmao&quot;</span>);       <span class="hljs-keyword">int</span> i = mapper.addUser2(map);       System.<span class="hljs-keyword">out</span>.println(i);       sqlsession.commit();       sqlsession.close();   &#125;</code></pre><p>Map传递参数，直接在sql中取出key即可<br>对象传递参数，直接在sql中取出对象的属性即可，<br>只有一个基本类型参数的情况下， 可以默认在xml配置文件中不写<br>多个参数如果用到了对象，需要写上全限定类名<br>当然还有注解的方式</p><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>1.java代码执行的时候，传递通配符%</p><pre><code class="hljs csharp">List&lt;User&gt; m = mapper.getUserLike(<span class="hljs-string">&quot;%m%&quot;</span>);</code></pre><p>这样不会产生sql注入，需要在java方法里面去写</p><p>2.在sql拼接中使用通配符，这样会产生sql注入</p><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> user <span class="hljs-keyword">where</span> name like “%”<span class="hljs-meta">#&#123;value&#125;“%”;</span></code></pre><h1 id="mybatis的配置解析"><a href="#mybatis的配置解析" class="headerlink" title="mybatis的配置解析"></a>mybatis的配置解析</h1><h2 id="核心配置文件mybatis-config-xml"><a href="#核心配置文件mybatis-config-xml" class="headerlink" title="核心配置文件mybatis-config.xml"></a>核心配置文件mybatis-config.xml</h2><p>官方建议使用这个名字</p><h2 id="环境配置environments"><a href="#环境配置environments" class="headerlink" title="环境配置environments"></a>环境配置environments</h2><p>mybatis可以配置多种环境配置，</p><pre><code class="hljs java">&lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;        &lt;environment id=<span class="hljs-string">&quot;mysql&quot;</span>&gt;            &lt;!--            事务类型--&gt;            &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;            &lt;!--   配置数据源（连接池）         --&gt;            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;                &lt;!--                配置数据库的四个基本信息--&gt;                &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;                &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatismmz?serverTimezone=UTC&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&quot;&gt;&lt;/property&gt;                &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;                &lt;property name=&quot;password&quot; value=&quot;password&quot;&gt;&lt;/property&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;</code></pre><p>可以在这个environments属性中的default属性中设置选择的环境配置</p><h2 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h2><pre><code class="hljs java">&lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;</code></pre><p>在mybatis有两种类型的事务管理器JDBC/MANAGED</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>连接数据库<br>dbcp cp30 druid<br>有三种类型内建的数据库 UNPOOLED POOLED JNDI</p><h3 id="UNPOOLED"><a href="#UNPOOLED" class="headerlink" title="UNPOOLED"></a>UNPOOLED</h3><p>这个数据源的实现只是每次请求的时候打开和关闭连接，虽然有点慢。但是对于在数据库连接可用性方面没有太高的要求的简单程序，是一个很好的选择。</p><h2 id="属性properties"><a href="#属性properties" class="headerlink" title="属性properties"></a>属性properties</h2><p>可以通过属性来引用配置文件<br>这些属性都是外部可以动态替换的，既可以在典型的java属性文件中配置，亦可以通过properties元素的子元素进行传递</p><p>编写db.propeties的配置文件</p><pre><code class="hljs java">dirver=com.mysql.cj.jdbc.Driverurl=jdbc:mysql:<span class="hljs-comment">//localhost:3306/mybatismmz?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span>username=rootpassword=password</code></pre><p>在核心配置文件中引入</p><pre><code class="hljs java">&lt;properties resource=&quot;db.properties&quot;&gt;&lt;/properties&gt;   &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;mysql&quot;</span>&gt;       &lt;environment id=<span class="hljs-string">&quot;mysql&quot;</span>&gt;           &lt;!--            事务类型--&gt;           &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;           &lt;!--   配置数据源（连接池）         --&gt;           &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;               &lt;!--                配置数据库的四个基本信息--&gt;               &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;&gt;&lt;/property&gt;               &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;&gt;&lt;/property&gt;               &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;&gt;&lt;/property&gt;               &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;&gt;&lt;/property&gt;           &lt;/dataSource&gt;       &lt;/environment&gt;   &lt;/environments&gt;</code></pre><p>优先使用外部配置文件</p><h2 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h2><p>类型别名是java类型设置一个短的名字，它只和xml配置有关，存在的意义仅在于用来减少类完全限定类名的冗余</p><h3 id="第一种方式自己配置"><a href="#第一种方式自己配置" class="headerlink" title="第一种方式自己配置"></a>第一种方式自己配置</h3><pre><code class="hljs java">&lt;!--可以给实体类起别名--&gt;    &lt;typeAliases&gt;        &lt;typeAlias type=&quot;com.mmz.pojo.User&quot; alias=&quot;User&quot;&gt;&lt;/typeAlias&gt;    &lt;/typeAliases&gt;</code></pre><h3 id="第二种指定包名"><a href="#第二种指定包名" class="headerlink" title="第二种指定包名"></a>第二种指定包名</h3><p>在每一个包中的javabean，在没有注解的情况下面，会使用Bean的首字母小写的非限定类名来作为他的别名，若有注解，为注解的值<code>@Alias（“author”）</code></p><pre><code class="hljs java">&lt;!--可以给实体类起别名--&gt; &lt;typeAliases&gt;     &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.mmz.pojo&quot;</span>/&gt; &lt;/typeAliases&gt;</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>实体类少，建议使用第一种<br>实体类多，建议使用第二种<br>第一种可以diy，第二种无法自定义<br>当然还有一些默认别名，基本类和包装类</p><h2 id="设置settings"><a href="#设置settings" class="headerlink" title="设置settings"></a>设置settings</h2><p>这是mybatis中及其重要的调整设置，他们会改变mybatis的运行时的行为</p><h2 id="映射器mappers"><a href="#映射器mappers" class="headerlink" title="映射器mappers"></a>映射器mappers</h2><p>MapperRegistry：注册绑定我们的Mapper文件</p><h3 id="第一种使用资源路径"><a href="#第一种使用资源路径" class="headerlink" title="第一种使用资源路径"></a>第一种使用资源路径</h3><pre><code class="hljs java">&lt;mappers&gt;        &lt;mapper resource=&quot;com/mmz/dao/UserMapper.xml&quot;&gt;&lt;/mapper&gt;    &lt;/mappers&gt;</code></pre><h3 id="第二种使用class文件绑定注册"><a href="#第二种使用class文件绑定注册" class="headerlink" title="第二种使用class文件绑定注册"></a>第二种使用class文件绑定注册</h3><p>注意接口和mapper配置文件必须同名，接口和配置文件必须在同一个包下面</p><h3 id="第三种使用package"><a href="#第三种使用package" class="headerlink" title="第三种使用package"></a>第三种使用package</h3><pre><code class="hljs java">&lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;com.mmz.dao&quot;</span>/&gt;</code></pre><p>使用扫描包注入的时候，与第二种一样，mapper配置文件与接口必须同名，接口和配置文件必须在同一个包下面</p><h1 id="生命周期和作用域"><a href="#生命周期和作用域" class="headerlink" title="生命周期和作用域"></a>生命周期和作用域</h1><h2 id="sqlsessionfactorybuilder"><a href="#sqlsessionfactorybuilder" class="headerlink" title="sqlsessionfactorybuilder"></a>sqlsessionfactorybuilder</h2><p>一旦创建sqlsessionfactory，就不需要他了<br>局部变量</p><h2 id="sqlsessionfactory"><a href="#sqlsessionfactory" class="headerlink" title="sqlsessionfactory"></a>sqlsessionfactory</h2><p>说白了就是数据库连接池<br>一旦被创建就应该在运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例<br>单例模式</p><h2 id="sqlsession"><a href="#sqlsession" class="headerlink" title="sqlsession"></a>sqlsession</h2><p>相当于数据库连接的一个线程请求<br>用完之后关闭，否则资源被占用</p><h1 id="ResultMap结果集"><a href="#ResultMap结果集" class="headerlink" title="ResultMap结果集"></a>ResultMap结果集</h1><p>解决属性名和字段名不统一的问题</p><p>现在我开了一个新的module，mybatis-03，把密码的pwd改成了password<br>进行查询，发现password=null<br><img src="https://img-blog.csdnimg.cn/20201227111518139.png" alt="在这里插入图片描述"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在sql中起别名<br><img src="https://img-blog.csdnimg.cn/20201227112111943.png" alt="在这里插入图片描述"></p><p>我们所谓的resultMap</p><h2 id="结果集映射resultMap"><a href="#结果集映射resultMap" class="headerlink" title="结果集映射resultMap"></a>结果集映射resultMap</h2><pre><code class="hljs java">&lt;resultMap id=<span class="hljs-string">&quot;UserMap&quot;</span> type=<span class="hljs-string">&quot;User&quot;</span>&gt;       &lt;!--colunm是数据库中的字段,property实体类中的属性--&gt;       &lt;result column=<span class="hljs-string">&quot;id&quot;</span> property=<span class="hljs-string">&quot;id&quot;</span>/&gt;       &lt;result column=<span class="hljs-string">&quot;name&quot;</span> property=<span class="hljs-string">&quot;name&quot;</span>/&gt;       &lt;result column=<span class="hljs-string">&quot;pwd&quot;</span> property=<span class="hljs-string">&quot;password&quot;</span>/&gt;   &lt;/resultMap&gt;   &lt;select id=<span class="hljs-string">&quot;getUserById&quot;</span> resultMap=<span class="hljs-string">&quot;UserMap&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;       select * from user where id = #&#123;id&#125;;   &lt;/select&gt;</code></pre><p>要在UserDao.xml中写好resultMap标签，然后在下面的sql查询中，设置返回结果为ResultMap，也就是我们定义好的id<br><img src="https://img-blog.csdnimg.cn/20201229164732222.png" alt="在这里插入图片描述"></p><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志工厂"><a href="#日志工厂" class="headerlink" title="日志工厂"></a>日志工厂</h2><p>如果一个数据库操作出现了异常，我们需要排错，日志就是最好的助手。<br>曾经：sout，debug<br>现在：日志工厂</p><p>具体使用哪个日志工厂，是mybatis可选择</p><pre><code class="hljs java">&lt;settings&gt;      &lt;setting name=<span class="hljs-string">&quot;logImpl&quot;</span> value=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;  &lt;/settings&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20201229165856398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>先导入log4j的包<br>log4ja是apache的一个开源项目，通过使用log4j，我们可以控制日志信息输送的目的是控制台，文件，gui组件<br>我们可以通过配置文件来灵活配置，不需要修改应用代码</p><h3 id="配置文件log4j-properties"><a href="#配置文件log4j-properties" class="headerlink" title="配置文件log4j.properties"></a>配置文件log4j.properties</h3><pre><code class="hljs java"># Set root category priority to INFO and its only appender to CONSOLE.#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatallog4j.rootCategory=debug, CONSOLE, LOGFILE# Set the enterprise logger category to FATAL and its only appender to CONSOLE.log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE# CONSOLE is set to be a ConsoleAppender using a PatternLayout.log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppenderlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayoutlog4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-<span class="hljs-number">6</span>r [%<span class="hljs-number">15.15</span>t] %-<span class="hljs-number">5</span>p %<span class="hljs-number">30.30</span>c %x - %m\n# LOGFILE is set to be a File appender using a PatternLayout.log4j.appender.LOGFILE=org.apache.log4j.FileAppenderlog4j.appender.LOGFILE.File=./log/mmz.loglog4j.appender.LOGFILE.Append=<span class="hljs-keyword">true</span>log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayoutlog4j.appender.LOGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; %-<span class="hljs-number">6</span>r [%<span class="hljs-number">15.15</span>t] %-<span class="hljs-number">5</span>p %<span class="hljs-number">30.30</span>c %x - %m\n</code></pre><p><img src="https://img-blog.csdnimg.cn/20201229171505746.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><p>为什么要分页？<br>减少数据的处理量</p><h2 id="使用limit分页"><a href="#使用limit分页" class="headerlink" title="使用limit分页"></a>使用limit分页</h2><p>sql中的limit分页</p><pre><code class="hljs java">select * from user limit startIndex,pageSize;</code></pre><pre><code class="hljs java">select * from user limit <span class="hljs-number">0</span>,<span class="hljs-number">2</span>;</code></pre><p><img src="https://img-blog.csdnimg.cn/20210102065137614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="使用mybatis实现分页"><a href="#使用mybatis实现分页" class="headerlink" title="使用mybatis实现分页"></a>使用mybatis实现分页</h2><p>接口</p><pre><code class="hljs java"><span class="hljs-comment">// 分页</span>   <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;</code></pre><p>配置xml文件</p><pre><code class="hljs java">&lt;!--分页实现--&gt;   &lt;select id=<span class="hljs-string">&quot;getUserByLimit&quot;</span> parameterType=<span class="hljs-string">&quot;map&quot;</span> resultMap=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;       select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;   &lt;/select&gt;</code></pre><p>测试类</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLimit</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserDao mapper = sqlsession.getMapper(UserDao.class);        HashMap&lt;String, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();        hashMap.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);        hashMap.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);        List&lt;User&gt; userByLimit = mapper.getUserByLimit(hashMap);        <span class="hljs-keyword">for</span> (User user : userByLimit) &#123;            System.out.println(user);        &#125;        sqlsession.close();    &#125;</code></pre><h1 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.dao;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Select;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserMapper</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/1/2 7:11</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;&#125;</code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="hljs java">&lt;!--绑定接口--&gt;&lt;mappers&gt;    &lt;mapper class=&quot;com.mmz.dao.UserMapper&quot;&gt;&lt;/mapper&gt;&lt;/mappers&gt;</code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.dao;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> com.mmz.utils.MybatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.log4j.Logger;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> sun.rmi.runtime.Log;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserDaoTest</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/26 16:47</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;    <span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserDao mapper = sqlsession.getMapper(UserDao.class);        User userList = mapper.getUserById(<span class="hljs-number">1</span>);        System.out.println(userList);        sqlsession.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span></span>&#123;        logger.info(<span class="hljs-string">&quot;info 进入了test&quot;</span>);        logger.debug(<span class="hljs-string">&quot;info 进入了test&quot;</span>);        logger.error(<span class="hljs-string">&quot;info 进入了test&quot;</span>);    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLimit</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserDao mapper = sqlsession.getMapper(UserDao.class);        HashMap&lt;String, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;String, Integer&gt;();        hashMap.put(<span class="hljs-string">&quot;startIndex&quot;</span>,<span class="hljs-number">0</span>);        hashMap.put(<span class="hljs-string">&quot;pageSize&quot;</span>,<span class="hljs-number">2</span>);        List&lt;User&gt; userByLimit = mapper.getUserByLimit(hashMap);        <span class="hljs-keyword">for</span> (User user : userByLimit) &#123;            System.out.println(user);        &#125;        sqlsession.close();    &#125;&#125;</code></pre><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>Resources获取加载全局配置文件<br>实例化SqlSessionBuilder构造器<br>解析配置文件流XMLConfigBuilder<br>Configuration所有的配置文件<br>SqlSessionFactory实例化<br>transaction事务管理器<br>executor执行器<br>创建sqlsession<br>实现crud<br>查看是否执行成功，可能回滚<br>执行成功，提交事务<br>关闭</p><h1 id="注解crud"><a href="#注解crud" class="headerlink" title="注解crud"></a>注解crud</h1><p>我们可以在工具类创建的时候，自动提交事务</p><h2 id="编写mapper接口"><a href="#编写mapper接口" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.dao;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UserMapper</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/1/2 7:11</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">// 方法存在多个参数，所有的参数前面必须加上@param注解</span>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-meta">@Update(&quot;update user set name =#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><h2 id="测试类测试"><a href="#测试类测试" class="headerlink" title="测试类测试"></a>测试类测试</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.usermapper;<span class="hljs-keyword">import</span> com.mmz.dao.UserMapper;<span class="hljs-keyword">import</span> com.mmz.pojo.User;<span class="hljs-keyword">import</span> com.mmz.utils.MybatisUtils;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> testUserMapper</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/1/2 7:13</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testUserMapper</span> </span>&#123;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.class);        List&lt;User&gt; users = mapper.getUsers();        <span class="hljs-keyword">for</span> (User user : users) &#123;            System.out.println(user);        &#125;        sqlsession.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testById</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.class);        User user = mapper.getUserById(<span class="hljs-number">1</span>);        System.out.println(user);        sqlsession.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.class);        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;231231&quot;</span>);        <span class="hljs-keyword">int</span> i = mapper.addUser(user);        System.out.println(i);        sqlsession.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateUser</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.class);        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;xixi&quot;</span>,<span class="hljs-string">&quot;231231&quot;</span>);        mapper.updateUser(user);        sqlsession.close();    &#125;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteUser</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlsession = MybatisUtils.getSqlsession();        UserMapper mapper = sqlsession.getMapper(UserMapper.class);        <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">5</span>);        sqlsession.close();    &#125;&#125;</code></pre><h1 id="关于-param注解"><a href="#关于-param注解" class="headerlink" title="关于@param注解"></a>关于@param注解</h1><p>基本类型的参数或者String类型，需要加上<br>引用类型不需要加<br>如果只有一个基本类型，可以忽略，但是建议大家都加上</p>]]></content>
    
    
    <categories>
      
      <category>mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Filter/Listener</title>
    <link href="/2020/12/17/Filter-Listener/"/>
    <url>/2020/12/17/Filter-Listener/</url>
    
    <content type="html"><![CDATA[<h1 id="Filter的应用场景"><a href="#Filter的应用场景" class="headerlink" title="Filter的应用场景"></a>Filter的应用场景</h1><p>在我们接受请求的时候，可能有一些请求不应该是Servlet去做的，比如中文乱码的问题，登录验证等等，应该在servlet外面有一层去过滤这段数据，这一层就是Filter</p><p><img src="https://img-blog.csdnimg.cn/20201217150039707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Filter开发步骤"><a href="#Filter开发步骤" class="headerlink" title="Filter开发步骤"></a>Filter开发步骤</h1><p>1.导包<br>2.编写过滤器 javax.servlet.*</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.filter;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> CharacterEncodingFilter</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/17 15:07</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CharacterEncodingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-comment">// 初始化</span>    <span class="hljs-comment">// web服务器启动，filter就开始初始化了，随时等过滤对象出现</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;        System.out.println(<span class="hljs-string">&quot;开始初始化&quot;</span>);    &#125;    <span class="hljs-comment">// Chain</span>    <span class="hljs-comment">/*</span><span class="hljs-comment">    * 1.过滤中的所有代码，在过滤特定请求的时候都会执行</span><span class="hljs-comment">    * 2.必须要让过滤器继续通行，</span><span class="hljs-comment">    * */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        servletResponse.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);        System.out.println(<span class="hljs-string">&quot;characterEncoding执行前...&quot;</span>);        filterChain.doFilter(servletRequest,servletResponse); <span class="hljs-comment">// 让我们的请求继续往下走，如果不写，程序到这里就被拦截停止了</span>        System.out.println(<span class="hljs-string">&quot;characterEncoding执行后...&quot;</span>);    &#125;    <span class="hljs-comment">// 销毁</span>    <span class="hljs-comment">// web服务器停止，过滤器会销毁</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;已经销毁&quot;</span>);    &#125;&#125;</code></pre><p>3.在web.xml中配置filter</p><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;web-app xmlns=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         xsi:schemaLocation=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         version=<span class="hljs-string">&quot;4.0&quot;</span>&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;ShowServlet&lt;/servlet-name&gt;        &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">ShowServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">ShowServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">servlet</span>/<span class="hljs-title">show</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">filter</span>.<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">servlet</span>/*&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class"></span><span class="hljs-class"></span><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span></code></pre><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><h2 id="实现监听器的接口"><a href="#实现监听器的接口" class="headerlink" title="实现监听器的接口"></a>实现监听器的接口</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.listener;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> OnlineCountListener</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/17 15:33</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 统计网站在线人数监听 统计session</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OnlineCountListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;    <span class="hljs-comment">// 创建session监听</span>    <span class="hljs-comment">// 一旦创建一个session，就会触发一个事件</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();        Integer onlineCount =(Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-keyword">null</span>)&#123;            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">1</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">int</span> count = onlineCount.intValue();            onlineCount = <span class="hljs-keyword">new</span> Integer(count+<span class="hljs-number">1</span>);        &#125;        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);    &#125;    <span class="hljs-comment">// 销毁session监听</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;        ServletContext servletContext = httpSessionEvent.getSession().getServletContext();        Integer onlineCount =(Integer) servletContext.getAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>);        <span class="hljs-keyword">if</span>(onlineCount == <span class="hljs-keyword">null</span>)&#123;            onlineCount = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">0</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">int</span> count = onlineCount.intValue();            onlineCount = <span class="hljs-keyword">new</span> Integer(count-<span class="hljs-number">1</span>);        &#125;        servletContext.setAttribute(<span class="hljs-string">&quot;OnlineCount&quot;</span>,onlineCount);    &#125;&#125;</code></pre><h2 id="在web-xml中配置"><a href="#在web-xml中配置" class="headerlink" title="在web.xml中配置"></a>在web.xml中配置</h2><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;web-app xmlns=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span>         xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>         xsi:schemaLocation=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>         version=<span class="hljs-string">&quot;4.0&quot;</span>&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;ShowServlet&lt;/servlet-name&gt;        &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">ShowServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">ShowServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">servlet</span>/<span class="hljs-title">show</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">filter</span>.<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">servlet</span>/*&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;!--注册一个监听器--&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">listener</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">listener</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">listener</span>.<span class="hljs-title">OnlineCountListener</span>&lt;/<span class="hljs-title">listener</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">listener</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">    &lt;<span class="hljs-title">session</span>-<span class="hljs-title">config</span>&gt;</span><span class="hljs-class">        &lt;<span class="hljs-title">session</span>-<span class="hljs-title">timeout</span>&gt;1&lt;/<span class="hljs-title">session</span>-<span class="hljs-title">timeout</span>&gt;</span><span class="hljs-class">    &lt;/<span class="hljs-title">session</span>-<span class="hljs-title">config</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span></code></pre><h1 id="过滤器，监听器常见应用"><a href="#过滤器，监听器常见应用" class="headerlink" title="过滤器，监听器常见应用"></a>过滤器，监听器常见应用</h1><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> LoginServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/17 15:56</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        System.out.println(<span class="hljs-string">&quot;我被触发了&quot;</span>);        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);        <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;admin&quot;</span>))&#123;            req.getSession().setAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>,req.getSession().getId());            resp.sendRedirect(<span class="hljs-string">&quot;/sys/success.jsp&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 登录失败</span>            resp.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h2 id="没有登录不能跳转用过滤器"><a href="#没有登录不能跳转用过滤器" class="headerlink" title="没有登录不能跳转用过滤器"></a>没有登录不能跳转用过滤器</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.filter;<span class="hljs-keyword">import</span> javax.servlet.*;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> SysFilter</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/17 16:28</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;        HttpServletRequest servletRequest1 = (HttpServletRequest) servletRequest;        HttpServletResponse servletResponse1 = (HttpServletResponse) servletResponse;        Object user_sessiOn = servletRequest1.getSession().getAttribute(<span class="hljs-string">&quot;USER_SESSION&quot;</span>);        <span class="hljs-keyword">if</span>(user_sessiOn == <span class="hljs-keyword">null</span>)&#123;            servletResponse1.sendRedirect(<span class="hljs-string">&quot;/error.jsp&quot;</span>);        &#125;        filterChain.doFilter(servletRequest,servletResponse);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>filter</category>
      
      <category>listener</category>
      
    </categories>
    
    
    <tags>
      
      <tag>filter</tag>
      
      <tag>listener</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cookie/Session</title>
    <link href="/2020/12/17/Cookie-Session/"/>
    <url>/2020/12/17/Cookie-Session/</url>
    
    <content type="html"><![CDATA[<h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><p>会话：用户打开了一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程称之为会话</p><p>有状态会话：你能证明你是你自己/一个网站怎么证明你来过</p><h2 id="那么服务器怎么知道你这个客户端上次来过？"><a href="#那么服务器怎么知道你这个客户端上次来过？" class="headerlink" title="那么服务器怎么知道你这个客户端上次来过？"></a>那么服务器怎么知道你这个客户端上次来过？</h2><p>1.服务器给客户端一个信件，客户端下次访问服务器带上信件就可以了：cookie</p><p>2.服务器登记你来过了，下次你再来的时候匹配你 session</p><h1 id="保存会话的两种技术"><a href="#保存会话的两种技术" class="headerlink" title="保存会话的两种技术"></a>保存会话的两种技术</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><p>客户端技术（通过http请求）</p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>服务器技术，利用这个技术，可以保存用户的会话信息，我们可以把信息放在session中</p><h1 id="案例：做一个用cookie存的上一次来访问的时间"><a href="#案例：做一个用cookie存的上一次来访问的时间" class="headerlink" title="案例：做一个用cookie存的上一次来访问的时间"></a>案例：做一个用cookie存的上一次来访问的时间</h1><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> CookieDemo1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/17 8:51</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*保留用户上一次访问的时间*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookieDemo1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        PrintWriter writer = resp.getWriter();        <span class="hljs-comment">// cookie,从客户端发送的请求中获取</span>        Cookie[] cookies = req.getCookies(); <span class="hljs-comment">// 这里返回数组，说明cookie可能存在多个</span>        <span class="hljs-comment">// 判断cookie是否存在</span>        <span class="hljs-keyword">if</span>(cookies != <span class="hljs-keyword">null</span>)&#123;            System.out.println(<span class="hljs-string">&quot;cookie存在&quot;</span>);            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;                <span class="hljs-keyword">if</span>(cookie.getName().equals(<span class="hljs-string">&quot;lastLoginTime&quot;</span>))&#123;                    writer.println(cookie.getValue());                    Long l =Long.parseLong(cookie.getValue());                    Date date = <span class="hljs-keyword">new</span> Date(l);                    writer.println(date.toLocaleString());                &#125;            &#125;        &#125;<span class="hljs-keyword">else</span>&#123;            System.out.println(<span class="hljs-string">&quot;cookie不存在 &quot;</span>);            writer.println(<span class="hljs-string">&quot;这是您第一次访问网站&quot;</span>);        &#125;        <span class="hljs-comment">// 服务器给客户端响应一个cookie</span>        Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;lastLoginTime&quot;</span>,System.currentTimeMillis()+<span class="hljs-string">&quot;&quot;</span>);        resp.addCookie(cookie1);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><p>当前的逻辑是判断cookie != null，但是却没有走这条逻辑，是因为除了我们设置的cookie，浏览器还会自带一些cookie</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从请求中拿到cookie的信息<br>服务器响应给客户端cookie</p><p>cookie：一般情况下，保存在本地的用户目录下 appdata</p><p>一个cookie只能保存一个信息<br>一个web站点可以给浏览器发送多个cookie，上限为300<br>每个站点最多存放20个<br>cookie大小有限制，为4KB</p><h3 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h3><p>不设置有效期，关闭浏览器，自动失效<br>设置有效期为0</p><h3 id="编码解码"><a href="#编码解码" class="headerlink" title="编码解码"></a>编码解码</h3><pre><code class="hljs java">URLEncoder.encode(<span class="hljs-string">&quot;mmz&quot;</span>,<span class="hljs-string">&quot;utf-8&quot;</span>)URLDecoder.decode(cookie.getValue(),<span class="hljs-string">&quot;utf-8&quot;</span>)</code></pre><h1 id="Session（重点）"><a href="#Session（重点）" class="headerlink" title="Session（重点）"></a>Session（重点）</h1><p>服务器会给每一个用户创建一个session<br>一个session独占一个浏览器，只要浏览器没有关闭，就一直存在<br>用户登录之后，整个网站都可以访问 保存购物车的信息</p><h2 id="session和cookie的区别"><a href="#session和cookie的区别" class="headerlink" title="session和cookie的区别"></a>session和cookie的区别</h2><p>cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）<br>session把用户的数据写到用户的独占session中，服务器端保存（保存重要的信息，减少服务器资源的浪费）<br>session对象，由服务器创建，</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>保存一个登录用户的信息<br>购物车信息<br>在整个网站中经常使用的数据，我们将它保存在session中</p><h2 id="会话自动过期"><a href="#会话自动过期" class="headerlink" title="会话自动过期"></a>会话自动过期</h2><pre><code class="hljs java">&lt;session-config&gt;    &lt;!--自动过期时间，以分钟为单位--&gt;    &lt;session-timeout&gt;1&lt;/session-timeout&gt;  &lt;/session-config&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>cookie</category>
      
      <category>session</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cookie</tag>
      
      <tag>session</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaweb中servlet的原理深入</title>
    <link href="/2020/12/16/javaweb%E4%B8%ADservlet%E7%9A%84%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5/"/>
    <url>/2020/12/16/javaweb%E4%B8%ADservlet%E7%9A%84%E5%8E%9F%E7%90%86%E6%B7%B1%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Servlet原理"><a href="#Servlet原理" class="headerlink" title="Servlet原理"></a>Servlet原理</h1><p>servlet是由web服务器调用，web服务器在收到浏览器请求之后<br><img src="https://img-blog.csdnimg.cn/20201216151433564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Mapping问题"><a href="#Mapping问题" class="headerlink" title="Mapping问题"></a>Mapping问题</h1><p>一个servlet可以指定一个/多个/通用请求路径<br>前缀和后缀都可以<br>但是*前面不能加项目映射的路径</p><h1 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h1><p>指定了mapper（固有的）映射路径，优先级最高。<br>如果找不到就会找默认的处理请求，</p><h1 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h1><p>web容器在启动的时候，它会为每一个web程序都创建一个对象的ServletContext对象，它代表了当前的web应用</p><p>共享数据：在这个servlet的数据，可以在另外一个servlet可以拿到，这个就需要servletContext来完成</p><h2 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h2><p>用来设置username的值</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> HelloServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 15:32</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();        String username = <span class="hljs-string">&quot;mmz&quot;</span>;        servletContext.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,username);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h2 id="GetServlet"><a href="#GetServlet" class="headerlink" title="GetServlet"></a>GetServlet</h2><p>用来展示</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> GetServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 15:33</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();        String usernmae = (String) servletContext.getAttribute(<span class="hljs-string">&quot;username&quot;</span>);        PrintWriter writer = resp.getWriter();        writer.println(usernmae);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h2 id="最后别忘了配置一下web-xml"><a href="#最后别忘了配置一下web-xml" class="headerlink" title="最后别忘了配置一下web.xml"></a>最后别忘了配置一下web.xml</h2><p>web.xml的配置信息</p><pre><code class="hljs java">&lt;!DOCTYPE web-app PUBLIC <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;get&lt;/servlet-name&gt;    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">GetServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">get</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">get</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span><span class="hljs-class"></span></code></pre><h2 id="还可以获取初始化参数"><a href="#还可以获取初始化参数" class="headerlink" title="还可以获取初始化参数"></a>还可以获取初始化参数</h2><p>在web.xml配置一下</p><pre><code class="hljs java">&lt;!DOCTYPE web-app PUBLIC <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;context-param&gt;    &lt;param-name&gt;url&lt;/param-name&gt;    &lt;param-value&gt;xixi&lt;/param-value&gt;  &lt;/context-param&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;get&lt;/servlet-name&gt;    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">GetServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">init</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">InitServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">get</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">get</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">init</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">init</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class"></span><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span><span class="hljs-class"></span></code></pre><p>然后再在servlet中调用</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> InitServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 15:43</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InitServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();        PrintWriter writer = resp.getWriter();        writer.println(servletContext.getInitParameter(<span class="hljs-string">&quot;url&quot;</span>));    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h2 id="实现转发"><a href="#实现转发" class="headerlink" title="实现转发"></a>实现转发</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletContext;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> FowardServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 15:51</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*实现一个转发*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FowardServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletContext servletContext = <span class="hljs-keyword">this</span>.getServletContext();        servletContext.getRequestDispatcher(<span class="hljs-string">&quot;/init&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h2 id="读取资源文件"><a href="#读取资源文件" class="headerlink" title="读取资源文件"></a>读取资源文件</h2><p>classpath类路径，就在javaweb上面的main文件夹下面的java和resource，这两个在编译build之后，在classes下面，所以被称为classpath类路径</p><p>在java目录下面新建的properties，在resource目录下面新建的properties，也就是上面说的classpath路径，我们称为这个路径为类路径</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> PropertiesServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 16:01</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        InputStream inputStream =  <span class="hljs-keyword">this</span>.getServletContext().getResourceAsStream(<span class="hljs-string">&quot;/WEB-INF/classes/user.properties&quot;</span>);        Properties properties = <span class="hljs-keyword">new</span> Properties();        properties.load(inputStream);        String name = properties.getProperty(<span class="hljs-string">&quot;name&quot;</span>);        String pwd = properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);        PrintWriter writer = resp.getWriter();        writer.println(name + <span class="hljs-string">&quot; &quot;</span>+pwd);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><p>这样就可以读取下面的资源了，properties或者yml结尾的资源。</p><h1 id="HttpServletResponse"><a href="#HttpServletResponse" class="headerlink" title="HttpServletResponse"></a>HttpServletResponse</h1><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求和HttpServletRequest对象，代表影响的response对象</p><p>如果想要客户端请求过来的参数：找HttpServletRequest<br>如果想要给客户端响应一些信息，找HttpServletResponse</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.FileInputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> FileServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 17:06</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 获取下载文件的路径</span>        String realPath =<span class="hljs-string">&quot;E:\\JavaOfKuang\\javaweb-01-servlet\\response-03\\src\\main\\resources\\touxiang.png&quot;</span>;        System.out.println(<span class="hljs-string">&quot;下载文件的路径是&quot;</span> + realPath);        <span class="hljs-comment">// 下载文件名是什么</span>        String fileName = realPath.substring(realPath.lastIndexOf(<span class="hljs-string">&quot;\\&quot;</span>) + <span class="hljs-number">1</span>);        <span class="hljs-comment">// 设置想办法能让浏览器能够支持下载我们需要的东西</span>        resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename&quot;</span>+fileName);        <span class="hljs-comment">// 获取下载文件的输入流</span>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(realPath);        <span class="hljs-comment">// 创建缓冲区</span>        <span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>;        <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];        <span class="hljs-comment">// 获取输出流的对象</span>        ServletOutputStream outputStream = resp.getOutputStream();        <span class="hljs-comment">// 将fileoutputStream放入到缓冲区,将outputStream写入到客户端</span>        <span class="hljs-keyword">while</span>((len = fileInputStream.read()) != -<span class="hljs-number">1</span>)&#123;            outputStream.write(bytes,<span class="hljs-number">0</span>,len);        &#125;        <span class="hljs-comment">// 把流关闭</span>        fileInputStream.close();        outputStream.close();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;       doGet(req, resp);    &#125;&#125;</code></pre><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.imageio.ImageIO;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.awt.*;<span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Random;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> ImageServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 17:29</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*实现动态的验证码*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        <span class="hljs-comment">// 如果让浏览器刷新一次</span>        resp.setHeader(<span class="hljs-string">&quot;refresh&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>);        <span class="hljs-comment">// 在内存中创建一个图片</span>        BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(<span class="hljs-number">80</span>,<span class="hljs-number">20</span>,BufferedImage.TYPE_INT_RGB);        <span class="hljs-comment">// 得到图片</span>        Graphics2D graphics = (Graphics2D) image.getGraphics(); <span class="hljs-comment">// 笔</span>        <span class="hljs-comment">// 设置图片的背景颜色</span>        graphics.setColor(Color.white);        graphics.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">20</span>);        <span class="hljs-comment">//给图片写数据</span>        graphics.setColor(Color.blue);        graphics.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-keyword">null</span>,Font.BOLD,<span class="hljs-number">20</span>));        graphics.drawString(makeNum(),<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);        System.out.println(makeNum());        <span class="hljs-comment">// 告诉浏览器，这个请求用图片的方式打开</span>        resp.setContentType(<span class="hljs-string">&quot;image/jpeg&quot;</span>);        <span class="hljs-comment">// 网站存在缓存，不让浏览器设置缓存</span>        resp.setDateHeader(<span class="hljs-string">&quot;expires&quot;</span>,-<span class="hljs-number">1</span>);        resp.setHeader(<span class="hljs-string">&quot;Cache-Control&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);        resp.setHeader(<span class="hljs-string">&quot;Pragma&quot;</span>,<span class="hljs-string">&quot;no-cache&quot;</span>);        <span class="hljs-comment">// 把图片给浏览器</span>        ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, resp.getOutputStream());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">makeNum</span><span class="hljs-params">()</span></span>&#123;        Random random = <span class="hljs-keyword">new</span> Random();        String num = random.nextInt(<span class="hljs-number">99999999</span>)+<span class="hljs-string">&quot;&quot;</span>;        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt;<span class="hljs-number">7</span> - num.length();++i)&#123;            stringBuffer.append(<span class="hljs-string">&quot;0&quot;</span>);        &#125;        num = stringBuffer.toString()+num;        <span class="hljs-keyword">return</span> num;    &#125;&#125;</code></pre><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>一个web资源受到客户端请求后，他会通知客户端去访问另一个web资源，这个过程叫做重定向</p><p>常见场景：<br>用户登录</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> RedirectServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 20:15</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        resp.sendRedirect(<span class="hljs-string">&quot;/r/image&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h1 id="重定向与转发"><a href="#重定向与转发" class="headerlink" title="重定向与转发"></a>重定向与转发</h1><p>相同点：页面都会实现跳转<br>不同点：请求转发的时候，url不会产生变化 307<br>重定向的时候，url地址栏会发生变化 302</p><p>转发是当前项目目录下面的，重定向不是，需要你再前面加上项目目录</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> LoginServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 20:57</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);        String[] hobbies = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);        System.out.println(username);        System.out.println(password);        System.out.println(Arrays.toString(hobbies));        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);        <span class="hljs-comment">// 这里的/代表当前的web应用</span>        req.getRequestDispatcher(<span class="hljs-string">&quot;/success.jsp&quot;</span>).forward(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>javaweb</tag>
      
      <tag>servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新建一个原始javaweb项目</title>
    <link href="/2020/12/16/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%A7%8Bjavaweb%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/12/16/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%A7%8Bjavaweb%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="创建一个空的maven项目"><a href="#创建一个空的maven项目" class="headerlink" title="创建一个空的maven项目"></a>创建一个空的maven项目</h1><p>构建一个普通的maven项目，删除里面的src目录，以后的学习就在这个项目里面创建moudel，这个空的工程就是maven的主工程。</p><p>我们尽量把所有的依赖都导入这个主工程里面，避免重复导入</p><p><img src="https://img-blog.csdnimg.cn/20201215124933119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h1><p><a href="https://mvnrepository.com/">maven仓库的网址</a><br>在上面搜索你想要的依赖包<br>然后添加到我们的dependencies的标签下面即可</p><h1 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h1><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel，这个空的工程就是Maven主工程</p><p>在父工程里面有一个</p><pre><code class="hljs java">&lt;modules&gt;        &lt;module&gt;servlet-01&lt;/module&gt;&lt;/modules&gt;</code></pre><p>子项目有一个parent</p><pre><code class="hljs java">&lt;parent&gt;       &lt;artifactId&gt;javaweb-01-servlet&lt;/artifactId&gt;       &lt;groupId&gt;com.mmz&lt;/groupId&gt;       &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;   &lt;/parent&gt;</code></pre><p>关于Maven父子工程的理解：父项目的jar包，子项目可以直接使用</p><p>再在子项目中创建java和resource</p><h1 id="编写servlet"><a href="#编写servlet" class="headerlink" title="编写servlet"></a>编写servlet</h1><p>1）编写一个普通类<br>2）实现servlet接口<br>servlet接口有两个默认的实现类，我们直接使用HttpServlet，GenericServlet</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mmz.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.ServletOutputStream;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> HelloServlet</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/16 14:51</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        ServletOutputStream outputStream = resp.getOutputStream();        PrintWriter writer = resp.getWriter();        writer.println(<span class="hljs-string">&quot;hello servlet&quot;</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;        doGet(req, resp);    &#125;&#125;</code></pre><h1 id="编写servlet的映射"><a href="#编写servlet的映射" class="headerlink" title="编写servlet的映射"></a>编写servlet的映射</h1><p>为什么需要映射？<br>写的是java程序，但是要通过浏览器访问，浏览器需要连接web服务器，所以我们需要在web服务器中注册servlet，还需要给他一个浏览器能访问的路径</p><pre><code class="hljs java">&lt;!DOCTYPE web-app PUBLIC <span class="hljs-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;    &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">com</span>.<span class="hljs-title">mmz</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">HelloServlet</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>&gt;</span><span class="hljs-class">  &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">name</span>&gt;</span><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/<span class="hljs-title">hello</span>&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">mapping</span>&gt;</span><span class="hljs-class">&lt;/<span class="hljs-title">web</span>-<span class="hljs-title">app</span>&gt;</span><span class="hljs-class"></span></code></pre><h1 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h1><p>注意:配置项目发布的路径</p><h1 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h1>]]></content>
    
    
    <categories>
      
      <category>javaweb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java内存分析与反射</title>
    <link href="/2020/12/10/java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/12/10/java%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><p>java内存分为程序计数器，堆，本地方法栈，虚拟机方法栈，方法区</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>存放所有new的对象和数组<br>可以被所有的线程共享，不会存放别的对象引用</p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>存放基本变量类型（会包含这个基本类型的具体数值）<br>引用对象的变量（会存放这个引用在堆里面的具体地址）</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>可以被所有的线程共享<br>包含了所有的class和static变量</p><h1 id="了解类的加载过程"><a href="#了解类的加载过程" class="headerlink" title="了解类的加载过程"></a>了解类的加载过程</h1><p>当程序主要使用某个类的时候，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对类进行初始化</p><h2 id="类的加载load"><a href="#类的加载load" class="headerlink" title="类的加载load"></a>类的加载load</h2><p>将类的class文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成</p><h2 id="类的链接"><a href="#类的链接" class="headerlink" title="类的链接"></a>类的链接</h2><p>将类的二进制数据合并到JRE中</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>确保加载类信息符合jvm规范，没有安全方面的问题</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>正式为变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中分配</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</p><h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><p>JVM负责对类进行初始化连接</p><p>执行类构造器<code>&lt;clinit&gt;()</code>方法的过程，类构造器方法是由编译期自动收集类中所有类变量的赋值动作和静态代码语句块中的语句合并的产生的。</p><p>当初始化一个类的时候，如果发现一个父类还没有被初始化，则需要先触发父类的初始化</p><p>虚拟机会保证一个类的clinit方法在多线程环境中正确加锁和同步</p><h1 id="加载过程代码"><a href="#加载过程代码" class="headerlink" title="加载过程代码"></a>加载过程代码</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestClassLoad</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 14:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClassLoad</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        A a = <span class="hljs-keyword">new</span> A();        System.out.println(A.m);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">static</span> &#123;        System.out.println(<span class="hljs-string">&quot;A类静态代码块初始化&quot;</span>);        m = <span class="hljs-number">300</span>;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">100</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;A类的无参构造初始化&quot;</span>);    &#125;&#125;</code></pre><h1 id="类什么会初始化"><a href="#类什么会初始化" class="headerlink" title="类什么会初始化"></a>类什么会初始化</h1><h2 id="类的主动引用（一定会发生类的初始化）"><a href="#类的主动引用（一定会发生类的初始化）" class="headerlink" title="类的主动引用（一定会发生类的初始化）"></a>类的主动引用（一定会发生类的初始化）</h2><p>当虚拟机启动后，先初始化main方法所在的类<br>new一个类的对象<br>调用类的静态成员和静态方法<br>使用java.lang.reflect包的方法对类进行反射调用<br>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</p><h2 id="类的被动引用（不会发生类的初始化）"><a href="#类的被动引用（不会发生类的初始化）" class="headerlink" title="类的被动引用（不会发生类的初始化）"></a>类的被动引用（不会发生类的初始化）</h2><p>当访问一个静态域，只有真正声明这个域的类才会被初始化<br>通过数组定义类引用，不会触发此类的初始化<br>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池了）</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestClassInit</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 15:00</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClassInit</span> </span>&#123;    <span class="hljs-keyword">static</span> &#123;        System.out.println(<span class="hljs-string">&quot;main类被加载&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<span class="hljs-comment">//        // 主动引用</span><span class="hljs-comment">//        Son son = new Son();</span><span class="hljs-comment">//</span><span class="hljs-comment">//        // 反射 也是主动引用</span><span class="hljs-comment">//        Class.forName(&quot;Son&quot;);</span><span class="hljs-comment">//        // 不会产生类的引用的方法</span><span class="hljs-comment">//        System.out.println(Son.b);</span><span class="hljs-comment">//        Son[] array = new Son[10];</span>        System.out.println(Son.M);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Father</span></span>&#123;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;    <span class="hljs-keyword">static</span> &#123;        System.out.println(<span class="hljs-string">&quot;父类被加载&quot;</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Father</span></span>&#123;    <span class="hljs-keyword">static</span> &#123;        System.out.println(<span class="hljs-string">&quot;子类被加载&quot;</span>);    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m = <span class="hljs-number">300</span>;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> M = <span class="hljs-number">1</span>;&#125;</code></pre><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><h2 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h2><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据访问的入口</p><h2 id="类缓存"><a href="#类缓存" class="headerlink" title="类缓存"></a>类缓存</h2><p>标准的javase类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间不，不过JVM垃圾回收机制可以回收这些Class对象</p><h2 id="类加载器类型"><a href="#类加载器类型" class="headerlink" title="类加载器类型"></a>类加载器类型</h2><h3 id="引导类加载器-Bootstap-ClassLoader"><a href="#引导类加载器-Bootstap-ClassLoader" class="headerlink" title="引导类加载器 Bootstap ClassLoader"></a>引导类加载器 Bootstap ClassLoader</h3><p>用C++编写的，是JVM自带的类加载器，负责java平台核心库，用来装载核心类库，该加载器无法直接获取</p><p>就是在rt.jar包里面的类</p><h3 id="拓展类加载器-Extension-ClassLoader"><a href="#拓展类加载器-Extension-ClassLoader" class="headerlink" title="拓展类加载器 Extension ClassLoader"></a>拓展类加载器 Extension ClassLoader</h3><p>负责jre/lib/ext 目录下的jar包或者-D java.ext.dirs目录下的jar包装入工作</p><h3 id="系统类加载器-System-ClassLoader"><a href="#系统类加载器-System-ClassLoader" class="headerlink" title="系统类加载器 System ClassLoader"></a>系统类加载器 System ClassLoader</h3><p>负责java -classpath 或者java.class.path所指目录下面的类和jar包装入工作，是最常用的加载器</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestClassLoader</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/10 1:11</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestClassLoader</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;        <span class="hljs-comment">// 系统类加载器</span>        ClassLoader classLoader =  ClassLoader.getSystemClassLoader();        System.out.println(classLoader);        <span class="hljs-comment">// 获取拓展类加载器</span>        ClassLoader parent = classLoader.getParent();        System.out.println(parent);        <span class="hljs-comment">// 获取根类加载器</span>        ClassLoader parent1 = parent.getParent();        System.out.println(parent1);        <span class="hljs-comment">// 测试当前的类是谁加载的</span>        ClassLoader testClassLoader = Class.forName(<span class="hljs-string">&quot;TestClassLoader&quot;</span>).getClassLoader();        System.out.println(testClassLoader);        <span class="hljs-comment">// 测试jdk内置的类是谁加载的</span>        testClassLoader = Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();        System.out.println(testClassLoader);        <span class="hljs-comment">// 得到系统类加载器可以加载的路径</span>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));    &#125;&#125;</code></pre><h1 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h1><p>通过反射可以获得运行时类的完整结构<br>Field,Method,Constructor,Superclass,Interface,Annotation</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestInfoClass</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/10 1:21</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*获取类的信息*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestInfoClass</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException </span>&#123;        Class user = Class.forName(<span class="hljs-string">&quot;User&quot;</span>);        User users = <span class="hljs-keyword">new</span> User();        <span class="hljs-comment">// 获得类的名字</span>        System.out.println(user.getName()); <span class="hljs-comment">// 可以得到包名</span>        <span class="hljs-comment">// 获得类的简单名字</span>        System.out.println(user.getSimpleName());        <span class="hljs-comment">// 获得类的属性</span>        Field[] fields = user.getFields(); <span class="hljs-comment">// 只能找到public属性</span>        <span class="hljs-keyword">for</span> (Field field : fields) &#123;            System.out.println(field);        &#125;        fields = user.getDeclaredFields();        <span class="hljs-keyword">for</span> (Field field : fields) &#123;            System.out.println(field);        &#125;        System.out.println(<span class="hljs-string">&quot;-----&quot;</span>);        <span class="hljs-comment">// 获得指定的名字</span>        System.out.println(user.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>));        <span class="hljs-comment">// 获得类的方法，以及父类的所有方法</span>        Method[] methods = user.getMethods();        <span class="hljs-keyword">for</span> (Method method : methods) &#123;            System.out.println(<span class="hljs-string">&quot;正常的&quot;</span>+method);        &#125;        <span class="hljs-comment">// 只获得本类的方法</span>        methods = user.getDeclaredMethods();        <span class="hljs-keyword">for</span> (Method method : methods) &#123;            System.out.println(<span class="hljs-string">&quot;私有的&quot;</span>+method);        &#125;        <span class="hljs-comment">// 获得指定方法</span>        System.out.println(user.getMethod(<span class="hljs-string">&quot;getName&quot;</span>, <span class="hljs-keyword">null</span>));        System.out.println(user.getMethod(<span class="hljs-string">&quot;setName&quot;</span>, String.class));        <span class="hljs-comment">// 获得指定的构造器</span>        Constructor[] declaredConstructors = user.getDeclaredConstructors();        <span class="hljs-keyword">for</span> (Constructor declaredConstructor : declaredConstructors) &#123;            System.out.println(declaredConstructor);        &#125;    &#125;&#125;</code></pre><h1 id="有了class对象我们能做些什么"><a href="#有了class对象我们能做些什么" class="headerlink" title="有了class对象我们能做些什么"></a>有了class对象我们能做些什么</h1><p>创建类的对象，调用Class对象的newInstance方法<br>必须满足两点<br>1）类必须有一个无参的构造器<br>2）类的构造器的访问权限必须足够</p><h2 id="调用指定的方法"><a href="#调用指定的方法" class="headerlink" title="调用指定的方法"></a>调用指定的方法</h2><p>通过Class类的getMethod方法，获取一个method对象，并设置此方法需要操作时的所需要的参数类型</p><p>之后使用object invoke（Object obj，Object[] args）进行调用，向方法中传递obj对象的参数信息</p><h2 id="setAccessible"><a href="#setAccessible" class="headerlink" title="setAccessible"></a>setAccessible</h2><p>Method和Field，Constructor对象都有setAccessible方法<br>setAccessible作用是启动和禁用访问安全检查的开关<br>参数值为true，j取消ava语言访问检查</p><h1 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h1><p> java采用泛型擦除的机制来引入泛型，java中的泛型仅仅是给编译器和javac使用的，确保数据的安全性和免去强制类型转换的问题，但是，一旦编译完成，所有和泛型相关的类型全部擦除。</p><p>为了通过反射操作这些类型，java新增了几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类</p><p><img src="https://img-blog.csdnimg.cn/20201210020253742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;<span class="hljs-keyword">import</span> java.lang.reflect.Type;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestGetFanxing</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/10 2:03</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*通过反射获取泛型*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestGetFanxing</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test01</span><span class="hljs-params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;test01&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,User&gt; <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">&quot;test02&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException </span>&#123;        Method method = TestGetFanxing.class.getDeclaredMethod(<span class="hljs-string">&quot;test01&quot;</span>, Map.class, List.class);        Type[] genericParameterTypes = method.getGenericParameterTypes();        <span class="hljs-keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;            System.out.println(genericParameterType);            <span class="hljs-keyword">if</span>(genericParameterType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();                <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;                    System.out.println(actualTypeArgument);                &#125;            &#125;        &#125;        method = TestGetFanxing.class.getDeclaredMethod(<span class="hljs-string">&quot;test02&quot;</span>,<span class="hljs-keyword">null</span>);        Type genericReturnType = method.getGenericReturnType();        <span class="hljs-keyword">if</span>(genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType)&#123;            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();            <span class="hljs-keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;                System.out.println(actualTypeArgument);            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="获取注解信息"><a href="#获取注解信息" class="headerlink" title="获取注解信息"></a>获取注解信息</h1><p>getAnnotation</p><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><p>object relationship Mapping 对象关系映射</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.*;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestAnnotation</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/10 2:12</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*反射操作注解*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotation</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;        Class c1 = Class.forName(<span class="hljs-string">&quot;Student2&quot;</span>);        Annotation[] annotations = c1.getAnnotations();        <span class="hljs-keyword">for</span> (Annotation annotation : annotations) &#123;            System.out.println(annotation);        &#125;        <span class="hljs-comment">// 获取注解value的值</span>        Mmz mmz  =(Mmz)c1.getDeclaredAnnotation(Mmz.class);        String value = mmz.value();        System.out.println(value);        <span class="hljs-comment">// 获得类指定的注解</span>        Field name = c1.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);        Fieldmmz annotation = name.getAnnotation(Fieldmmz.class);        System.out.println(annotation.columnName());        System.out.println(annotation.length());        System.out.println(annotation.type());    &#125;&#125;<span class="hljs-meta">@Mmz(&quot;db_student&quot;)</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student2</span></span>&#123;    <span class="hljs-meta">@Fieldmmz(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id ;    <span class="hljs-meta">@Fieldmmz(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-meta">@Fieldmmz(columnName = &quot;db_name&quot;,type = &quot;varchar&quot;,length = 3)</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.age = age;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student2&#123;&quot;</span> +                <span class="hljs-string">&quot;id=&quot;</span> + id +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;<span class="hljs-comment">// 类名的注解</span><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@interface</span> Mmz&#123;    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">// 属性的注解</span><span class="hljs-meta">@Target(ElementType.FIELD)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@interface</span> Fieldmmz&#123;    <span class="hljs-function">String <span class="hljs-title">columnName</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">String <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反射</title>
    <link href="/2020/12/09/java%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/12/09/java%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="静态与动态"><a href="#静态与动态" class="headerlink" title="静态与动态"></a>静态与动态</h1><p>动态语言 java c c++<br>静态语言 python javascript</p><p>就看是否能在运行的时候，是否可以改变其结构</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>反射，是java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并且能直接操作任意对象的内部属性及方法。</p><p>加载完一个类之后，在堆内存的方法区就产生了一个Class类型的对象（一个类只能有一个Class对象），这个对象完整的包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过这个镜子我们就可以看到类的结构，所以我们形象的称之为反射</p><h1 id="提供的功能应用"><a href="#提供的功能应用" class="headerlink" title="提供的功能应用"></a>提供的功能应用</h1><p>在运行时判断任意一个对象所属的类<br>在运行时构造任意一个类的对象<br>在运行时判断任意一个类所具有的成员变量和方法<br>在运行时获取泛型信息<br>在运行时调用任意一个对象的成员变量和方法<br>在运行时处理注解<br>生成动态代理</p><h1 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>可以实现动态创建对象和编译，体现出很大的灵活性</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对性能有影响，使用反射基本上是一种解释操作，我们可以告诉jvm，我们希望做什么并且满足它的要求，这类操作总是慢于直接执行相同的操作。</p><h1 id="反射主要相关的API"><a href="#反射主要相关的API" class="headerlink" title="反射主要相关的API"></a>反射主要相关的API</h1><p>java.lang.Class 类<br>java.lang.reflect.Method 类的方法<br>java.lang.reflect.Field 类的成员变量<br>java.lang.reflect.Constructor 类的构造器</p><h1 id="获取反射对象"><a href="#获取反射对象" class="headerlink" title="获取反射对象"></a>获取反射对象</h1><p>一个类只有一个class对象</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestReflection</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 10:57</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestReflection</span> </span>&#123;    <span class="hljs-comment">// 反射获取类的class对象</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;        Class user = Class.forName(<span class="hljs-string">&quot;User&quot;</span>);        System.out.println(user);        Class user1 = Class.forName(<span class="hljs-string">&quot;User&quot;</span>);        Class user2 = Class.forName(<span class="hljs-string">&quot;User&quot;</span>);        System.out.println(user1 == user2);    &#125;&#125;<span class="hljs-comment">// 实体类 pojo Entity</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&quot;, id=&quot;</span> + id +                <span class="hljs-string">&quot;, age=&quot;</span> + age +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre><p>因为最后结果返回的是，user1 == user2 为true</p><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>对象照镜子的最后可以得到的信息：某个类的属性，方法和构造器，某个类到底实现了哪些接口。<br>对于每个类而言，JRE都为其保留一个不变的Class类型的对象，一个Class对象包含了特定某个结构的有关信息</p><p>class本身也是一个类<br>class对象只能由系统创建对象<br>一个加载的类在jvm中只会有一个class实例<br>一个class对象对应是一个加载到jvmz红的一个.class文件<br>每个类的实例都会记得自己是由哪个Class实例所生成<br>通过Class可以完整地得到一个类中所有的被加载的结构<br>Class类是Reflection的根源，针对于任何你想动态加载，运行的类，唯有先获得相应的Class对象</p><h1 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h1><p><img src="https://img-blog.csdnimg.cn/20201209140524326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="获取class类的实例"><a href="#获取class类的实例" class="headerlink" title="获取class类的实例"></a>获取class类的实例</h1><p>1）若已经知道具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</p><pre><code class="hljs java">Class <span class="hljs-class"><span class="hljs-keyword">class</span> </span>= Person.class</code></pre><p>2）已知某个类的实例，调用该实例的getClass（）方法获取class对象</p><pre><code class="hljs java">Class <span class="hljs-class"><span class="hljs-keyword">class</span> </span>= person.getClass()</code></pre><p>3）已知一个类的全类名，且该类在类路径下面，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><pre><code class="hljs java">Class <span class="hljs-class"><span class="hljs-keyword">class</span> </span>= CLass.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>)</code></pre><p>4）内置基本数据类型可以直接用类名.Type<br>5）还可以利用ClassLoader</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestCreate</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 14:19</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*测试class类的创建方式有几种*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCreate</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;        Person person = <span class="hljs-keyword">new</span> Student();        System.out.println(<span class="hljs-string">&quot;这个人是&quot;</span> + person.name);        <span class="hljs-comment">// 方式一:通过对象获得</span>        Class c1 = person.getClass();        System.out.println(c1.hashCode());        <span class="hljs-comment">// 方式二:通过forName获得</span>        Class c2 = Class.forName(<span class="hljs-string">&quot;Student&quot;</span>);        System.out.println(c2.hashCode());        <span class="hljs-comment">// 方式三:通过类获得</span>        Class c3 = Student.class;        System.out.println(c3.hashCode());        <span class="hljs-comment">// 方式四:基本内置类型的包装类都有一个Type属性</span>        Class&lt;Integer&gt; c4 = Integer.TYPE;        System.out.println(c4);        <span class="hljs-comment">// 获得父类类型</span>        Class c5 = c1.getSuperclass();        System.out.println(c5);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;    String name;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span></span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;学生&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Teacher</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">&quot;老师&quot;</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java注解</title>
    <link href="/2020/12/09/java%E6%B3%A8%E8%A7%A3/"/>
    <url>/2020/12/09/java%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h1><p>Annotation是jdk5.0开始引入的新技术</p><p>Annotation的作用：要记住他并不是程序本身，但是可以对程序进行解释，并且可以被其他程序读取</p><p>Annotation的格式：注解是以”@注释名”在代码中存在的，还可以添加一些参数值</p><p>Annotation在哪里使用？可以附加在package，class，method,field上面，相当于给他们额外的辅助信息。我们可以通过反射机制编程实现对这些元数据的访问。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestAnnotation1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 9:41</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*注解是什么*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestAnnotation1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span>&#123;    <span class="hljs-comment">// 重写的注解</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.toString();    &#125;&#125;</code></pre><p>这里面我们重写了Object的toString方法，上面<code>@Override</code>就是一个注解。</p><p>在比如我们昨天创建一个线程中，用Runnable接口初始化的源码中。</p><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span><span class="hljs-comment">     * to create a thread, starting the thread causes the object&#x27;s</span><span class="hljs-comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span><span class="hljs-comment">     * thread.</span><span class="hljs-comment">     * &lt;p&gt;</span><span class="hljs-comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span><span class="hljs-comment">     * take any action whatsoever.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@see</span>     java.lang.Thread#run()</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>其中<code>@FunctionalInterface</code>也是一段注解，声明他是函数式接口，所以我们可以用lambda表达式进行编码。</p><h1 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h1><p>上面我们提及到的<code>@Override</code>，定义在java.lang.Override中，此注释只适用于修辞方法， 表示一个方法声明打算重写超类中的另一个方法声明。</p><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span>  已过时的</code></pre><p>定义在java.lang.Deprecated中，此注释可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通畅是因为它很危险或者存在更好的选择。</p><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span> <span class="hljs-comment">// 不推荐使用</span>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;       System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);   &#125;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;       test();   &#125;</code></pre><h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>元注解就是负责注解其他注解的注解，java定了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作为说明<br>这些类型和他们所支持的类在java.lang.annotation包中可以找到</p><pre><code class="hljs java"><span class="hljs-meta">@Target</span> 用于描述注解的使用范围<span class="hljs-meta">@Retention</span> 表示需要在什么级别保存该注释的信息，用于描述注解的生命周期级别有三 SOURCE&lt;CLASS&lt;RUNTIME<span class="hljs-meta">@Documented</span> 说明该注解将被包含在javadoc中<span class="hljs-meta">@Inherited</span> 说明子类可以继承父类的注解</code></pre><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<span class="hljs-keyword">import</span> java.lang.annotation.Retention;<span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestElementAnnotation</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 10:03</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*元注解的学习*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestElementAnnotation</span> </span>&#123;    <span class="hljs-meta">@MyAnnotation</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    &#125;&#125;<span class="hljs-comment">// 定义一个注解</span><span class="hljs-meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span>  <span class="hljs-comment">// 表示这个注解可以在哪个目标位置使用</span><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span> <span class="hljs-comment">// 表示我们的注解在哪里有效</span><span class="hljs-meta">@interface</span> MyAnnotation&#123;&#125;</code></pre><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>使用<code>@interface</code>自定义注解时，自动继承了java.lang.annotation.Annotation接口</p><pre><code class="hljs java"><span class="hljs-meta">@interface</span></code></pre><p>用来声明一个注解，格式</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> 注解名｛定义内容｝</code></pre><p>其中的每一个方法实际上是声明了一个配置参数<br>方法的名称就是参数的名称<br>返回值类型就是参数的类型，而且返回值类型只能是基本类型，Class，String，enum<br>可以通过default来声明参数的默认值<br>如果只有一个参数成员，一般参数名为value<br>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<span class="hljs-keyword">import</span> java.lang.annotation.Retention;<span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestDefineAnnotation</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/9 9:56</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*自定义注解*/</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDefineAnnotation</span> </span>&#123;    <span class="hljs-comment">// 注解可以显示赋值，如果没有默认值，我们就必须给注解进行赋值</span>    <span class="hljs-meta">@MyAnnotation2(name = &quot;mmz&quot;,schools = &quot;JLU&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    &#125;    <span class="hljs-meta">@MyAnnotation3(&quot;xixi&quot;)</span> <span class="hljs-comment">// 如果注解只有一个值，那么可以省略value赋值，直接写上值就可以了。</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;    &#125;&#125;<span class="hljs-meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@interface</span> MyAnnotation2&#123;    <span class="hljs-comment">// 注解的参数:参数类型:参数名+()</span>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 0</span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>; <span class="hljs-comment">// 如果默认值为-1，代表不存在</span>    String[] schools();&#125;<span class="hljs-meta">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@interface</span> MyAnnotation3&#123;    String[] value();&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java多线程之线程协作</title>
    <link href="/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/"/>
    <url>/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="生产者和消费者"><a href="#生产者和消费者" class="headerlink" title="生产者和消费者"></a>生产者和消费者</h1><p>就是有一个中间的仓库，生产者生产商品放入仓库，消费者从仓库取走产品进行消费</p><p>没有产品的话，消费者暂停，生产者不断的生产<br>仓库的商品满了的花，生产者暂停，消费者不断的消费</p><h2 id="java提供的解决线程之间通信的方法"><a href="#java提供的解决线程之间通信的方法" class="headerlink" title="java提供的解决线程之间通信的方法"></a>java提供的解决线程之间通信的方法</h2><p>wait（） 表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁的资源</p><p>notify（）唤醒一个处于等待的线程<br>notifyAll（） 唤醒同一个对象上所有调用wait（）方法的线程，优先级别高的线程优先进行调度</p><h1 id="管程法解决问题"><a href="#管程法解决问题" class="headerlink" title="管程法解决问题"></a>管程法解决问题</h1><pre><code class="hljs csharp">package consumerandproductor;import javax.xml.soap.Node;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestPc</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 17:22</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*利用管程的方法，解决消费者和生产者</span><span class="hljs-comment">* 生产者，消费者，仓库，缓冲区</span><span class="hljs-comment">* */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestPc</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        Container container = <span class="hljs-keyword">new</span> Container();        <span class="hljs-keyword">new</span> Productor(container).start();        <span class="hljs-keyword">new</span> Consumer(container).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Productor</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    Container container;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Productor</span>(<span class="hljs-params">Container container</span>)</span>&#123;        <span class="hljs-keyword">this</span>.container = container;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            container.push(<span class="hljs-keyword">new</span> Product(i));            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;生产了&quot;</span>+i+<span class="hljs-string">&quot;只鸡&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    Container container;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">Container container</span>)</span>&#123;        <span class="hljs-keyword">this</span>.container = container;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;消费了&quot;</span>+container.pop().id+<span class="hljs-string">&quot;只鸡&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Product</span>&#123;    <span class="hljs-keyword">int</span> id;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Product</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> id</span>)</span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Container</span>&#123;    <span class="hljs-keyword">private</span> Product[] products =<span class="hljs-keyword">new</span> Product[<span class="hljs-number">10</span>];    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;    <span class="hljs-comment">// 生产者生产</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">push</span>(<span class="hljs-params">Product product</span>)</span>&#123;        <span class="hljs-keyword">if</span>(size == products.length)&#123;            <span class="hljs-comment">// 通知消费者消费，生产者等待</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">this</span>.wait();            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        products[size] = product;        size++;        <span class="hljs-keyword">this</span>.notify();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized Product <span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>)&#123;            <span class="hljs-comment">// 等待生产者生产</span>            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">this</span>.wait();            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        size--;        Product product = products[size];        <span class="hljs-keyword">this</span>.notify();        <span class="hljs-keyword">return</span> product;    &#125;&#125;</code></pre><h1 id="信号量法"><a href="#信号量法" class="headerlink" title="信号量法"></a>信号量法</h1><pre><code class="hljs csharp">package consumerandproductor;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestPc2</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 17:37</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*利用信号灯法，来解决生产者消费者的问题，利用标志位*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestPc2</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        TV tv = <span class="hljs-keyword">new</span> TV();        <span class="hljs-keyword">new</span> Actor(tv).start();        <span class="hljs-keyword">new</span> Watcher(tv).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Actor</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    TV tv;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Actor</span>(<span class="hljs-params">TV tv</span>)</span>&#123;        <span class="hljs-keyword">this</span>.tv = tv;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;快乐大本营播放中&quot;</span>);            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">this</span>.tv.play(<span class="hljs-string">&quot;抖音记录美好生活&quot;</span>);            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Watcher</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    TV tv;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Watcher</span>(<span class="hljs-params">TV tv</span>)</span>&#123;        <span class="hljs-keyword">this</span>.tv = tv;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;            tv.watch();        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">TV</span>&#123;    <span class="hljs-comment">// 演员表演，观众等待</span>    String voice;    boolean flag = <span class="hljs-literal">true</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">play</span>(<span class="hljs-params">String voice</span>)</span>&#123;        <span class="hljs-keyword">if</span>(!flag)&#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">this</span>.wait();            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;演员表演了&quot;</span>+ voice);        <span class="hljs-keyword">this</span>.notifyAll();        <span class="hljs-keyword">this</span>.voice = voice;        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">watch</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(flag)&#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">this</span>.wait();            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;观看了&quot;</span>+voice);        <span class="hljs-keyword">this</span>.notifyAll();        <span class="hljs-keyword">this</span>.flag = !<span class="hljs-keyword">this</span>.flag;    &#125;&#125;</code></pre><h1 id="线程池法"><a href="#线程池法" class="headerlink" title="线程池法"></a>线程池法</h1><p>经常创建和销毁，使用量特别大的资源，比如并发情况下的线程，对性能影响很大。<br>提前创建多个线程，放入线程池中，使用时直接获取，使用完返回池中<br>可以避免频繁创建销毁，实现重复利用，类似生活中的公共交通工具</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>提高了响应速度（减少了创建新线程的时间）<br>降低资源消耗（重复利用线程池中的线程，不需要每次都进行创建）<br>便于线程进行管理</p><h2 id="jdk5-0提供了线程池相关的API-ExecutorService和Executors"><a href="#jdk5-0提供了线程池相关的API-ExecutorService和Executors" class="headerlink" title="jdk5.0提供了线程池相关的API ExecutorService和Executors"></a>jdk5.0提供了线程池相关的API ExecutorService和Executors</h2><h3 id="ExecutorService：真正的线程池接口"><a href="#ExecutorService：真正的线程池接口" class="headerlink" title="ExecutorService：真正的线程池接口"></a>ExecutorService：真正的线程池接口</h3><p>常见的子类是ThreadPoolExecutor</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">execute</span>(<span class="hljs-params">Runnable command</span>):执行任务/命令，没有返回值，一般用来执行Runnable</span><span class="hljs-function">&lt;T&gt;Future&lt;T&gt; <span class="hljs-title">submit</span>(<span class="hljs-params">Callalbe&lt;T&gt; task</span>): 执行任务，有返回值，一般用来执行callable</span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shutdown</span>(<span class="hljs-params"></span>):关闭连接池</span></code></pre><h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p>工具类，线程池的工厂类，用于创建不同类型的线程池</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs csharp">​```javapackage pool;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestPool</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 17:59</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*线程池*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestPool</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        <span class="hljs-comment">// 创建服务，创建线程池</span>        ExecutorService service = Executors.newFixedThreadPool(<span class="hljs-number">10</span>);        <span class="hljs-comment">// 执行</span>        service.execute(<span class="hljs-keyword">new</span> MyThread());        service.execute(<span class="hljs-keyword">new</span> MyThread());        service.execute(<span class="hljs-keyword">new</span> MyThread());        service.execute(<span class="hljs-keyword">new</span> MyThread());        <span class="hljs-comment">// 关闭连接</span>        service.shutdown();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName());    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java多线程之线程同步</title>
    <link href="/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
    <url>/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>并发，同一个对象被多线程同时操作</p><p>现实生活中，我们会遇到同一个资源，很多人都想使用的问题，比如：食堂排队打饭，每个人都想吃饭，最天然的方法就是排队，一个人一个人来</p><p>处理多线程的问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象，这个时候就需要线程同步，线程同步就是一种等待机制，多个需要访问此对象的线程进入对象的等待池，形成队列，等待前面线程使用完毕，下一个线程再使用</p><p>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问的冲突问题，为了保证数据在方法中被访问的正确性，在访问时加入了锁机制，synchronized，当一个线程获得对象的排他锁，独占资源，其他线程必须等待，使用后释放即可。</p><p>但是也会存在以下问题：<br>1）一个线程持有锁，会导致其他所有需要此锁的线程挂起<br>2）在多线程情况下，加锁，释放锁，会导致比较多的上下文切换和调度延时，引起性能问题<br>3）如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题</p><h1 id="线程不安全案例"><a href="#线程不安全案例" class="headerlink" title="线程不安全案例"></a>线程不安全案例</h1><h2 id="第一个案例：买票"><a href="#第一个案例：买票" class="headerlink" title="第一个案例：买票"></a>第一个案例：买票</h2><pre><code class="hljs csharp">package syn;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname UnsafeBuyTicket</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 11:12</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*不安全的买票的方法*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBuyTicket</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        BuyTicket buyTicket = <span class="hljs-keyword">new</span> BuyTicket();        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;a&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;b&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(buyTicket,<span class="hljs-string">&quot;c&quot;</span>).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">BuyTicket</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">5</span>;    boolean flag = <span class="hljs-literal">true</span>;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-comment">// 买票</span>        <span class="hljs-keyword">while</span>(flag)&#123;            buy();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// 判断是否有票</span>        <span class="hljs-keyword">if</span>(ticket &lt;=<span class="hljs-number">0</span> )&#123;            flag = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">return</span>;        &#125;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;拿到&quot;</span> +ticket--);    &#125;&#125;</code></pre><h2 id="第二个案例：银行取钱"><a href="#第二个案例：银行取钱" class="headerlink" title="第二个案例：银行取钱"></a>第二个案例：银行取钱</h2><pre><code class="hljs csharp">package syn;import java.util.concurrent.locks.ReentrantLock;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname UnsafeBank</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 12:42</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 不安全的取钱</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeBank</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        Account account = <span class="hljs-keyword">new</span> Account(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);        Drawing you = <span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);        Drawing she = <span class="hljs-keyword">new</span> Drawing(account,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;zhong&quot;</span>);        you.start();        she.start();        ReentrantLock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Account</span>&#123;    <span class="hljs-keyword">int</span> money; <span class="hljs-comment">// 余额</span>    String name; <span class="hljs-comment">// 卡名</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> money,String name</span>)</span>&#123;        <span class="hljs-keyword">this</span>.money = money;        <span class="hljs-keyword">this</span>.name = name;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">Drawing</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    Account account;    <span class="hljs-keyword">int</span> drawingMoney;    <span class="hljs-keyword">int</span> nowMoney;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Drawing</span>(<span class="hljs-params">Account account,<span class="hljs-keyword">int</span> drawingMoney,String name</span>)</span>&#123;        super(name);        <span class="hljs-keyword">this</span>.account = account;        <span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+  <span class="hljs-string">&quot;线程开始&quot;</span>);        <span class="hljs-keyword">if</span>((account.money - drawingMoney) &lt; <span class="hljs-number">0</span>)&#123;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;钱不够，取不了&quot;</span>);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">if</span>(Thread.currentThread().getName().<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;你&quot;</span>))&#123;                Thread.sleep(<span class="hljs-number">1000</span>);            &#125;        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;线程执行了&quot;</span>);        account.money =account.money-drawingMoney;        nowMoney += drawingMoney;        System.<span class="hljs-keyword">out</span>.println(account.name +<span class="hljs-string">&quot;余额为&quot;</span>  + account.money);        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;手里的钱&quot;</span> + <span class="hljs-keyword">this</span>.nowMoney);    &#125;&#125;</code></pre><h2 id="第三个案例：jdk中的ArrayList"><a href="#第三个案例：jdk中的ArrayList" class="headerlink" title="第三个案例：jdk中的ArrayList"></a>第三个案例：jdk中的ArrayList</h2><pre><code class="hljs csharp">package syn;import java.util.ArrayList;import java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname UnsafeList</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:05</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*线程不安全的list*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeList</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;                list.<span class="hljs-keyword">add</span>(Thread.currentThread().getName());            &#125;).start();        &#125;        System.<span class="hljs-keyword">out</span>.println(list.size()); <span class="hljs-comment">// 结果应该小于1000</span>    &#125;&#125;</code></pre><h1 id="线程同步的方法"><a href="#线程同步的方法" class="headerlink" title="线程同步的方法"></a>线程同步的方法</h1><p>由于我们可以用关键字private来保证数据对象只能被方法访问，所以我们需要针对方法提出一套机制，这套机制就是synchronized关键字，它包含两种方法：sychronized方法和synchronized块</p><p>synchronized方法控制对象的访问，每个对象就相当于一把锁，每个synchronized方法必须都必须调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就能独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行</p><h2 id="修改第一个案例：买票"><a href="#修改第一个案例：买票" class="headerlink" title="修改第一个案例：买票"></a>修改第一个案例：买票</h2><pre><code class="hljs csharp">package syn;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname SafeBuyTicket</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:14</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SafeBuyTicket</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        BuySafeTicket buySafeTicket = <span class="hljs-keyword">new</span> BuySafeTicket();        <span class="hljs-keyword">new</span> Thread(buySafeTicket,<span class="hljs-string">&quot;a&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(buySafeTicket,<span class="hljs-string">&quot;b&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(buySafeTicket,<span class="hljs-string">&quot;c&quot;</span>).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">BuySafeTicket</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">1000</span>;    boolean flag = <span class="hljs-literal">true</span>;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-comment">// 买票</span>        <span class="hljs-keyword">while</span>(flag)&#123;            buy();        &#125;    &#125;    <span class="hljs-comment">// 同步方法，锁的是this</span>    <span class="hljs-function"><span class="hljs-keyword">private</span>  synchronized <span class="hljs-keyword">void</span> <span class="hljs-title">buy</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// 判断是否有票</span>        <span class="hljs-keyword">if</span>(ticket &lt;=<span class="hljs-number">0</span> )&#123;            flag = <span class="hljs-literal">false</span>;            <span class="hljs-keyword">return</span>;        &#125;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;拿到&quot;</span> +ticket--);    &#125;&#125;</code></pre><h2 id="修改第二个案例：取钱"><a href="#修改第二个案例：取钱" class="headerlink" title="修改第二个案例：取钱"></a>修改第二个案例：取钱</h2><pre><code class="hljs csharp">package syn;import java.util.concurrent.locks.ReentrantLock;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname SafeBank</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:22</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SafeBank</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        AccountSafe accountSafe = <span class="hljs-keyword">new</span> AccountSafe(<span class="hljs-number">100</span>,<span class="hljs-string">&quot;结婚基金&quot;</span>);        DrawingSafe me = <span class="hljs-keyword">new</span> DrawingSafe(accountSafe,<span class="hljs-number">50</span>,<span class="hljs-string">&quot;你&quot;</span>);        DrawingSafe he = <span class="hljs-keyword">new</span> DrawingSafe(accountSafe,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;zhong&quot;</span>);        me.start();        he.start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">AccountSafe</span>&#123;    <span class="hljs-keyword">int</span> money; <span class="hljs-comment">// 余额</span>    String name; <span class="hljs-comment">// 卡名</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AccountSafe</span>(<span class="hljs-params"><span class="hljs-keyword">int</span> money,String name</span>)</span>&#123;        <span class="hljs-keyword">this</span>.money = money;        <span class="hljs-keyword">this</span>.name = name;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">DrawingSafe</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    AccountSafe accountSafe;    <span class="hljs-keyword">int</span> drawingMoney;    <span class="hljs-keyword">int</span> nowMoney;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DrawingSafe</span>(<span class="hljs-params">AccountSafe accountSafe,<span class="hljs-keyword">int</span> drawingMoney,String name</span>)</span>&#123;        super(name);        <span class="hljs-keyword">this</span>.accountSafe = accountSafe;        <span class="hljs-keyword">this</span>.drawingMoney = drawingMoney;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        synchronized (accountSafe)&#123;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+  <span class="hljs-string">&quot;线程开始&quot;</span>);            <span class="hljs-keyword">if</span>((accountSafe.money - drawingMoney) &lt; <span class="hljs-number">0</span>)&#123;                System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;钱不够，取不了&quot;</span>);                <span class="hljs-keyword">return</span>;            &#125;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">if</span>(Thread.currentThread().getName().<span class="hljs-keyword">equals</span>(<span class="hljs-string">&quot;你&quot;</span>))&#123;                    Thread.sleep(<span class="hljs-number">1000</span>);                &#125;            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot;线程执行了&quot;</span>);            accountSafe.money =accountSafe.money-drawingMoney;            nowMoney += drawingMoney;            System.<span class="hljs-keyword">out</span>.println(accountSafe.name +<span class="hljs-string">&quot;余额为&quot;</span>  + accountSafe.money);            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.getName() + <span class="hljs-string">&quot;手里的钱&quot;</span> + <span class="hljs-keyword">this</span>.nowMoney);        &#125;    &#125;&#125;</code></pre><h2 id="修改案例三：jdk中的ArrayList"><a href="#修改案例三：jdk中的ArrayList" class="headerlink" title="修改案例三：jdk中的ArrayList"></a>修改案例三：jdk中的ArrayList</h2><pre><code class="hljs csharp">package syn;import java.util.ArrayList;import java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname SafeList</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:32</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SafeList</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;                synchronized (list) &#123;                    list.<span class="hljs-keyword">add</span>(Thread.currentThread().getName());                &#125;            &#125;).start();        &#125;        <span class="hljs-keyword">try</span> &#123;            Thread.sleep(<span class="hljs-number">3000</span>);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.<span class="hljs-keyword">out</span>.println(list.size()); <span class="hljs-comment">// 结果应该小于1000</span>    &#125;&#125;</code></pre><h2 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h2><p>synchronized（obj）｛｝<br>obj称为同步监视器，其中obj可以是任何一个对象，但是推荐使用同步资源来作为监视器。<br>同步方法中无需指定同步监视器，因为同步方法的同步监视器就是this，就是这个对象本身就是class</p><h3 id="同步监视器的执行过程"><a href="#同步监视器的执行过程" class="headerlink" title="同步监视器的执行过程"></a>同步监视器的执行过程</h3><p>1）第一个线程执行，锁定同步监视器，执行其中代码<br>2）第二个线程访问，发现同步监视器被锁定，无法访问<br>3）第一个线程访问完毕，解锁同步监视器<br>4）第二个线程访问，发现同步监视器没有锁，然后锁定并且访问</p><h1 id="juc下面的CopyOnWriteList"><a href="#juc下面的CopyOnWriteList" class="headerlink" title="juc下面的CopyOnWriteList"></a>juc下面的CopyOnWriteList</h1><pre><code class="hljs csharp">package juc;import java.util.concurrent.CopyOnWriteArrayList;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestJUC</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:37</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestJUC</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        CopyOnWriteArrayList&lt;String&gt; copyOnWriteArrayList = <span class="hljs-keyword">new</span> CopyOnWriteArrayList();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;                copyOnWriteArrayList.<span class="hljs-keyword">add</span>(Thread.currentThread().getName());            &#125;).start();        &#125;        <span class="hljs-keyword">try</span> &#123;            Thread.sleep(<span class="hljs-number">3000</span>);        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.<span class="hljs-keyword">out</span>.println(copyOnWriteArrayList.size());    &#125;&#125;</code></pre><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>多个线程各自占有一些共享资源，并且相互等待其他线程占有的资源才能运行，而导致两个或者多个线程都在等待对方释放的资源，都停止执行的情形，某一个同步块中拥有两个对象以上的锁，就可能发生这样的事情。</p><h2 id="自己写的一个死锁的案例"><a href="#自己写的一个死锁的案例" class="headerlink" title="自己写的一个死锁的案例"></a>自己写的一个死锁的案例</h2><pre><code class="hljs csharp">package deadlock;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestDeadLock</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 15:47</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestDeadLock</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        Object locka = <span class="hljs-keyword">new</span> Object();        Object lockb = <span class="hljs-keyword">new</span> Object();        AThread aThread = <span class="hljs-keyword">new</span> AThread(locka,lockb);        BThread bThread = <span class="hljs-keyword">new</span> BThread(locka,lockb);        <span class="hljs-keyword">new</span> Thread(aThread,<span class="hljs-string">&quot;a&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(bThread,<span class="hljs-string">&quot;b&quot;</span>).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">AThread</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">private</span> Object locka;    <span class="hljs-keyword">private</span> Object lockb;    AThread(Object locka,Object lockb)&#123;        <span class="hljs-keyword">this</span>.locka = locka;        <span class="hljs-keyword">this</span>.lockb = lockb;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;启动了&quot;</span>);        synchronized (locka)&#123;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;获取了a的锁&quot;</span>);            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">3000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;准备获取b的锁&quot;</span>);            synchronized (lockb)&#123;                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;获取b的锁了&quot;</span>);            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">BThread</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">private</span> Object locka;    <span class="hljs-keyword">private</span> Object lockb;    BThread(Object locka,Object lockb)&#123;        <span class="hljs-keyword">this</span>.locka = locka;        <span class="hljs-keyword">this</span>.lockb = lockb;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;启动了&quot;</span>);        synchronized (lockb)&#123;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;获取了b的锁&quot;</span>);            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">3000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;            System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;准备获取a的锁&quot;</span>);            synchronized (locka)&#123;                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;获取a的锁了&quot;</span>);            &#125;        &#125;    &#125;&#125;</code></pre><p>程序一直运行中，两个线程互相需要对方的资源</p><h2 id="产生死锁的四大条件"><a href="#产生死锁的四大条件" class="headerlink" title="产生死锁的四大条件"></a>产生死锁的四大条件</h2><p>1）互斥<br>2）持有并且等待<br>3）不可被剥夺<br>4）循环等待</p><p>想要解决死锁的问题，就从上面四个方面去突破</p><h1 id="Lock（锁）"><a href="#Lock（锁）" class="headerlink" title="Lock（锁）"></a>Lock（锁）</h1><p>从jdk5.0开始，java提供了更强大的线程同步机制，通过显示定义同步锁对象来实现同步，同步锁使用Lock对象充当</p><p>java.util.concurrent.locks.Lock 接口是控制多个线程对共享资源进行访问的工具，锁提供了对共享资源的独占访问，每次只能有一个线程对lock对象加锁，线程开始访问共享资源之前首先需要获取lock对象</p><p>ReentranLock类实现了Lock类，它拥有与Synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentranLock，可以显示的加锁，释放锁。</p><pre><code class="hljs csharp">package <span class="hljs-keyword">lock</span>;import com.sun.org.apache.bcel.<span class="hljs-keyword">internal</span>.generic.NEW;import java.util.concurrent.locks.ReentrantLock;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestLock</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 17:02</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestLock</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        TestLock2 testLock2 = <span class="hljs-keyword">new</span> TestLock2();        <span class="hljs-keyword">new</span> Thread(testLock2).start();        <span class="hljs-keyword">new</span> Thread(testLock2).start();        <span class="hljs-keyword">new</span> Thread(testLock2).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">TestLock2</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">int</span> tickets = <span class="hljs-number">10</span>;    <span class="hljs-comment">// 定义lock</span>    <span class="hljs-keyword">private</span> final ReentrantLock <span class="hljs-keyword">lock</span> = <span class="hljs-keyword">new</span> ReentrantLock();    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">lock</span>.<span class="hljs-keyword">lock</span>();                <span class="hljs-keyword">if</span>(tickets&gt;<span class="hljs-number">0</span>)&#123;                    <span class="hljs-keyword">try</span> &#123;                        Thread.sleep(<span class="hljs-number">1000</span>);                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    System.<span class="hljs-keyword">out</span>.println(tickets--);                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                e.printStackTrace();            &#125;<span class="hljs-keyword">finally</span> &#123;                <span class="hljs-keyword">lock</span>.unlock();            &#125;        &#125;    &#125;&#125;</code></pre><p>lock是显示锁，（手动开启和关闭），synchronized是隐式锁，出了作用域自动释放</p><p>lock只有代码块锁，synchronized有代码块和方法锁<br>使用lock锁，jvm将花费较少的时间来调度线程，性能更好。并且具有更好的拓展性（提供更多的子类）</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java多线程之线程零碎知识点</title>
    <link href="/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h1><p>不推荐使用jdk提供的stop，destroy方法<br>推荐线程自己停下来<br>建议使用一个标志位进行终止变量，当flag=false，则终止线程</p><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestStop</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 9:34</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 建议线程正常停止——&gt;利用次数，不建议死循环</span><span class="hljs-comment">// 建议使用标志位，设置一个标志位</span><span class="hljs-comment">// 不要使用stop，destroy等过时的方法</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestStop</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    <span class="hljs-keyword">private</span> boolean flag = <span class="hljs-literal">true</span>;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(flag)&#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;线程正在运行&quot;</span> + i++);        &#125;    &#125;    <span class="hljs-comment">// 设置一个公开的方法，转换标志位</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stop</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">this</span>.flag = <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        TestStop testStop = <span class="hljs-keyword">new</span> TestStop();        <span class="hljs-keyword">new</span> Thread(testStop).start();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++) &#123;<span class="hljs-comment">//            System.out.println(&quot;main&quot; + i);</span>            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">90000</span>)&#123;                testStop.stop();                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;线程该停止了&quot;</span>);            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><p>sleep时间指定当前线程阻塞的毫秒数<br>sleep存在异常InterruptedException<br>sleep时间达到以后线程进入就绪状态<br>sleep可以模拟网络延迟，倒计时等<br>每一个对象都有一个锁，但是sleep不会释放锁</p><p> 模拟倒计时</p><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestSleep2</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 9:51</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*模拟倒计时*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestSleep2</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tenDown</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">int</span> number = <span class="hljs-number">10</span>;        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">1000</span>);                System.<span class="hljs-keyword">out</span>.println(number--);                <span class="hljs-keyword">if</span>(number &lt;= <span class="hljs-number">0</span>)&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        TestSleep2 testSleep2 = <span class="hljs-keyword">new</span> TestSleep2();        testSleep2.tenDown();    &#125;&#125;</code></pre><p>模拟时间</p><pre><code class="hljs csharp">package state;import java.text.SimpleDateFormat;import java.util.Date;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestSleep3</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 9:54</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*打印当前系统的时间*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestSleep3</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        <span class="hljs-comment">// 获取系统当前时间</span>        Date time = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">1000</span>);                System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;HH:mm:ss&quot;</span>).format(time));                time = <span class="hljs-keyword">new</span> Date(System.currentTimeMillis());            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h1><p>礼让线程，让当前正在执行的线程暂停，但不阻塞<br>将线程从运行状态转换为就绪状态<br>让cpu重新调度，礼让不一定成功，还可能cpu选择了刚才礼让出来的线程</p><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestYield2</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 10:04</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestYield2</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        MyYield myYield = <span class="hljs-keyword">new</span> MyYield();        <span class="hljs-keyword">new</span> Thread(myYield,<span class="hljs-string">&quot;a&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(myYield,<span class="hljs-string">&quot;b&quot;</span>).start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">MyYield</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;正在执行&quot;</span>);        Thread.<span class="hljs-keyword">yield</span>();        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;线程停止执行&quot;</span>);    &#125;&#125;</code></pre><p>结果可能很多种</p><h1 id="线程插队"><a href="#线程插队" class="headerlink" title="线程插队"></a>线程插队</h1><p>join合并线程，待此线程执行完成后，再执行其他的线程，其他线程阻塞<br>可以想象成为插队</p><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestJoin</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 10:10</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*join 想象为插队*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestJoin</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;线程vip来了 &quot;</span> +i);<span class="hljs-comment">//            try &#123;</span><span class="hljs-comment">//                Thread.sleep(1000);</span><span class="hljs-comment">//            &#125; catch (InterruptedException e) &#123;</span><span class="hljs-comment">//                e.printStackTrace();</span><span class="hljs-comment">//            &#125;</span>        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        TestJoin testJoin = <span class="hljs-keyword">new</span> TestJoin();        Thread thread = <span class="hljs-keyword">new</span> Thread(testJoin);        thread.start();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">500</span>; i++) &#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;main &quot;</span>+ i);            <span class="hljs-keyword">if</span>( i == <span class="hljs-number">200</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    thread.<span class="hljs-keyword">join</span>();                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>这个例子在一开始的时候，因为线程启动了，所以有两个线程，主线程和testjoin两个线程，所以cpu会交替的执行，但是如果main线程执行到200的时候，这个时候会让testjoin线程插队，所以必须等testjoin线程结束之后，才能继续执行主线程</p><h1 id="观看线程状态"><a href="#观看线程状态" class="headerlink" title="观看线程状态"></a>观看线程状态</h1><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestState</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 10:20</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*观察测试线程的状态*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestState</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        Thread thread = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;                <span class="hljs-keyword">try</span> &#123;                    Thread.sleep(<span class="hljs-number">1000</span>);                    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;-----&quot;</span>);                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;);        <span class="hljs-comment">// 观察状态</span>        Thread.State state = thread.getState();        System.<span class="hljs-keyword">out</span>.println(state); <span class="hljs-comment">// new</span>        <span class="hljs-comment">// 观察启动</span>        thread.start();        state = thread.getState();        System.<span class="hljs-keyword">out</span>.println(state); <span class="hljs-comment">// 运行</span>        <span class="hljs-keyword">while</span> (state != Thread.State.TERMINATED)&#123; <span class="hljs-comment">// 只要线程不终止就一直输出状态</span>            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">1000</span>);                state = thread.getState();                System.<span class="hljs-keyword">out</span>.println(state);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行</p><p>线程的优先级范围是从1~10<br>Thread.Min_PRIORTY=1<br>Thread.Max_PRIORTY=10<br>Thread.NORM_PRIORTY=5</p><p>用一下方法可以改变优先级</p><pre><code class="hljs csharp">getPriority().setPriority(<span class="hljs-keyword">int</span> x);</code></pre><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestPriority</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 10:30</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*测试线程优先级*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestPriority</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;--&gt;&quot;</span> +Thread.currentThread().getPriority() );        MyPriority myPriority = <span class="hljs-keyword">new</span> MyPriority();        Thread thread1 =  <span class="hljs-keyword">new</span> Thread(myPriority);        Thread thread2 =  <span class="hljs-keyword">new</span> Thread(myPriority);        Thread thread3 =  <span class="hljs-keyword">new</span> Thread(myPriority);        Thread thread4 =  <span class="hljs-keyword">new</span> Thread(myPriority);        Thread thread5 =  <span class="hljs-keyword">new</span> Thread(myPriority);        Thread thread6 =  <span class="hljs-keyword">new</span> Thread(myPriority);        thread1.start();        thread2.setPriority(<span class="hljs-number">1</span>);        thread2.start();        thread3.setPriority(<span class="hljs-number">4</span>);        thread3.start();        thread4.setPriority(Thread.MAX_PRIORITY);        thread4.start();        thread5.setPriority(<span class="hljs-number">-1</span>);        thread5.start();        thread6.setPriority(<span class="hljs-number">11</span>);        thread6.start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">MyPriority</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;--&gt;&quot;</span> +Thread.currentThread().getPriority() );    &#125;&#125;</code></pre><h1 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h1><p>线程分为用户线程和守护线程<br>虚拟机必须确保用户线程执行完毕<br>虚拟机不用等待守护线程执行完毕<br>如：后台记录操作日志，监管内存，垃圾回收</p><pre><code class="hljs csharp">package state;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestDaemon</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/8 10:50</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*守护线程*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">TestDaemon</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        God god  = <span class="hljs-keyword">new</span> God();        You you = <span class="hljs-keyword">new</span> You();        Thread thread = <span class="hljs-keyword">new</span> Thread(god);        thread.setDaemon(<span class="hljs-literal">true</span>); <span class="hljs-comment">// 默认是false，表示用户线程，正常的线程都是用户线程</span>        thread.start(); <span class="hljs-comment">// 上帝守护线程启动</span>        <span class="hljs-keyword">new</span> Thread(you).start();<span class="hljs-comment">// 用户线程启动</span>    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">God</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;上帝保佑着你&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">36500</span>; i++) &#123;            System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;你一生都开心的或者&quot;</span>);        &#125;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;goodbye world&quot;</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java多线程之线程创建</title>
    <link href="/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/"/>
    <url>/2020/12/08/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="线程创建的方式"><a href="#线程创建的方式" class="headerlink" title="线程创建的方式"></a>线程创建的方式</h1><h2 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestNewThread1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/3 17:06</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span>    <span class="hljs-comment">// 创建线程方式一：继承Thread类，重写run方法，调用start开启线程</span>    <span class="hljs-comment">// 线程开启不一定立即执行</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNewThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;            System.out.println(<span class="hljs-string">&quot;我在看代码&quot;</span>+i);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TestNewThread1 testNewThread1 = <span class="hljs-keyword">new</span> TestNewThread1();        testNewThread1.start();        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000</span>; i++) &#123;            System.out.println(<span class="hljs-string">&quot;我在学习多线程&quot;</span>+i);        &#125;    &#125;&#125;</code></pre><h2 id="实现runnable接口"><a href="#实现runnable接口" class="headerlink" title="实现runnable接口"></a>实现runnable接口</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestNewThread2</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 15:37</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNewThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;我是runnable类&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TestNewThread2 testNewThread2 = <span class="hljs-keyword">new</span> TestNewThread2();        Thread thread = <span class="hljs-keyword">new</span> Thread(testNewThread2);        thread.start();    &#125;&#125;</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>相当于继承thread类与runnable接口来说，推荐使用thread类，避免oop单继承局限性。使用runnable接口，避免了单继承局限性，灵活方便，方便同一个对象被多个线程使用。 </p><h2 id="实现callable接口"><a href="#实现callable接口" class="headerlink" title="实现callable接口"></a>实现callable接口</h2><p>1）实现callable接口，需要返回值类型。<br>2）重写call方法，需要抛出异常</p><p>关于callable接口，其实相当于runnable的增强版本。</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.Callable;<span class="hljs-keyword">import</span> java.util.concurrent.ExecutionException;<span class="hljs-keyword">import</span> java.util.concurrent.FutureTask;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestCallable</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 16:20</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callable</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(; i&lt;<span class="hljs-number">100</span> ; i++)&#123;            System.out.println(Thread.currentThread().getName()+ <span class="hljs-string">&quot; &quot;</span> + i );        &#125;        <span class="hljs-keyword">return</span> i ;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TestCallable testCallable = <span class="hljs-keyword">new</span> TestCallable();        FutureTask&lt;Integer&gt; futureTask = <span class="hljs-keyword">new</span> FutureTask&lt;Integer&gt;(testCallable);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span>+ i);            <span class="hljs-keyword">if</span>(i == <span class="hljs-number">20</span>)&#123;                <span class="hljs-keyword">new</span>  Thread(futureTask,<span class="hljs-string">&quot;callable线程&quot;</span>).start();            &#125;        &#125;        <span class="hljs-keyword">try</span> &#123;            System.out.println(<span class="hljs-string">&quot;子线程的返回值是&quot;</span> + futureTask.get());        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h1 id="模拟一下抢票的软件"><a href="#模拟一下抢票的软件" class="headerlink" title="模拟一下抢票的软件"></a>模拟一下抢票的软件</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestNewThread3</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 15:45</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestNewThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> ticket = <span class="hljs-number">10</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">while</span>(flag)&#123;            System.out.println(Thread.currentThread().getName() +  <span class="hljs-string">&quot;当前剩余的票数为&quot;</span> + ticket--);            <span class="hljs-keyword">if</span>(ticket &lt;= <span class="hljs-number">0</span> )&#123;                System.out.println(<span class="hljs-string">&quot;当前已经没有票了&quot;</span>);                flag = <span class="hljs-keyword">false</span>;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        TestNewThread3 ticket = <span class="hljs-keyword">new</span> TestNewThread3();        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;a&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;b&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(ticket,<span class="hljs-string">&quot;c&quot;</span>).start();    &#125;&#125;</code></pre><p>可以发现有好多问题，最本质的问题就是在同一时间段，有一张票被同时抢到了。<br>数据出现了问题</p><h1 id="龟兔赛跑"><a href="#龟兔赛跑" class="headerlink" title="龟兔赛跑"></a>龟兔赛跑</h1><p>简单的体现自己的思想</p><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> Race;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> race</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 15:57</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Race</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String winner = <span class="hljs-keyword">null</span>;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;            <span class="hljs-keyword">boolean</span> flag = gameOver(i);            <span class="hljs-keyword">if</span>(flag)&#123;                <span class="hljs-keyword">break</span>;            &#125;            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;跑了&quot;</span> +  i + <span class="hljs-string">&quot;步&quot;</span>);        &#125;    &#125;    <span class="hljs-comment">// 判断是否完成比赛</span>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">gameOver</span><span class="hljs-params">(<span class="hljs-keyword">int</span> steps)</span></span>&#123;        <span class="hljs-keyword">if</span>(winner != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(steps &gt;= <span class="hljs-number">100</span>)</span></span>&#123;            winner = Thread.currentThread().getName();            System.out.println(<span class="hljs-string">&quot;winnner is &quot;</span> + winner);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Race race = <span class="hljs-keyword">new</span> Race();        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;rabbit&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(race,<span class="hljs-string">&quot;wugui&quot;</span>).start();    &#125;&#125;</code></pre><p>强化版，一旦有winner产生，那么直接选出胜利者，比赛不再继续</p><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> Race;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> RaceMmz</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 16:07</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RaceMmz</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String winner;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;            <span class="hljs-keyword">if</span>(winner != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">break</span>;            &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(i &gt;= <span class="hljs-number">100</span>)</span></span>&#123;                winner = Thread.currentThread().getName();                System.out.println(<span class="hljs-string">&quot;winner is&quot;</span> + winner);            &#125;            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;已经走了&quot;</span> + i + <span class="hljs-string">&quot;步&quot;</span>);        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        RaceMmz raceMmz = <span class="hljs-keyword">new</span> RaceMmz();        <span class="hljs-keyword">new</span> Thread(raceMmz,<span class="hljs-string">&quot;rabbit&quot;</span>).start();        <span class="hljs-keyword">new</span> Thread(raceMmz,<span class="hljs-string">&quot;wugui&quot;</span>).start();    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态代理模式</title>
    <link href="/2020/12/07/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/12/07/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="关于静态代理模式"><a href="#关于静态代理模式" class="headerlink" title="关于静态代理模式"></a>关于静态代理模式</h1><p>真实对象和代理对象都要实现同一个接口</p><p>代理对象需要一个真实对象的一个对象，在代理对象的实现的方法中，需要真实对象的方法</p><p>代理对象可以做很多真实对象做不了的事情，而真实对象可以专注于做自己的事情。</p><pre><code class="hljs csharp"><span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname StaticProxy</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/7 18:30</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StaticProxy</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>)</span> &#123;        You you = <span class="hljs-keyword">new</span> You();        WeddingCompany weddingCompany = <span class="hljs-keyword">new</span> WeddingCompany(you);        weddingCompany.HappyMarry();    &#125;&#125;<span class="hljs-keyword">interface</span> <span class="hljs-title">Marry</span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span>(<span class="hljs-params"></span>)</span>;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">You</span> <span class="hljs-title">implements</span> <span class="hljs-title">Marry</span>&#123;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;我结婚了&quot;</span>);    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title">WeddingCompany</span> <span class="hljs-title">implements</span> <span class="hljs-title">Marry</span>&#123;    <span class="hljs-keyword">private</span> Marry target;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WeddingCompany</span>(<span class="hljs-params">Marry target</span>)</span> &#123;        <span class="hljs-keyword">this</span>.target = target;    &#125;    @Override    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">HappyMarry</span>(<span class="hljs-params"></span>)</span> &#123;        before();        <span class="hljs-keyword">this</span>.target.HappyMarry();        after();    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;结婚之后，收尾款&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span>(<span class="hljs-params"></span>)</span> &#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;结婚之前，布置现场&quot;</span>);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda表达式</title>
    <link href="/2020/12/07/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/12/07/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="lambda表达式简介"><a href="#lambda表达式简介" class="headerlink" title="lambda表达式简介"></a>lambda表达式简介</h1><p>希腊字母表中排序第十一位的字母，称为lambda<br>避免内部类定义过多<br>其实实质属于函数式编程</p><h1 id="为什么使用lambda表达式"><a href="#为什么使用lambda表达式" class="headerlink" title="为什么使用lambda表达式"></a>为什么使用lambda表达式</h1><p>避免内部类定义过多<br>可以让你的代码看起来很简洁<br>去掉了一堆没有意义的代码，只留下核心的逻辑</p><h1 id="理解函数式接口"><a href="#理解函数式接口" class="headerlink" title="理解函数式接口"></a>理解函数式接口</h1><p>函数式接口：任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p><p>比如在我们学习的多线程中的Runnable类，就可以看做成为一个函数式接口，因为他里面只有run方法</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestLambda</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 17:51</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda</span> </span>&#123;    <span class="hljs-comment">// 静态内部类</span>    <span class="hljs-comment">// 实现类</span>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILike</span></span>&#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lamdbaFunc</span><span class="hljs-params">()</span> </span>&#123;            System.out.println(<span class="hljs-string">&quot;i like lamdba2&quot;</span>);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ILike iLike = <span class="hljs-keyword">new</span> Like();        iLike.lamdbaFunc();        iLike = <span class="hljs-keyword">new</span> Like2();        iLike.lamdbaFunc();        <span class="hljs-comment">// 局部内部类</span>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILike</span></span>&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lamdbaFunc</span><span class="hljs-params">()</span> </span>&#123;                System.out.println(<span class="hljs-string">&quot;i like lamdba3&quot;</span>);            &#125;        &#125;        iLike = <span class="hljs-keyword">new</span> Like3();        iLike.lamdbaFunc();        <span class="hljs-comment">// 匿名内部类</span>        iLike = <span class="hljs-keyword">new</span> ILike() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lamdbaFunc</span><span class="hljs-params">()</span> </span>&#123;                System.out.println(<span class="hljs-string">&quot;i like lamdba4&quot;</span>);            &#125;        &#125;;        iLike.lamdbaFunc();        <span class="hljs-comment">// 用lambda表达式</span>        iLike = () -&gt; &#123;            System.out.println(<span class="hljs-string">&quot;i like lamdba5&quot;</span>);        &#125;;        iLike.lamdbaFunc();    &#125;&#125;<span class="hljs-comment">// 定义一个函数式接口</span><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ILike</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">lamdbaFunc</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">// 实现类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Like</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILike</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lamdbaFunc</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;i like lamdba&quot;</span>);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestLambda2</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 18:09</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda2</span> </span>&#123;    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Love2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILove</span></span>&#123;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;            System.out.println(<span class="hljs-string">&quot;i love u &quot;</span> + a);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ILove iLove = <span class="hljs-keyword">new</span> Love();        iLove.love(<span class="hljs-number">1</span>);        iLove = <span class="hljs-keyword">new</span> Love2();        iLove.love(<span class="hljs-number">2</span>);        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Love3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILove</span> </span>&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;                System.out.println(<span class="hljs-string">&quot;i love u &quot;</span> + a);            &#125;        &#125;        iLove = <span class="hljs-keyword">new</span> Love3();        iLove.love(<span class="hljs-number">3</span>);        iLove = <span class="hljs-keyword">new</span> ILove() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;                System.out.println(<span class="hljs-string">&quot;i love u &quot;</span>+ a);            &#125;        &#125;;        iLove.love(<span class="hljs-number">4</span>);        iLove = (a -&gt; &#123;            System.out.println(<span class="hljs-string">&quot;i love u &quot;</span> + a);        &#125;);        iLove.love(<span class="hljs-number">5</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ILove</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Love</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ILove</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">love</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;i love u &quot;</span> + a);    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestLambda3</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/7 18:17</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLambda3</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Play play = a -&gt; System.out.println(<span class="hljs-string">&quot;let us play &quot;</span>+ a);        play.play(<span class="hljs-number">123</span>);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Play</span></span>&#123;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>;&#125;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>lambda表达式只能有一行代码的情况下才能简化为一行，如果有多行，那么必须用代码块包含</p><p>前提是，接口必须是函数式接口（就是接口中必须有一个方法）</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络编程</title>
    <link href="/2020/12/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2020/12/02/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>古代两个人想要进行远处沟通的话是用邮件，那么邮件就包含对方的邮编，对方的地址，对方的姓名，自己的地址</p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>将地理位置不同，将具有独立功能的多台计算机设备，通过通信进行连接起来。在网络操作系统，网络管理软件以及网络通信协议的管理和协商下，实现资源共享和信息传递的计算机系统。</p><h2 id="网络编程的目的"><a href="#网络编程的目的" class="headerlink" title="网络编程的目的"></a>网络编程的目的</h2><p>传播信息，共享资源</p><h2 id="想要达到效果需要做什么"><a href="#想要达到效果需要做什么" class="headerlink" title="想要达到效果需要做什么"></a>想要达到效果需要做什么</h2><p>1）精准确定一个网络上面的主机 ip：端口，定位到计算机上的某个资源。<br>2）找到了主机，如何传输数据</p><h1 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h1><h2 id="通信双方地址"><a href="#通信双方地址" class="headerlink" title="通信双方地址"></a>通信双方地址</h2><p>ip 端口号</p><h2 id="规则：网络通信的协议"><a href="#规则：网络通信的协议" class="headerlink" title="规则：网络通信的协议"></a>规则：网络通信的协议</h2><p>tcp/ip 参考模型</p><h1 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h1><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p> inetAddress  唯一定位一台网络上的计算机<br>127.0.0.1 本地计算机的地址</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>记忆ip地址</p><h2 id="java中ip的类"><a href="#java中ip的类" class="headerlink" title="java中ip的类"></a>java中ip的类</h2><pre><code class="hljs reasonml">import java.net.InetAddress;import java.net.UnknownHostException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestInetAddress</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/2 15:16</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> TestInetAddress &#123;    public static void main(String<span class="hljs-literal">[]</span> args) &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 得到本机的这个地址类</span>            InetAddress inetAddress1 =  <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>)</span>;            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress1);            <span class="hljs-comment">// 得到百度ip地址类</span>            InetAddress inetAddress2 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>)</span>;            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2);            <span class="hljs-comment">// 得到本机的ip地址类</span>            InetAddress inetAddress3 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">LocalHost()</span>;            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress3);            <span class="hljs-comment">// 分隔符</span>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;____________________________________&quot;</span>);                        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2.get<span class="hljs-constructor">Address()</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2.get<span class="hljs-constructor">CanonicalHostName()</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2.get<span class="hljs-constructor">Class()</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2.get<span class="hljs-constructor">HostAddress()</span>);            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetAddress2.get<span class="hljs-constructor">HostName()</span>);        &#125; catch (UnknownHostException e) &#123;            e.print<span class="hljs-constructor">StackTrace()</span>;        &#125;    &#125;&#125;</code></pre><h1 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h1><p>端口表示计算机上的一个程序的进程<br>不同的进程有不同的端口号，用来区分软件。<br>被规定0~65535，又被分为tcp和udp端口，相当于一共有65535*2个端口，但是单个协议下，端口不能冲突</p><h2 id="公用端口"><a href="#公用端口" class="headerlink" title="公用端口"></a>公用端口</h2><p>http 80<br>https 443<br>ftp 21<br>ssh 22<br>telent 23</p><h2 id="程序注册端口"><a href="#程序注册端口" class="headerlink" title="程序注册端口"></a>程序注册端口</h2><p>1024~49151 分配给用户和程序<br>tomcat 8080<br>mysql 3306<br>oracle 1521</p><h2 id="动态私有端口"><a href="#动态私有端口" class="headerlink" title="动态私有端口"></a>动态私有端口</h2><p>49152~65535</p><pre><code class="hljs reasonml">import java.net.InetSocketAddress;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestInetSocketAddress</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/2 15:35</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span>public <span class="hljs-keyword">class</span> TestInetSocketAddress &#123;    public static void main(String<span class="hljs-literal">[]</span> args) &#123;        InetSocketAddress inetSocketAddress = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InetSocketAddress(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, 8080)</span>;        InetSocketAddress inetSocketAddress2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">InetSocketAddress(<span class="hljs-string">&quot;localhost&quot;</span>, 8080)</span>;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetSocketAddress);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetSocketAddress2);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetSocketAddress.get<span class="hljs-constructor">Address()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetSocketAddress.get<span class="hljs-constructor">HostName()</span>);        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(inetSocketAddress.get<span class="hljs-constructor">Port()</span>);    &#125;&#125;</code></pre><h1 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h1><p>协议：约定，就好比我们说话说的是普通话<br>网络通信协议：速率，传输码率，代码结构，传输控制</p><p>TCP/IP协议簇 一组协议<br>tcp：用户传输协议<br>ip：用户数据报协议</p><h2 id="tcp和udp对比"><a href="#tcp和udp对比" class="headerlink" title="tcp和udp对比"></a>tcp和udp对比</h2><p>老生常谈了，最主要还是一个可靠，另一个不可靠。<br>tcp：连接，稳定，三次握手，四次挥手<br>udp：不连接，不稳定<br>其实最主要的还是因为tcp与ip报文的差距</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://img-blog.csdnimg.cn/20201202154707197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://img-blog.csdnimg.cn/20201202154821565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzQ0Nzcx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>客户端</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tcp;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.OutputStream;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-keyword">import</span> java.net.UnknownHostException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> tcp.TpcCLientDemo1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/2 15:49</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 客户端</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpCLientDemo1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Socket socket = <span class="hljs-keyword">null</span>;        OutputStream outputStream = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.要知道服务器的地址</span>            InetAddress inetAddresses = InetAddress.getByName(<span class="hljs-string">&quot;127.0.01&quot;</span>);            <span class="hljs-comment">// 2.端口号</span>            <span class="hljs-keyword">int</span> port = <span class="hljs-number">9999</span>;            <span class="hljs-comment">// 3.创建一个socket通信</span>            socket = <span class="hljs-keyword">new</span> Socket(inetAddresses,port);            <span class="hljs-comment">// 4.发送消息 IO流</span>            outputStream = socket.getOutputStream();            outputStream.write(<span class="hljs-string">&quot;你好，mmz&quot;</span>.getBytes());        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span>(outputStream != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    outputStream.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span>(socket != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    socket.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>服务器</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> tcp;<span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.net.ServerSocket;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> tcp.TcpServerDemo1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/2 15:49</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 服务器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpServerDemo1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        ServerSocket serverSocket = <span class="hljs-keyword">null</span>;        Socket accept = <span class="hljs-keyword">null</span>;        InputStream inputStream = <span class="hljs-keyword">null</span>;        ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.我得有一个地址</span>            serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9999</span>);            <span class="hljs-comment">// 2.等待客户端连接</span>            accept = serverSocket.accept();            <span class="hljs-comment">// 3.读取客户端的消息</span>            inputStream = accept.getInputStream();            byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();            <span class="hljs-keyword">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">int</span> len ;            <span class="hljs-keyword">while</span>((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;                byteArrayOutputStream.write(buffer,<span class="hljs-number">0</span>,len);            &#125;            System.out.println(byteArrayOutputStream.toString());        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (byteArrayOutputStream != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    byteArrayOutputStream.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    inputStream.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (accept != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    accept.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            <span class="hljs-keyword">if</span> (serverSocket != <span class="hljs-keyword">null</span>)&#123;                <span class="hljs-keyword">try</span> &#123;                    serverSocket.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><pre><code class="hljs arduino">package tcp;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.net.ServerSocket;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TcpServerDemo2</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/2 16:20</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 服务器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpServerDemo2</span> &#123;</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.创建服务</span>            ServerSocket serverSocket = <span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">9000</span>);            <span class="hljs-comment">// 2.监听客户端的连接</span>            Socket accept = serverSocket.accept();            <span class="hljs-comment">// 3.获取输入流</span>            InputStream inputStream = accept.getInputStream();            <span class="hljs-comment">// 4.文件输出</span>            FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(<span class="hljs-string">&quot;receive.jpg&quot;</span>));            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">int</span> len;            <span class="hljs-keyword">while</span>((len =inputStream.<span class="hljs-built_in">read</span>(bytes)) != <span class="hljs-number">-1</span>)&#123;                fileOutputStream.<span class="hljs-built_in">write</span>(bytes,<span class="hljs-number">0</span>,len);            &#125;            <span class="hljs-comment">// 通知客户端，我服务器这边已经完成了流的获取</span>            OutputStream outputStream = accept.getOutputStream();            outputStream.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;我接受完毕了&quot;</span>.getBytes());            <span class="hljs-comment">// 5.关闭资源</span>            fileOutputStream.<span class="hljs-built_in">close</span>();            inputStream.<span class="hljs-built_in">close</span>();            accept.<span class="hljs-built_in">close</span>();            serverSocket.<span class="hljs-built_in">close</span>();        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><pre><code class="hljs arduino">package tcp;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TcpClientDemo02</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/2 16:15</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 客户端</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TcpClientDemo2</span> &#123;</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 1.创建一个socket连接</span>            Socket socket = <span class="hljs-keyword">new</span> Socket(InetAddress.getByName(<span class="hljs-string">&quot;127.0.0.1&quot;</span>), <span class="hljs-number">9000</span>);            <span class="hljs-comment">// 2.创建一个输出流</span>            OutputStream outputStream = socket.getOutputStream();            <span class="hljs-comment">// 3.读取文件流</span>            FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">new</span> <span class="hljs-built_in">File</span>(<span class="hljs-string">&quot;hengfu.jpg&quot;</span>));            <span class="hljs-comment">// 4.写出文件流</span>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">int</span> len;            <span class="hljs-keyword">while</span>((len=fileInputStream.<span class="hljs-built_in">read</span>(bytes)) != <span class="hljs-number">-1</span>)&#123;                outputStream.<span class="hljs-built_in">write</span>(bytes,<span class="hljs-number">0</span>,len);            &#125;            <span class="hljs-comment">// 通知服务器结束了</span>            socket.shutdownOutput();            InputStream inputStream = socket.getInputStream();            ByteArrayOutputStream byteArrayOutputStream = <span class="hljs-keyword">new</span> ByteArrayOutputStream();            <span class="hljs-keyword">byte</span>[] bytes1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];            <span class="hljs-keyword">int</span> len1;            <span class="hljs-keyword">while</span>((len1 = inputStream.<span class="hljs-built_in">read</span>(bytes1)) != <span class="hljs-number">-1</span>)&#123;                byteArrayOutputStream.<span class="hljs-built_in">write</span>(bytes1,<span class="hljs-number">0</span>,len1);            &#125;            System.out.<span class="hljs-built_in">println</span>(byteArrayOutputStream.toString());            byteArrayOutputStream.<span class="hljs-built_in">close</span>();            inputStream.<span class="hljs-built_in">close</span>();            fileInputStream.<span class="hljs-built_in">close</span>();            outputStream.<span class="hljs-built_in">close</span>();            socket.<span class="hljs-built_in">close</span>();        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>发短信，不用连接，但是需要知道对方的地址</p><h2 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h2><pre><code class="hljs arduino">package udp;<span class="hljs-keyword">import</span> java.net.DatagramPacket;<span class="hljs-keyword">import</span> java.net.DatagramSocket;<span class="hljs-keyword">import</span> java.net.SocketException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname UdpServerDemo1</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/2 17:03</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpServerDemo1</span> &#123;</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            DatagramSocket socket = <span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">9090</span>);            <span class="hljs-comment">// 接受数据</span>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];            DatagramPacket datagramPacket = <span class="hljs-keyword">new</span> DatagramPacket(bytes, <span class="hljs-number">0</span>, bytes.length);            socket.receive(datagramPacket);            System.out.<span class="hljs-built_in">println</span>(datagramPacket.getAddress().getHostAddress());            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(datagramPacket.getData(),<span class="hljs-number">0</span>,datagramPacket.getLength()));            socket.<span class="hljs-built_in">close</span>();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><pre><code class="hljs java"><span class="hljs-keyword">package</span> udp;<span class="hljs-keyword">import</span> java.net.DatagramPacket;<span class="hljs-keyword">import</span> java.net.DatagramSocket;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.SocketException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> UdpClientDemo1</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/2 16:59</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 不需要连接服务器</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UdpClientDemo1</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 1.建立一个socket</span>        <span class="hljs-keyword">try</span> &#123;            DatagramSocket datagramSocket = <span class="hljs-keyword">new</span> DatagramSocket();            <span class="hljs-comment">// 2.发送包</span>            String message = <span class="hljs-string">&quot;你好&quot;</span>;            <span class="hljs-comment">// 3.发送的人</span>            InetAddress localhost = InetAddress.getByName(<span class="hljs-string">&quot;localhost&quot;</span>);            <span class="hljs-keyword">int</span> port = <span class="hljs-number">9090</span>;            <span class="hljs-comment">// 参数：数据长度，起始，发送给谁</span>            DatagramPacket datagramPacket = <span class="hljs-keyword">new</span> DatagramPacket(message.getBytes(),<span class="hljs-number">0</span>,message.getBytes().length,localhost,port);            datagramSocket.send(datagramPacket);            <span class="hljs-comment">// 4.关闭流</span>            datagramSocket.close();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的异常</title>
    <link href="/2020/12/01/%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/12/01/%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h1><p>在软件运行的过程中，非常可能遇到异常的情况，英文为exception</p><p>比如：文件找不到，网络连接失败，非法参数</p><p>当然与之对应的成为error，是一种错误，要与异常区分开来，一般不是程序员造成的。</p><h1 id="异常的体系结构"><a href="#异常的体系结构" class="headerlink" title="异常的体系结构"></a>异常的体系结构</h1><p>java把异常作为一个对象来处理，并定义了一个基类java.lang.Throwable作为所有异常的超类。</p><p>在java中的api已经定义了许多异常类，这些异常分为两大类，就是上面我提及到的Error错误与Exception异常</p><p><img src="image-20201201205648154.png" alt="image-20201201205648154"></p><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>从上图可以看到Error中，有一分支是虚拟机运行错误，就比如我们常见的栈溢出StackOverFlowError（互相调用）或者内存溢出OutOfMemoryError（内存泄漏），这些错误发生时，java虚拟机会直接停止线程，也就是程序停止运行。</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>当然在exception中有一个特别热重要的子类就是RuntimeException（运行时异常），包含数组下标越界（），空指针异常（NullPointerException），算术异常（ArithmeticException），寻找不到类（ClassNotFoundException），这些异常不是编译型异常，所以可以不用进行处理。</p><h1 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h1><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h2><p>通俗的来说，try就相当于一个监控的区域，在监管当前的代码块里会出现的异常。catch相当于匹配类型，因为异常会有很多类型（类），同时我们无法预知会发生什么样的异常，所以可能会很多块catch。最后finally相当于兜底，用于资源的关闭，防止出现异常之后，对资源进行浪费。</p><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> Test</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:09</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;        <span class="hljs-keyword">try</span> &#123;            System.out.println(a/b);        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;            System.out.println(<span class="hljs-string">&quot;被除数不能为零&quot;</span>);        &#125;<span class="hljs-keyword">finally</span> &#123;            System.out.println(<span class="hljs-string">&quot;最终会被执行&quot;</span>);        &#125;    &#125;&#125;</code></pre><p>当然catch里面的类型，只要是Throwable的子类即可。无论异常，或者错误，都可。</p><pre><code class="hljs php"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestTypeOfCatch</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:15</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestTypeOfCatch</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;        <span class="hljs-keyword">try</span> &#123;            System.out.println(a/b);        &#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Throwable</span> t)&#123;            System.out.println(<span class="hljs-string">&quot;异常发生了&quot;</span>);        &#125;<span class="hljs-keyword">finally</span> &#123;            System.out.println(<span class="hljs-string">&quot;最终执行&quot;</span>);        &#125;    &#125;&#125;</code></pre><p>还有想说的，就是最大的要捕获的类型要写在最下面，因为是一个层层递进的过程。如果第一个捕获到了，那么下面的catch就不会被执行了。那么现在这个版本会直接报错，说明你的顺序写的不正确。</p><p><img src="image-20201201211936676.png" alt="image-20201201211936676"></p><p>当然并列的就没有什么问题</p><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><span class="hljs-comment"> * @Classname TestCatchOrder</span><span class="hljs-comment"> * @Description TODO</span><span class="hljs-comment"> * @Date 2020/12/1 21:18</span><span class="hljs-comment"> * @Created by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCatchOrder</span> &#123;</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;        <span class="hljs-keyword">try</span> &#123;            System.out.<span class="hljs-built_in">println</span>(a/b);        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;捕获Throwable类型&quot;</span>);        &#125;<span class="hljs-keyword">catch</span> (NullPointerException e)&#123;            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;捕获了Exception类型&quot;</span>);        &#125;    &#125;&#125;</code></pre><h2 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h2><p>当然，我们也可以用throw来进行异常的捕获，通常我们在方法中throw异常</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestOfThrow</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:23</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOfThrow</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">new</span> TestOfThrow().testThrow();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testThrow</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span> )&#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException(<span class="hljs-string">&quot;除数不能为0&quot;</span>);        &#125;        System.out.println(a/b);    &#125;&#125;</code></pre><h2 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h2><p>在方法里面抛出异常是throw，在方法上是throws</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.generic.NEW;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> TestOfThrow</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:23</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestOfThrow</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">new</span> TestOfThrow().testThrow();        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;            System.out.println(e);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testThrow</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArithmeticException</span>&#123;        <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;        System.out.println(a/b);    &#125;&#125;</code></pre><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>使用java内置的异常类可以描述在编程时，出现的大部分异常情况，除此之外，用户还可以自定义异常，需要用户自定义类继承Exception类即可。</p><p>步骤如下：</p><p>1）创建自定义异常</p><p>2）在方法中throw关键字抛出异常</p><p>3）如果在当前抛出异常的方法中要处理异常，可以用try-catch语句进行处理，否则在方法的声明处通过throws关键字指明要抛出的方法调用者的异常，继续进行下一步</p><p>4）在出现异常方法的调用者中捕获异常</p><h2 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> MmzException</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:31</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MmzException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;    <span class="hljs-comment">//传递数字，如果数字大于10抛出异常</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> number;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MmzException</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span> </span>&#123;        <span class="hljs-keyword">this</span>.number = number;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MmzException&#123;&quot;</span> +                <span class="hljs-string">&quot;number=&quot;</span> + number +                <span class="hljs-string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</code></pre><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Classname</span> MmzTest</span><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/12/1 21:35</span><span class="hljs-comment"> * <span class="hljs-doctag">@Created</span> by mmz</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MmzTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> <span class="hljs-keyword">throws</span> MmzException </span>&#123;        <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">10</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MmzException(a);        &#125;        System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-keyword">try</span> &#123;            test(<span class="hljs-number">11</span>);        &#125; <span class="hljs-keyword">catch</span> (MmzException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h1 id="异常小结"><a href="#异常小结" class="headerlink" title="异常小结"></a>异常小结</h1><p>处理运行时异常，采用逻辑去合理规避同时辅助try-catch处理</p><p>在多重catch块后面，可以加一个catch（Exception  e）来处理可能会被遗漏的异常</p><p>对于不确定的代码，也可以加上try-catch，处理潜在的异常</p><p>尽量去处理异常，切忌简单的调用e.printStackTrace（）去打印异常</p><p>尽量添加finally语句去释放占用的资源</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-单独图标组件开发</title>
    <link href="/2020/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%8D%95%E7%8B%AC%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <url>/2020/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%8D%95%E7%8B%AC%E5%9B%BE%E6%A0%87%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="停车场商家销售统计（横向柱状图）"><a href="#停车场商家销售统计（横向柱状图）" class="headerlink" title="停车场商家销售统计（横向柱状图）"></a>停车场商家销售统计（横向柱状图）</h1><h2 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h2><p>seller.vue</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    seller组件  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">  name: <span class="hljs-string">&#x27;Seller&#x27;</span></span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><p>sellerpage.vue</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">seller</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">seller</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">import</span> Seller <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Seller&#x27;</span></span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">  name: <span class="hljs-string">&#x27;SellerPage&#x27;</span>,</span>  components: &#123;    seller: Seller  &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h2 id="布局结构"><a href="#布局结构" class="headerlink" title="布局结构"></a>布局结构</h2><p>在css下面的global.less中</p><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>,<span class="hljs-selector-id">#app</span>&#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;  <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-page</span>&#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-container</span>&#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-chart</span>&#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;</code></pre><h2 id="图标基本功能实现"><a href="#图标基本功能实现" class="headerlink" title="图标基本功能实现"></a>图标基本功能实现</h2><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com-container&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com-chart&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;seller&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 100%&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> echarts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts&#x27;</span>)</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">  name: <span class="hljs-string">&#x27;Seller&#x27;</span>,</span>  data () &#123;<span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">      chartInstance: <span class="hljs-literal">null</span>,</span><span class="javascript">      allData: <span class="hljs-literal">null</span></span>    &#125;  &#125;,  mounted () &#123;<span class="javascript">    <span class="hljs-built_in">this</span>.initChart()</span><span class="javascript">    <span class="hljs-built_in">this</span>.getData()</span>  &#125;,  methods: &#123;<span class="javascript">    <span class="hljs-comment">// 初始化echartsInstance对象</span></span>    initChart () &#123;<span class="javascript">      <span class="hljs-keyword">const</span> chart = <span class="hljs-built_in">this</span>.$refs.seller</span><span class="javascript">      <span class="hljs-built_in">this</span>.chartInstance = echarts.init(chart)</span><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;初始化echarts&#x27;</span>)</span>    &#125;,<span class="javascript">    <span class="hljs-comment">// 获取服务器的数据</span></span><span class="javascript">    <span class="hljs-keyword">async</span> getData () &#123;</span><span class="javascript">      <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: ret&#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$axios.get(<span class="hljs-string">&#x27;http://127.0.0.1:8888/api/seller&#x27;</span>)</span><span class="javascript">      <span class="hljs-built_in">this</span>.allData = ret</span><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.allData)</span><span class="javascript">      <span class="hljs-built_in">this</span>.updateChart()</span>    &#125;,<span class="javascript">    <span class="hljs-comment">// 更新图表</span></span>    updateChart () &#123;<span class="javascript">      <span class="hljs-keyword">const</span> sellerNames = <span class="hljs-built_in">this</span>.allData.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> item.name</span>      &#125;)<span class="javascript">      <span class="hljs-keyword">const</span> sellerValues = <span class="hljs-built_in">this</span>.allData.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> item.value</span>      &#125;)<span class="javascript">      <span class="hljs-keyword">const</span> option = &#123;</span>        xAxis: &#123;<span class="javascript">          type: <span class="hljs-string">&#x27;value&#x27;</span></span>        &#125;,        yAxis: &#123;<span class="javascript">          type: <span class="hljs-string">&#x27;category&#x27;</span>,</span>          data: sellerNames        &#125;,        series: [          &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span>            data: sellerValues          &#125;        ]      &#125;<span class="javascript">      <span class="hljs-built_in">this</span>.chartInstance.setOption(option)</span>    &#125;  &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">  <span class="hljs-selector-class">.com-container</span> &#123;</span>    width: 100%;    height: 100%;    overflow: hidden;  &#125;<span class="css">  <span class="hljs-selector-class">.com-chart</span> &#123;</span>    width: 100%;    height: 100%;    overflow: hidden;  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h3 id="initChart"><a href="#initChart" class="headerlink" title="initChart"></a>initChart</h3><p>初始化</p><h3 id="getData"><a href="#getData" class="headerlink" title="getData"></a>getData</h3><p>获取数据</p><h3 id="updateChart"><a href="#updateChart" class="headerlink" title="updateChart"></a>updateChart</h3><p>更新数据设置option</p><h2 id="动态刷新的功能"><a href="#动态刷新的功能" class="headerlink" title="动态刷新的功能"></a>动态刷新的功能</h2><h3 id="数据的处理"><a href="#数据的处理" class="headerlink" title="数据的处理"></a>数据的处理</h3><h4 id="从小到大排序"><a href="#从小到大排序" class="headerlink" title="从小到大排序"></a>从小到大排序</h4><p><img src="image-20201124151247006.png" alt="image-20201124151247006"></p><h4 id="五个元素为一页-每隔三秒刷新一次"><a href="#五个元素为一页-每隔三秒刷新一次" class="headerlink" title="五个元素为一页 每隔三秒刷新一次"></a>五个元素为一页 每隔三秒刷新一次</h4><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com-container&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com-chart&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;seller&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%;height: 100%&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">var</span> echarts = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;echarts&#x27;</span>)</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><span class="javascript">  name: <span class="hljs-string">&#x27;Seller&#x27;</span>,</span>  data () &#123;<span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">      chartInstance: <span class="hljs-literal">null</span>,</span><span class="javascript">      allData: <span class="hljs-literal">null</span>,</span><span class="javascript">      currentPage: <span class="hljs-number">1</span>, <span class="hljs-comment">// 当前显示的页数</span></span><span class="javascript">      totalPage: <span class="hljs-number">0</span> <span class="hljs-comment">// 一共有多少页</span></span>    &#125;  &#125;,  mounted () &#123;<span class="javascript">    <span class="hljs-built_in">this</span>.initChart()</span><span class="javascript">    <span class="hljs-built_in">this</span>.getData()</span>  &#125;,  methods: &#123;<span class="javascript">    <span class="hljs-comment">// 初始化echartsInstance对象</span></span>    initChart () &#123;<span class="javascript">      <span class="hljs-keyword">const</span> chart = <span class="hljs-built_in">this</span>.$refs.seller</span><span class="javascript">      <span class="hljs-built_in">this</span>.chartInstance = echarts.init(chart)</span><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;初始化echarts&#x27;</span>)</span>    &#125;,<span class="javascript">    <span class="hljs-comment">// 获取服务器的数据</span></span><span class="javascript">    <span class="hljs-keyword">async</span> getData () &#123;</span><span class="javascript">      <span class="hljs-keyword">const</span> &#123;<span class="hljs-attr">data</span>: ret&#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$axios.get(<span class="hljs-string">&#x27;http://127.0.0.1:8888/api/seller&#x27;</span>)</span><span class="javascript">      <span class="hljs-built_in">this</span>.allData = ret</span><span class="javascript">      <span class="hljs-comment">// 对数组进行排序</span></span><span class="javascript">      <span class="hljs-built_in">this</span>.allData.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> a.value - b.value</span>      &#125;)<span class="javascript">      <span class="hljs-comment">// 每五个元素显示一页</span></span><span class="javascript">      <span class="hljs-built_in">this</span>.totalPage = <span class="hljs-built_in">this</span>.allData.length % <span class="hljs-number">5</span> === <span class="hljs-number">0</span> ? <span class="hljs-built_in">this</span>.allData.length / <span class="hljs-number">5</span> : <span class="hljs-built_in">this</span>.allData.length / <span class="hljs-number">5</span> + <span class="hljs-number">1</span></span><span class="javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.allData)</span><span class="javascript">      <span class="hljs-built_in">this</span>.updateChart()</span><span class="javascript">      <span class="hljs-built_in">this</span>.startInterval()</span>    &#125;,<span class="javascript">    <span class="hljs-comment">// 更新图表</span></span>    updateChart () &#123;<span class="javascript">      <span class="hljs-keyword">const</span> start = (<span class="hljs-built_in">this</span>.currentPage - <span class="hljs-number">1</span>) * <span class="hljs-number">5</span></span><span class="javascript">      <span class="hljs-keyword">const</span> end = <span class="hljs-built_in">this</span>.currentPage * <span class="hljs-number">5</span></span><span class="javascript">      <span class="hljs-keyword">const</span> showData = <span class="hljs-built_in">this</span>.allData.slice(start, end)</span><span class="javascript">      <span class="hljs-keyword">const</span> sellerNames = showData.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> item.name</span>      &#125;)<span class="javascript">      <span class="hljs-keyword">const</span> sellerValues = showData.map(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-keyword">return</span> item.value</span>      &#125;)<span class="javascript">      <span class="hljs-keyword">const</span> option = &#123;</span>        xAxis: &#123;<span class="javascript">          type: <span class="hljs-string">&#x27;value&#x27;</span></span>        &#125;,        yAxis: &#123;<span class="javascript">          type: <span class="hljs-string">&#x27;category&#x27;</span>,</span>          data: sellerNames        &#125;,        series: [          &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span>            data: sellerValues          &#125;        ]      &#125;<span class="javascript">      <span class="hljs-built_in">this</span>.chartInstance.setOption(option)</span>    &#125;,<span class="javascript">    <span class="hljs-comment">// 定时器</span></span>    startInterval () &#123;<span class="javascript">      <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><span class="javascript">        <span class="hljs-built_in">this</span>.currentPage++</span><span class="javascript">        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.currentPage &gt; <span class="hljs-built_in">this</span>.totalPage) &#123;</span><span class="javascript">          <span class="hljs-built_in">this</span>.currentPage = <span class="hljs-number">1</span></span>        &#125;<span class="javascript">        <span class="hljs-built_in">this</span>.updateChart()</span>      &#125;, 3000)    &#125;  &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">  <span class="hljs-selector-class">.com-container</span> &#123;</span>    width: 100%;    height: 100%;    overflow: hidden;  &#125;<span class="css">  <span class="hljs-selector-class">.com-chart</span> &#123;</span>    width: 100%;    height: 100%;    overflow: hidden;  &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h2 id="ui的调整"><a href="#ui的调整" class="headerlink" title="ui的调整"></a>ui的调整</h2><h3 id="主题的使用"><a href="#主题的使用" class="headerlink" title="主题的使用"></a>主题的使用</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>parking-lot<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; margin: 0px;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./static/lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./static/theme/chalk.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="整个的css文件"><a href="#整个的css文件" class="headerlink" title="整个的css文件"></a>整个的css文件</h3><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-id">#app</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-page</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-container</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-class">.com-chart</span> &#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;<span class="hljs-selector-tag">canvas</span> &#123;  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;&#125;<span class="hljs-selector-class">.com-container</span> &#123;  <span class="hljs-attribute">position</span>: relative;&#125;<span class="hljs-selector-class">.com-management</span>&#123;  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;  <span class="hljs-attribute">overflow</span>: hidden;&#125;</code></pre><h3 id="图表的标题"><a href="#图表的标题" class="headerlink" title="图表的标题"></a>图表的标题</h3><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> &#123;  <span class="hljs-attr">text:</span> <span class="hljs-string">&#x27;   车场车位使用状况&#x27;</span>,  <span class="hljs-attr">textStyle:</span> &#123;    <span class="hljs-attr">fontSize:</span> <span class="hljs-number">66</span>  &#125;,  <span class="hljs-attr">left:</span> <span class="hljs-number">20</span>,  <span class="hljs-attr">top:</span> <span class="hljs-number">20</span>&#125;<span class="hljs-string">,</span></code></pre><h3 id="坐标轴的位置"><a href="#坐标轴的位置" class="headerlink" title="坐标轴的位置"></a>坐标轴的位置</h3><pre><code class="hljs less"><span class="hljs-attribute">grid</span>: &#123;  <span class="hljs-attribute">top</span>: <span class="hljs-string">&#x27;20%&#x27;</span>,  <span class="hljs-attribute">left</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,  <span class="hljs-attribute">right</span>: <span class="hljs-string">&#x27;6%&#x27;</span>,  <span class="hljs-attribute">bottom</span>: <span class="hljs-string">&#x27;3%&#x27;</span>,  <span class="hljs-attribute">containLabel</span>: true&#125;,</code></pre><h3 id="柱状图条目"><a href="#柱状图条目" class="headerlink" title="柱状图条目"></a>柱状图条目</h3><pre><code class="hljs yaml"><span class="hljs-attr">tooltip:</span> &#123;  <span class="hljs-attr">trigger:</span> <span class="hljs-string">&#x27;axis&#x27;</span>,  <span class="hljs-attr">axisPointer:</span> &#123;    <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;line&#x27;</span>,    <span class="hljs-attr">z:</span> <span class="hljs-number">0</span>,    <span class="hljs-attr">lineStyle:</span> &#123;      <span class="hljs-attr">width:</span> <span class="hljs-number">66</span>,      <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;#2D3443&#x27;</span>    &#125;  &#125;&#125;<span class="hljs-string">,</span><span class="hljs-attr">series:</span> [  &#123;    <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;bar&#x27;</span>,    <span class="hljs-attr">data:</span> <span class="hljs-string">sellerValues</span>,    <span class="hljs-attr">barWidth:</span> <span class="hljs-number">66</span>,    <span class="hljs-attr">label:</span> &#123;      <span class="hljs-attr">show:</span> <span class="hljs-literal">true</span>,      <span class="hljs-attr">position:</span> <span class="hljs-string">&#x27;right&#x27;</span>,      <span class="hljs-attr">textStyle:</span> &#123;        <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;white&#x27;</span>      &#125;    &#125;,    <span class="hljs-attr">itemStyle:</span> &#123;      <span class="hljs-attr">barBorderRadius:</span> [<span class="hljs-number">0</span>, <span class="hljs-number">33</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>],      <span class="hljs-attr">color:</span> <span class="hljs-string">new</span> <span class="hljs-string">this.$echarts.graphic.LinearGradient(0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, [        &#123;          <span class="hljs-attr">offset:</span> <span class="hljs-number">0</span>,          <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;#5052EE&#x27;</span>        &#125;,        &#123;          <span class="hljs-attr">offset:</span> <span class="hljs-number">1</span>,          <span class="hljs-attr">color:</span> <span class="hljs-string">&#x27;#AB6ee5&#x27;</span>        &#125;      ]<span class="hljs-string">)</span>    &#125;  &#125;]</code></pre><h3 id="拆分图表的option"><a href="#拆分图表的option" class="headerlink" title="拆分图表的option"></a>拆分图表的option</h3><p>相当于在初始化的过程中设置一次option，没有数据的</p><p>在updateOption中，在第二次获取数据的时候，在重新设置option即可。</p><h3 id="分辨率的适配"><a href="#分辨率的适配" class="headerlink" title="分辨率的适配"></a>分辨率的适配</h3><p>监听窗口大小</p><pre><code class="hljs kotlin">window.addEventListener(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-keyword">this</span>.screenAdapter)<span class="hljs-keyword">this</span>.screenAdapter()</code></pre><pre><code class="hljs yaml"><span class="hljs-string">screenAdapter</span> <span class="hljs-string">()</span> &#123;  <span class="hljs-string">const</span> <span class="hljs-string">titleFontsize</span> <span class="hljs-string">=</span> <span class="hljs-string">this.$refs.seller.offsetWidth</span> <span class="hljs-string">/</span> <span class="hljs-number">100</span> <span class="hljs-string">*</span> <span class="hljs-number">3.6</span>  <span class="hljs-string">const</span> <span class="hljs-string">adapterOption</span> <span class="hljs-string">=</span> &#123;    <span class="hljs-attr">title:</span> &#123;      <span class="hljs-attr">textStyle:</span> &#123;        <span class="hljs-attr">fontSize:</span> <span class="hljs-number">66</span>      &#125;    &#125;,    <span class="hljs-attr">tooltip:</span> &#123;      <span class="hljs-attr">axisPointer:</span> &#123;        <span class="hljs-attr">lineStyle:</span> &#123;          <span class="hljs-attr">width:</span> <span class="hljs-string">titleFontsize</span>        &#125;      &#125;    &#125;,    <span class="hljs-attr">series:</span> [      &#123;        <span class="hljs-attr">barWidth:</span> <span class="hljs-string">titleFontsize</span>,        <span class="hljs-attr">itemStyle:</span> &#123;          <span class="hljs-attr">barBorderRadius:</span> [<span class="hljs-number">0</span>, <span class="hljs-string">titleFontsize</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span>, <span class="hljs-string">titleFontsize</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span>, <span class="hljs-number">0</span>],        &#125;      &#125;    ]  &#125;  <span class="hljs-string">this.chartInstance.setOption(adapterOption)</span>  <span class="hljs-string">this.chartInstance.resize()</span>&#125;<span class="hljs-string">,</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-前端项目创建准备</title>
    <link href="/2020/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%87%86%E5%A4%87/"/>
    <url>/2020/11/23/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="安装脚手架工具"><a href="#安装脚手架工具" class="headerlink" title="安装脚手架工具"></a>安装脚手架工具</h1><p> <code>npm install -g @vue/cli</code></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p><code>vue create name</code></p><h1 id="删除无关代码"><a href="#删除无关代码" class="headerlink" title="删除无关代码"></a>删除无关代码</h1><p>main.js</p><p>app.vue</p><p>helloworld.vue</p><p>home.vue</p><h1 id="引入静态资源"><a href="#引入静态资源" class="headerlink" title="引入静态资源"></a>引入静态资源</h1><h1 id="引入echarts"><a href="#引入echarts" class="headerlink" title="引入echarts"></a>引入echarts</h1><p>在main.js中引入</p><pre><code class="hljs elm"><span class="hljs-type">Vue</span>.proto<span class="hljs-keyword">type</span>.$echarts = window.echarts</code></pre><p>在index.html中引入</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%;&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>parking-lot<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height: 100%; margin: 0px;&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src/static/lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h1 id="引入axios"><a href="#引入axios" class="headerlink" title="引入axios"></a>引入axios</h1><pre><code class="hljs clean"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span></code></pre><pre><code class="hljs elm"><span class="hljs-type">Vue</span>.proto<span class="hljs-keyword">type</span>.$axios = axios</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-高级使用动画相关</title>
    <link href="/2020/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3/"/>
    <url>/2020/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8%E5%8A%A8%E7%94%BB%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h1><p>在ECharts获取数据中，数据没有呈现出来的时候，ECharts提供的一个更友好的效果</p><p>ECharts已经内置好了加载数据的动画，我们只需要在合适的时机显示或者隐藏即可</p><h2 id="显示-隐藏加载动画"><a href="#显示-隐藏加载动画" class="headerlink" title="显示/隐藏加载动画"></a>显示/隐藏加载动画</h2><pre><code class="hljs arcade">mCharts.showLoading() <span class="hljs-comment">// 在获取数据之前, 显示加载动画</span>$.get(<span class="hljs-string">&#x27;data/test_data.json&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;    mCharts.hideLoading() <span class="hljs-comment">// 当服务器数据获取成功之后, 隐藏加载动画</span></code></pre><h1 id="增量动画"><a href="#增量动画" class="headerlink" title="增量动画"></a>增量动画</h1><p>数据又发生了变化，那么就会出现增量动画</p><pre><code class="hljs haxe"><span class="hljs-keyword">var</span> btnModify = document.querySelector(<span class="hljs-string">&#x27;#modify&#x27;</span>)btnModify.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> </span>() &#123;    <span class="hljs-keyword">var</span> <span class="hljs-keyword">new</span><span class="hljs-type">YDataArr</span> = [<span class="hljs-number">68</span>, <span class="hljs-number">32</span>, <span class="hljs-number">99</span>, <span class="hljs-number">77</span>, <span class="hljs-number">94</span>, <span class="hljs-number">80</span>, <span class="hljs-number">72</span>, <span class="hljs-number">86</span>]    <span class="hljs-comment">// setOption 可以设置多次</span>    <span class="hljs-comment">// 新的option 和 旧的option</span>    <span class="hljs-comment">// 新旧option的关系并不是相互覆盖的关系, 是相互整合的关系</span>    <span class="hljs-comment">// 我们在设置新的option的时候, 只需要考虑到变化的部分就可以</span>    <span class="hljs-keyword">var</span> option = &#123;        series: <span class="hljs-type"></span>[            &#123;                data: <span class="hljs-type">newYDataArr</span><span class="hljs-type">            </span>&#125;        ]    &#125;    mCharts.setOption(option)&#125;</code></pre><p>option可以设置很多回</p><p>新的option和旧的option并不是相互覆盖的关系，而是整合的关系</p><p>设置的时候，只需要考虑变化的部分就可以了</p><p>echarts会找到两组数据之间的差异然后通过合适的动画去表现数据的变化</p><h1 id="动画常用配置"><a href="#动画常用配置" class="headerlink" title="动画常用配置"></a>动画常用配置</h1><h2 id="开启动画"><a href="#开启动画" class="headerlink" title="开启动画"></a>开启动画</h2><p>animation：true</p><h2 id="动画时长"><a href="#动画时长" class="headerlink" title="动画时长"></a>动画时长</h2><p>animationDuration：5000</p><h2 id="缓慢动画"><a href="#缓慢动画" class="headerlink" title="缓慢动画"></a>缓慢动画</h2><p>animationEasing：‘bounceOut’</p><h2 id="动画阈值"><a href="#动画阈值" class="headerlink" title="动画阈值"></a>动画阈值</h2><p>animationThreshold：8</p><p>大于这个这个阈值会关闭动画</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">    <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;闰土&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;茅台&#x27;</span>, <span class="hljs-string">&#x27;二妞&#x27;</span>, <span class="hljs-string">&#x27;大强&#x27;</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">88</span>, <span class="hljs-number">92</span>, <span class="hljs-number">63</span>, <span class="hljs-number">77</span>, <span class="hljs-number">94</span>, <span class="hljs-number">80</span>, <span class="hljs-number">72</span>, <span class="hljs-number">86</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> option = &#123;</span><span class="javascript">        animation: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 控制动画是否开启</span></span><span class="javascript">        <span class="hljs-comment">// animationDuration: 7000, // 动画的时长, 它是以毫秒为单位</span></span><span class="javascript">        animationDuration: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">arg</span>)</span>&#123;</span><span class="javascript">            <span class="hljs-built_in">console</span>.log(arg)</span><span class="javascript">            <span class="hljs-keyword">return</span> <span class="hljs-number">2000</span> * arg</span>        &#125;,<span class="javascript">        animationEasing: <span class="hljs-string">&#x27;bounceOut&#x27;</span>, <span class="hljs-comment">// 缓动动画</span></span><span class="javascript">        animationThreshold: <span class="hljs-number">7</span>, <span class="hljs-comment">// 动画元素的阈值</span></span>        xAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;category&#x27;</span>,</span>            data: xDataArr        &#125;,        yAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;value&#x27;</span></span>        &#125;,        series: [            &#123;<span class="javascript">                type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span>                data: yDataArr,                markPoint: &#123;                    data: [                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;最大值&#x27;</span></span>                        &#125;,                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;最小值&#x27;</span></span>                        &#125;                    ]                &#125;,                markLine: &#123;                    data: [                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;average&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;平均值&#x27;</span></span>                        &#125;                    ]                &#125;,                label: &#123;<span class="javascript">                    show: <span class="hljs-literal">true</span>,</span>                    rotate: 60                &#125;,<span class="javascript">                barWidth: <span class="hljs-string">&#x27;30%&#x27;</span></span>            &#125;        ]    &#125;;    mCharts.setOption(option)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-高级使用显示相关</title>
    <link href="/2020/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/21/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h1><p>主要包括，主题，调色盘，样式，自适应</p><h1 id="内置主题"><a href="#内置主题" class="headerlink" title="内置主题"></a>内置主题</h1><p>ECharts主要内置了两套主题，light和dark</p><p>在初始化对象方法init可以指明</p><h2 id="light"><a href="#light" class="headerlink" title="light"></a>light</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-comment">// 1.在线编辑主题 https://www.echartsjs.com/theme-builder/</span></span><span class="javascript">    <span class="hljs-comment">// 2.下载主题的js文件</span></span><span class="javascript">    <span class="hljs-comment">// 3.在html中导入js文件</span></span><span class="javascript">    <span class="hljs-comment">// 4.在init方法中指明主题的名称</span></span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>),<span class="hljs-string">&#x27;light&#x27;</span>)</span><span class="javascript">    <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;闰土&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;茅台&#x27;</span>, <span class="hljs-string">&#x27;二妞&#x27;</span>, <span class="hljs-string">&#x27;大强&#x27;</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">88</span>, <span class="hljs-number">92</span>, <span class="hljs-number">63</span>, <span class="hljs-number">77</span>, <span class="hljs-number">94</span>, <span class="hljs-number">80</span>, <span class="hljs-number">72</span>, <span class="hljs-number">86</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> option = &#123;</span>        xAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;category&#x27;</span>,</span>            data: xDataArr        &#125;,        yAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;value&#x27;</span></span>        &#125;,        series: [            &#123;<span class="javascript">                type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span>                data: yDataArr,                markPoint: &#123;                    data: [                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;最大值&#x27;</span></span>                        &#125;,                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;最小值&#x27;</span></span>                        &#125;                    ]                &#125;,                markLine: &#123;                    data: [                        &#123;<span class="javascript">                            type: <span class="hljs-string">&#x27;average&#x27;</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;平均值&#x27;</span></span>                        &#125;                    ]                &#125;,                label: &#123;<span class="javascript">                    show: <span class="hljs-literal">true</span>,</span>                    rotate: 60                &#125;,<span class="javascript">                barWidth: <span class="hljs-string">&#x27;30%&#x27;</span></span>            &#125;        ]    &#125;;    mCharts.setOption(option)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201121151354370.png" alt="image-20201121151354370"></p><h2 id="dark"><a href="#dark" class="headerlink" title="dark"></a>dark</h2><pre><code class="hljs dart"><span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&quot;div&quot;</span>),<span class="hljs-string">&#x27;dark&#x27;</span>)</code></pre><p><img src="image-20201121151415052.png" alt="image-20201121151415052"></p><h1 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h1><p>1）在主题编辑器里面编辑主题</p><p>2）下载主题，是一个js文件</p><p>3）引入js文件</p><p>4）在init使用自定义主题</p><h1 id="调色盘"><a href="#调色盘" class="headerlink" title="调色盘"></a>调色盘</h1><p>他是一组颜色，图形，系列都会自动从其中选择颜色</p><h2 id="主题调色盘"><a href="#主题调色盘" class="headerlink" title="主题调色盘"></a>主题调色盘</h2><p><img src="image-20201121152114556.png" alt="image-20201121152114556"></p><h2 id="全局调色盘"><a href="#全局调色盘" class="headerlink" title="全局调色盘"></a>全局调色盘</h2><p>option:{</p><p>color: [],</p><p>}</p><p> 会覆盖主题的调色盘</p><h2 id="局部调色盘"><a href="#局部调色盘" class="headerlink" title="局部调色盘"></a>局部调色盘</h2><p>调色盘采用的原则就是就近原则</p><pre><code class="hljs less"><span class="hljs-attribute">series</span>: [    &#123;        <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,        <span class="hljs-attribute">data</span>: pieData,        <span class="hljs-attribute">color</span>: [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>]    &#125;]</code></pre><h1 id="颜色渐变"><a href="#颜色渐变" class="headerlink" title="颜色渐变"></a>颜色渐变</h1><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">    <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>, <span class="hljs-string">&#x27;闰土&#x27;</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;茅台&#x27;</span>, <span class="hljs-string">&#x27;二妞&#x27;</span>, <span class="hljs-string">&#x27;大强&#x27;</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">88</span>, <span class="hljs-number">92</span>, <span class="hljs-number">63</span>, <span class="hljs-number">77</span>, <span class="hljs-number">94</span>, <span class="hljs-number">80</span>, <span class="hljs-number">72</span>, <span class="hljs-number">86</span>]</span><span class="javascript">    <span class="hljs-keyword">var</span> option = &#123;</span>        xAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;category&#x27;</span>,</span>            data: xDataArr        &#125;,        yAxis: &#123;<span class="javascript">            type: <span class="hljs-string">&#x27;value&#x27;</span></span>        &#125;,        series: [            &#123;<span class="javascript">                type: <span class="hljs-string">&#x27;bar&#x27;</span>,</span>                data: yDataArr,                itemStyle:&#123;                    color:&#123;<span class="javascript">                        type:<span class="hljs-string">&#x27;linear&#x27;</span>,<span class="hljs-comment">//线性渐变</span></span>                        x:0,                        y:0,                        x2:0,                        y2:1,                        colorStops:[                            &#123;                                offset:0,<span class="javascript">                                color:<span class="hljs-string">&#x27;red&#x27;</span></span>                            &#125;,                            &#123;                                offset:1,<span class="javascript">                                color: <span class="hljs-string">&#x27;blue&#x27;</span></span>                            &#125;                        ]                    &#125;                &#125;            &#125;        ]    &#125;    mCharts.setOption(option)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201121153221098.png" alt="image-20201121153221098"></p><h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><pre><code class="hljs less"><span class="hljs-attribute">color</span>:&#123;    <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;radial&#x27;</span>,    <span class="hljs-attribute">x</span>:<span class="hljs-number">0.5</span>,    <span class="hljs-attribute">y</span>:<span class="hljs-number">0.5</span>,    <span class="hljs-attribute">r</span>:<span class="hljs-number">0.5</span>,    <span class="hljs-attribute">colorStops</span>:[        &#123;          <span class="hljs-attribute">offset</span>:<span class="hljs-number">0</span>,            <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>        &#125;,        &#123;            <span class="hljs-attribute">offset</span>: <span class="hljs-number">1</span>,            <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201121153410521.png" alt="image-20201121153410521"></p><h1 id="样式控制"><a href="#样式控制" class="headerlink" title="样式控制"></a>样式控制</h1><h2 id="直接样式"><a href="#直接样式" class="headerlink" title="直接样式"></a>直接样式</h2><p>itemStyle，textStyle，lineStyle，areaStyle，label</p><h3 id="itemStyle"><a href="#itemStyle" class="headerlink" title="itemStyle"></a>itemStyle</h3><p>可以控制一块区域</p><pre><code class="hljs less"><span class="hljs-attribute">itemStyle</span>: &#123; <span class="hljs-comment">// 控制淘宝这一区域的样式</span>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span>&#125;,</code></pre><h3 id="textStyle"><a href="#textStyle" class="headerlink" title="textStyle"></a>textStyle</h3><p>在title下面</p><pre><code class="hljs less"><span class="hljs-attribute">title</span>: &#123;    <span class="hljs-attribute">text</span>: <span class="hljs-string">&#x27;饼图的测试&#x27;</span>,    <span class="hljs-attribute">textStyle</span>: &#123; <span class="hljs-comment">// 控制标题的文字样式</span>        <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span>    &#125;&#125;,</code></pre><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><p>文字</p><pre><code class="hljs css"><span class="hljs-selector-tag">label</span>: &#123;    <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;green&#x27;</span>&#125;,</code></pre><h2 id="高亮样式"><a href="#高亮样式" class="headerlink" title="高亮样式"></a>高亮样式</h2><p>用emphasis中包裹以上的style</p><pre><code class="hljs css"><span class="hljs-selector-tag">emphasis</span>: &#123;    <span class="hljs-attribute">itemStyle</span>: &#123; // 控制淘宝这一区域的样式        color: <span class="hljs-string">&#x27;pink&#x27;</span>    &#125;,    <span class="hljs-selector-tag">label</span>: &#123;        <span class="hljs-attribute">color</span>: <span class="hljs-string">&#x27;black&#x27;</span>    &#125;&#125;</code></pre><p>优先级最高</p><h1 id="自适应"><a href="#自适应" class="headerlink" title="自适应"></a>自适应</h1><p>当浏览器大小发生变化的时候，如果想让图表也随之适配变化</p><p>1）监听窗口大小变化事件</p><p>2）在事件处理函数中调用ECharts实例对象的resize即可</p><pre><code class="hljs awk">window.onresize = <span class="hljs-keyword">function</span>()&#123;    <span class="hljs-regexp">//</span> console.log(<span class="hljs-string">&#x27;window.onresize...&#x27;</span>)    <span class="hljs-regexp">//</span> 调用echarts实例对象的resize方法    mCharts.resize()&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-仪表盘</title>
    <link href="/2020/11/19/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E4%BB%AA%E8%A1%A8%E7%9B%98/"/>
    <url>/2020/11/19/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E4%BB%AA%E8%A1%A8%E7%9B%98/</url>
    
    <content type="html"><![CDATA[<h1 id="仪表盘"><a href="#仪表盘" class="headerlink" title="仪表盘"></a>仪表盘</h1><p>主要用于在进度的把控以及数据范围的监测</p><h1 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h1><p>echarts的最基本的代码结构</p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>series下面的data:[{value:97}]</p><h2 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h2><p>在series下面设置type：gauge</p><p><img src="image-20201120125727574.png" alt="image-20201120125727574"></p><h2 id="常用效果"><a href="#常用效果" class="headerlink" title="常用效果"></a>常用效果</h2><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>max，min</p><h3 id="多个指针"><a href="#多个指针" class="headerlink" title="多个指针"></a>多个指针</h3><p><img src="image-20201120130719554.png" alt="image-20201120130719554"></p><h3 id="调整颜色"><a href="#调整颜色" class="headerlink" title="调整颜色"></a>调整颜色</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> MyEchart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            series:[                &#123;<span class="javascript">                    type:<span class="hljs-string">&#x27;gauge&#x27;</span>,</span>                    data:[                        &#123;                            value:97,                            itemStyle:&#123;<span class="javascript">                                color:<span class="hljs-string">&#x27;red&#x27;</span></span>                            &#125;                        &#125;,                        &#123;                            value:85,                            itemStyle: &#123;<span class="javascript">                                color: <span class="hljs-string">&#x27;green&#x27;</span></span>                            &#125;                        &#125;                    ],                    min:50,                    max:200,                &#125;            ]        &#125;        MyEchart.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201120130759633.png" alt="image-20201120130759633"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>准备数据</p><p>定义图表类型</p><p>仪表盘特点：表现某个指标情况</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-雷达图</title>
    <link href="/2020/11/19/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    <url>/2020/11/19/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%9B%B7%E8%BE%BE%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="雷达图实现"><a href="#雷达图实现" class="headerlink" title="雷达图实现"></a>雷达图实现</h1><p>ECharts最基本的代码结构</p><p>定义每个维度的最大值</p><p>准备具体产品的数据</p><p>图标类型type：radar</p><p><img src="image-20201119163850836.png" alt="image-20201119163850836"></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">lib/echarts.min.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-comment">//1. ECharts最基本的代码结构</span></span><span class="javascript">    <span class="hljs-comment">//2. 定义各个维度的最大值, 通过radar属性配置</span></span><span class="javascript">    <span class="hljs-comment">//   易用性,功能,拍照,跑分,续航, 每个维度的最大值都是100</span></span><span class="javascript">    <span class="hljs-comment">//3. 准备产品数据, 设置给series下的data</span></span><span class="javascript">    <span class="hljs-comment">//   华为手机1: 80, 90, 80, 82, 90</span></span><span class="javascript">    <span class="hljs-comment">//   中兴手机1: 70, 82, 75, 70, 78</span></span><span class="javascript">    <span class="hljs-comment">//4. 将type的值设置为radar</span></span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">    <span class="hljs-comment">// 各个维度的最大值</span></span><span class="javascript">    <span class="hljs-keyword">var</span> dataMax = [</span>        &#123;<span class="javascript">            name: <span class="hljs-string">&#x27;易用性&#x27;</span>,</span>            max: 100        &#125;,        &#123;<span class="javascript">            name: <span class="hljs-string">&#x27;功能&#x27;</span>,</span>            max: 100        &#125;,        &#123;<span class="javascript">            name: <span class="hljs-string">&#x27;拍照&#x27;</span>,</span>            max: 100        &#125;,        &#123;<span class="javascript">            name: <span class="hljs-string">&#x27;跑分&#x27;</span>,</span>            max: 100        &#125;,        &#123;<span class="javascript">            name: <span class="hljs-string">&#x27;续航&#x27;</span>,</span>            max: 100        &#125;    ]<span class="javascript">    <span class="hljs-keyword">var</span> option = &#123;</span>        radar: &#123;<span class="javascript">            indicator: dataMax, <span class="hljs-comment">// 配置各个维度的最大值</span></span><span class="javascript">            shape: <span class="hljs-string">&#x27;polygon&#x27;</span> <span class="hljs-comment">// 配置雷达图最外层的图形 circle polygon</span></span>        &#125;,        series: [            &#123;<span class="javascript">                type: <span class="hljs-string">&#x27;radar&#x27;</span>, <span class="hljs-comment">// radar 此图表时一个雷达图</span></span><span class="javascript">                label: &#123; <span class="hljs-comment">// 设置标签的样式</span></span><span class="javascript">                    show: <span class="hljs-literal">true</span> <span class="hljs-comment">// 显示数值</span></span>                &#125;,<span class="javascript">                areaStyle: &#123;&#125;, <span class="hljs-comment">// 将每一个产品的雷达图形成阴影的面积</span></span>                data: [                    &#123;<span class="javascript">                        name: <span class="hljs-string">&#x27;华为手机1&#x27;</span>,</span>                        value: [80, 90, 80, 82, 90]                    &#125;,                    &#123;<span class="javascript">                        name: <span class="hljs-string">&#x27;中兴手机1&#x27;</span>,</span>                        value: [70, 82, 75, 70, 78]                    &#125;                ]            &#125;        ]    &#125;    mCharts.setOption(option)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="标签显示"><a href="#标签显示" class="headerlink" title="标签显示"></a>标签显示</h2><pre><code class="hljs awk">label: &#123; <span class="hljs-regexp">//</span> 设置标签的样式    show: true <span class="hljs-regexp">//</span> 显示数值&#125;,</code></pre><h2 id="区域面积"><a href="#区域面积" class="headerlink" title="区域面积"></a>区域面积</h2><pre><code class="hljs avrasm"><span class="hljs-symbol">areaStyle:</span> &#123;&#125;,</code></pre><h2 id="绘制类型"><a href="#绘制类型" class="headerlink" title="绘制类型"></a>绘制类型</h2><pre><code class="hljs awk">shape: <span class="hljs-string">&#x27;polygon&#x27;</span> <span class="hljs-regexp">//</span> 配置雷达图最外层的图形 circle polygon</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-地图</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%9C%B0%E5%9B%BE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="地图图表的使用方式"><a href="#地图图表的使用方式" class="headerlink" title="地图图表的使用方式"></a>地图图表的使用方式</h1><h2 id="百度地图api"><a href="#百度地图api" class="headerlink" title="百度地图api"></a>百度地图api</h2><p>需要申请百度地图ak</p><h2 id="矢量地图"><a href="#矢量地图" class="headerlink" title="矢量地图"></a>矢量地图</h2><p>需要准备矢量地图数据</p><h1 id="矢量地图的实现步骤"><a href="#矢量地图的实现步骤" class="headerlink" title="矢量地图的实现步骤"></a>矢量地图的实现步骤</h1><p>1）ECharts最基本的步骤：引入ECharts，初始化dom，初始化容器，设置option</p><p>2）准备中国的矢量地图json文件，放到json/map/的目录下面china.json</p><p>3）使用ajax获取china.json</p><p>4）在回调函数中往echarts全局对象注册地图的json地图数据</p><p>5）在geo下面设置，type：‘map’   map：’chinaMap’</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">lib/echarts.min.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">    $.get(<span class="hljs-string">&#x27;json/map/china.json&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;</span><span class="javascript">        echarts.registerMap(<span class="hljs-string">&#x27;chinaMap&#x27;</span>,ret)</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            geo:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;map&#x27;</span>,</span><span class="javascript">                map:<span class="hljs-string">&#x27;chinaMap&#x27;</span></span>            &#125;        &#125;        mCharts.setOption(option)    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201119153951946.png" alt="image-20201119153951946"></p><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="拖动缩放"><a href="#拖动缩放" class="headerlink" title="拖动缩放"></a>拖动缩放</h2><p>可以用鼠标滑轮放大缩小</p><p>或者拖动进行位置移动</p><pre><code class="hljs groovy"><span class="hljs-attr">roam:</span><span class="hljs-literal">true</span></code></pre><h2 id="显示名称"><a href="#显示名称" class="headerlink" title="显示名称"></a>显示名称</h2><pre><code class="hljs css"><span class="hljs-selector-tag">label</span>:&#123;    <span class="hljs-attribute">show</span>:true &#125;</code></pre><p><img src="image-20201119154422680.png" alt="image-20201119154422680"></p><h2 id="初始化缩放比例"><a href="#初始化缩放比例" class="headerlink" title="初始化缩放比例"></a>初始化缩放比例</h2><pre><code class="hljs angelscript">zoom:<span class="hljs-number">1</span> <span class="hljs-comment">//初始化缩放比例</span></code></pre><h2 id="地图中心点"><a href="#地图中心点" class="headerlink" title="地图中心点"></a>地图中心点</h2><pre><code class="hljs apache"><span class="hljs-attribute">center</span>:[<span class="hljs-number">87</span>.<span class="hljs-number">61</span>,<span class="hljs-number">43</span>.<span class="hljs-number">79</span>]</code></pre><h2 id="显示某一个区域"><a href="#显示某一个区域" class="headerlink" title="显示某一个区域"></a>显示某一个区域</h2><p>1）加载该区域的矢量地图数据</p><p>2）通过registerMap注册到echarts全局对象中</p><p>3）指明geo下面的type和map属性</p><p>4）通过zoom放大该区域</p><p>5）通过center定位中心店</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">lib/echarts.min.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height:400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">    $.get(<span class="hljs-string">&#x27;json/map/anhui.json&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) </span>&#123;</span><span class="javascript">        echarts.registerMap(<span class="hljs-string">&#x27;anhui&#x27;</span>,ret)</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            geo:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;map&#x27;</span>,</span><span class="javascript">                map:<span class="hljs-string">&#x27;anhui&#x27;</span>,</span><span class="javascript">                roam:<span class="hljs-literal">true</span>,</span>                label:&#123;<span class="javascript">                    show:<span class="hljs-literal">true</span></span>                &#125;            &#125;        &#125;        mCharts.setOption(option)    &#125;)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201119155002086.png" alt="image-20201119155002086"></p><h2 id="不同城市显示不同颜色效果"><a href="#不同城市显示不同颜色效果" class="headerlink" title="不同城市显示不同颜色效果"></a>不同城市显示不同颜色效果</h2><p>1）显示基本的中国地图</p><p>2）城市的空气质量数据设置给series</p><p>3）将series下的数据和geo相关联起来</p><p>4）结合visualMap配合使用</p><pre><code class="hljs pgsql">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script src = lib/echarts.min.js&gt;&lt;/script&gt;    &lt;script src=&quot;lib/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=&quot;width: 600px;height:400px&quot;&gt;&lt;/div&gt;&lt;script&gt;    var airData = [        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39.92</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;天津&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39.13</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">31.22</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;重庆&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">66</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;河北&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">147</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;河南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">113</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;云南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">25.04</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;辽宁&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">50</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;黑龙江&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">114</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;湖南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">175</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;安徽&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">117</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;山东&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">92</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;新疆&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">84</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">67</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;浙江&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">84</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">96</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;湖北&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">273</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;广西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">59</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;甘肃&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">99</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;山西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;内蒙古&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">58</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;陕西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">61</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;吉林&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">51</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;福建&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">29</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;贵州&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">71</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">38</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;青海&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">57</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;西藏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">24</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;四川&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">58</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;宁夏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">52</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;海南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">54</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;台湾&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">88</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;香港&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">66</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;澳门&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">77</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;南海诸岛&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">55</span> &#125;    ]    var mCharts = echarts.init(document.querySelector(&quot;div&quot;))    $.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;json/map/china.json&#x27;</span>,<span class="hljs-keyword">function</span> (ret) &#123;        echarts.registerMap(<span class="hljs-string">&#x27;chinaMap&#x27;</span>,ret)        var <span class="hljs-keyword">option</span> = &#123;            geo:&#123;                <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;map&#x27;</span>,                map:<span class="hljs-string">&#x27;chinaMap&#x27;</span>,                roam:<span class="hljs-keyword">true</span>,                label:&#123;                    <span class="hljs-keyword">show</span>:<span class="hljs-keyword">true</span>                &#125;,            &#125;,            series:[                &#123;                    data:airData,                    geoIndex:<span class="hljs-number">0</span>,                    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;map&#x27;</span>                &#125;            ],            visualMap:&#123;                min:<span class="hljs-number">0</span>,                max:<span class="hljs-number">300</span>,                inrange:&#123;                    color:[<span class="hljs-string">&#x27;white&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>]                &#125;            &#125;        &#125;        mCharts.setOption(<span class="hljs-keyword">option</span>)    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="image-20201119155626343.png" alt="image-20201119155626343"></p><p><img src="image-20201119155914854.png" alt="image-20201119155914854"></p><h2 id="地图和散点图结合"><a href="#地图和散点图结合" class="headerlink" title="地图和散点图结合"></a>地图和散点图结合</h2><p>1）series增加新对象</p><p>2）准备好散点数据，设置给新对象的data</p><p>3）配置新对象的type</p><p>4）让散点图使用地图坐标系统</p><p>5）让涟漪的效果更加明显</p><pre><code class="hljs pgsql">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script src = lib/echarts.min.js&gt;&lt;/script&gt;    &lt;script src=&quot;lib/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=&quot;width: 600px;height:400px&quot;&gt;&lt;/div&gt;&lt;script&gt;    var airData = [        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39.92</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;天津&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39.13</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">31.22</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;重庆&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">66</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;河北&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">147</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;河南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">113</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;云南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">25.04</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;辽宁&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">50</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;黑龙江&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">114</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;湖南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">175</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;安徽&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">117</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;山东&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">92</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;新疆&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">84</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;江苏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">67</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;浙江&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">84</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;江西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">96</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;湖北&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">273</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;广西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">59</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;甘肃&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">99</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;山西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">39</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;内蒙古&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">58</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;陕西&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">61</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;吉林&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">51</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;福建&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">29</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;贵州&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">71</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;广东&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">38</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;青海&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">57</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;西藏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">24</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;四川&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">58</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;宁夏&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">52</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;海南&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">54</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;台湾&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">88</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;香港&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">66</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;澳门&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">77</span> &#125;,        &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;南海诸岛&#x27;</span>, <span class="hljs-keyword">value</span>: <span class="hljs-number">55</span> &#125;    ]    var scatterData = [        &#123;            <span class="hljs-keyword">value</span>: [<span class="hljs-number">117.283042</span>, <span class="hljs-number">31.86119</span>]        &#125;    ]    var mCharts = echarts.init(document.querySelector(&quot;div&quot;))    $.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;json/map/china.json&#x27;</span>,<span class="hljs-keyword">function</span> (ret) &#123;        echarts.registerMap(<span class="hljs-string">&#x27;chinaMap&#x27;</span>,ret)        var <span class="hljs-keyword">option</span> = &#123;            geo:&#123;                <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;map&#x27;</span>,                map:<span class="hljs-string">&#x27;chinaMap&#x27;</span>,                roam:<span class="hljs-keyword">true</span>,                label:&#123;                    <span class="hljs-keyword">show</span>:<span class="hljs-keyword">true</span>                &#125;,            &#125;,            series:[                &#123;                    data:airData,                    geoIndex:<span class="hljs-number">0</span>,                    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;map&#x27;</span>                &#125;,                &#123;                    data:scatterData,                    <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;effectScatter&#x27;</span>,                    coordinateSystem:<span class="hljs-string">&#x27;geo&#x27;</span>,                    rippleEffect:&#123;                        scale:<span class="hljs-number">10</span>                    &#125;                &#125;            ],            visualMap:&#123;                min:<span class="hljs-number">0</span>,                max:<span class="hljs-number">300</span>,                inRange:&#123;                    color:[<span class="hljs-string">&#x27;white&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>]                &#125;,                calculable:<span class="hljs-keyword">true</span>            &#125;,        &#125;        mCharts.setOption(<span class="hljs-keyword">option</span>)    &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="image-20201119161026869.png" alt="image-20201119161026869"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="地图图表两种使用方式"><a href="#地图图表两种使用方式" class="headerlink" title="地图图表两种使用方式"></a>地图图表两种使用方式</h2><p>百度地图api</p><p>矢量地图数据</p><h2 id="地图绘制"><a href="#地图绘制" class="headerlink" title="地图绘制"></a>地图绘制</h2><p>加载数据</p><p>将数据注册给echarts全局对象</p><p>配置geo</p><h2 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h2><p>缩放拖动/缩放比例/中心点</p><p>visualMap和地图的结合</p><p>散点图和地图的结合</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-饼图</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%A5%BC%E5%9B%BE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E9%A5%BC%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="ECharts最基本的步骤"><a href="#ECharts最基本的步骤" class="headerlink" title="ECharts最基本的步骤"></a>ECharts最基本的步骤</h2><p>引入ECharts.js</p><p>初始化dom容器</p><p>初始化对象</p><p>设置option</p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>json</p><h2 id="图表类型"><a href="#图表类型" class="headerlink" title="图表类型"></a>图表类型</h2><p>在series下设置type：pie</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code class="hljs pgsql">var pieData = [    &#123;        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;淘宝&#x27;</span>,        <span class="hljs-keyword">value</span>: <span class="hljs-number">11231</span>    &#125;,    &#123;        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;京东&#x27;</span>,        <span class="hljs-keyword">value</span>: <span class="hljs-number">22673</span>    &#125;,    &#123;        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;唯品会&#x27;</span>,        <span class="hljs-keyword">value</span>: <span class="hljs-number">6123</span>    &#125;,    &#123;        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;1号店&#x27;</span>,        <span class="hljs-keyword">value</span>: <span class="hljs-number">8989</span>    &#125;,    &#123;        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;聚美优品&#x27;</span>,        <span class="hljs-keyword">value</span>: <span class="hljs-number">6700</span>    &#125;]var <span class="hljs-keyword">option</span> = &#123;    series: [        &#123;            <span class="hljs-keyword">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,            data: pieData        &#125;    ]&#125;</code></pre><p><img src="image-20201118161900695.png" alt="image-20201118161900695"></p><h1 id="饼图常见的效果"><a href="#饼图常见的效果" class="headerlink" title="饼图常见的效果"></a>饼图常见的效果</h1><h2 id="显示数值"><a href="#显示数值" class="headerlink" title="显示数值"></a>显示数值</h2><p><img src="image-20201118162228807.png" alt="image-20201118162228807"></p><pre><code class="hljs lua">&#123;    name: <span class="hljs-string">&#x27;淘宝&#x27;</span>,    value: <span class="hljs-number">11231</span>,    label:&#123;        show:<span class="hljs-literal">true</span>,        formatter:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(arg)</span></span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">arg</span>.name+<span class="hljs-string">&quot;平台&quot;</span>+<span class="hljs-built_in">arg</span>.value+<span class="hljs-string">&#x27;元\n&#x27;</span>+<span class="hljs-built_in">arg</span>.percent+<span class="hljs-string">&#x27;%&#x27;</span>        &#125;    &#125;&#125;,</code></pre><h2 id="圆环"><a href="#圆环" class="headerlink" title="圆环"></a>圆环</h2><p><img src="image-20201118162430485.png" alt="image-20201118162430485"></p><pre><code class="hljs lua">series: [    &#123;        <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,        data: pieData,        label:&#123;            show:<span class="hljs-literal">true</span>,            formatter:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(arg)</span></span> &#123;                <span class="hljs-keyword">return</span> <span class="hljs-built_in">arg</span>.name+<span class="hljs-string">&quot;平台&quot;</span>+<span class="hljs-built_in">arg</span>.value+<span class="hljs-string">&#x27;元\n&#x27;</span>+<span class="hljs-built_in">arg</span>.percent+<span class="hljs-string">&#x27;%&#x27;</span>            &#125;        &#125;,        radius:<span class="hljs-number">20</span>    &#125;]</code></pre><p><img src="image-20201118162517093.png" alt="image-20201118162517093"></p><pre><code class="hljs css"><span class="hljs-selector-tag">radius</span>:<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;50&#x27;</span>,<span class="hljs-string">&#x27;70&#x27;</span>]</span></code></pre><h2 id="南丁格尔图"><a href="#南丁格尔图" class="headerlink" title="南丁格尔图"></a>南丁格尔图</h2><p><img src="image-20201118162606276.png" alt="image-20201118162606276"></p><pre><code class="hljs groovy"><span class="hljs-attr">roseType:</span><span class="hljs-string">&#x27;radius&#x27;</span></code></pre><h2 id="选中效果"><a href="#选中效果" class="headerlink" title="选中效果"></a>选中效果</h2><pre><code class="hljs groovy"><span class="hljs-attr">selectedMode:</span><span class="hljs-string">&#x27;single&#x27;</span></code></pre><p><img src="image-20201118162731429.png" alt="image-20201118162731429"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><h2 id="基本的饼图"><a href="#基本的饼图" class="headerlink" title="基本的饼图"></a>基本的饼图</h2><p>基本的代码结构</p><p>数据是由name和value组成的对象所形成的数组</p><p>series中的type属性为pie</p><p>无须配置xAxis和yAxis</p><h2 id="饼图常见效果"><a href="#饼图常见效果" class="headerlink" title="饼图常见效果"></a>饼图常见效果</h2><p>显示文字的格式化</p><p>圆环</p><p>南丁格尔图</p><p>选中效果</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>饼图可以很好地帮助用户快速了解不同分类的数据占比情况</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-直角坐标轴配置</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E7%9B%B4%E8%A7%92%E5%9D%90%E6%A0%87%E8%BD%B4%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E7%9B%B4%E8%A7%92%E5%9D%90%E6%A0%87%E8%BD%B4%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="直角坐标轴的配置"><a href="#直角坐标轴的配置" class="headerlink" title="直角坐标轴的配置"></a>直角坐标轴的配置</h1><p>涉及到上面我们学习完的，柱状图，折线图，散点图</p><p>配置1：gird 网格</p><p>配置2：坐标轴axis</p><p>配置3：缩放区域dataZoom</p><h2 id="配置1-gird网格"><a href="#配置1-gird网格" class="headerlink" title="配置1 gird网格"></a>配置1 gird网格</h2><p>gird是用来控制直角坐标系的布局和大小</p><p>x轴和y轴就是在gird的基础上绘制出来的</p><pre><code class="hljs less"><span class="hljs-attribute">grid</span>: &#123; <span class="hljs-comment">// 坐标轴容器</span>    <span class="hljs-attribute">show</span>: true, <span class="hljs-comment">// 是否可见</span>    <span class="hljs-attribute">borderWidth</span>: <span class="hljs-number">10</span>, <span class="hljs-comment">// 边框的宽度</span>    <span class="hljs-attribute">borderColor</span>: <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-comment">// 边框的颜色</span>    <span class="hljs-attribute">left</span>: <span class="hljs-number">120</span>, <span class="hljs-comment">// 边框的位置</span>    <span class="hljs-attribute">top</span>: <span class="hljs-number">120</span>,    <span class="hljs-attribute">width</span>: <span class="hljs-number">300</span>, <span class="hljs-comment">// 边框的大小</span>    <span class="hljs-attribute">height</span>: <span class="hljs-number">150</span>&#125;,</code></pre><p><img src="image-20201118103816738.png" alt="image-20201118103816738"></p><p>显示gird show</p><p>gird的边框 borderWidth borderColor</p><p>gird的位置和大小 left top</p><h2 id="配置2-坐标轴axis"><a href="#配置2-坐标轴axis" class="headerlink" title="配置2 坐标轴axis"></a>配置2 坐标轴axis</h2><p>坐标轴分为x轴和y轴</p><h3 id="坐标类型-type"><a href="#坐标类型-type" class="headerlink" title="坐标类型 type"></a>坐标类型 type</h3><p>value：数值轴，自动会从目标数据中读取数据</p><p>category：类目轴，该类型必须通过data设置类目数据</p><pre><code class="hljs less"><span class="hljs-attribute">xAxis</span>: &#123;    <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,    <span class="hljs-attribute">data</span>: xDataArr,    <span class="hljs-attribute">position</span>: <span class="hljs-string">&#x27;top&#x27;</span> <span class="hljs-comment">// 控制坐标轴的位置</span>&#125;,<span class="hljs-attribute">yAxis</span>: &#123;    <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;value&#x27;</span>,    <span class="hljs-attribute">position</span>: <span class="hljs-string">&#x27;right&#x27;</span> <span class="hljs-comment">// 控制坐标轴的位置</span>&#125;,<span class="hljs-attribute">series</span>: [    &#123;        <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;语文&#x27;</span>,        <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,        <span class="hljs-attribute">markPoint</span>: &#123;            <span class="hljs-attribute">data</span>: [                &#123;                    <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;最大值&#x27;</span>                &#125;,&#123;                    <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;最小值&#x27;</span>                &#125;            ]        &#125;,        <span class="hljs-attribute">markLine</span>: &#123;            <span class="hljs-attribute">data</span>: [                &#123;                    <span class="hljs-attribute">type</span>: <span class="hljs-string">&#x27;average&#x27;</span>, <span class="hljs-attribute">name</span>: <span class="hljs-string">&#x27;平均值&#x27;</span>                &#125;            ]        &#125;,        <span class="hljs-attribute">label</span>: &#123;            <span class="hljs-attribute">show</span>: true,            <span class="hljs-attribute">rotate</span>: <span class="hljs-number">60</span>,            <span class="hljs-attribute">position</span>: <span class="hljs-string">&#x27;top&#x27;</span>        &#125;,        <span class="hljs-attribute">barWidth</span>: <span class="hljs-string">&#x27;30%&#x27;</span>,        <span class="hljs-attribute">data</span>: yDataArr    &#125;]</code></pre><h3 id="显示位置-position"><a href="#显示位置-position" class="headerlink" title="显示位置 position"></a>显示位置 position</h3><p>xAxis：可取值为top或者bottom</p><p>yAxis：可取值为left或者right</p><p><img src="image-20201118105324128.png" alt="image-20201118105324128"></p><h2 id="配置3-区域缩放dataZoom"><a href="#配置3-区域缩放dataZoom" class="headerlink" title="配置3 区域缩放dataZoom"></a>配置3 区域缩放dataZoom</h2><p>dataZoom 用于区域缩放，对数据范围过滤，x轴和y轴都可以拥有</p><p>dataZoom是一个数组，意味着可以配置多个区域缩放器</p><h3 id="类型-type"><a href="#类型-type" class="headerlink" title="类型 type"></a>类型 type</h3><p>slider：滑块</p><p>inside：内置，依靠鼠标滚轮或者双指缩放</p><h3 id="指明产生作用的轴"><a href="#指明产生作用的轴" class="headerlink" title="指明产生作用的轴"></a>指明产生作用的轴</h3><p>xAxisIndex：设置缩放组件控制的是哪个x轴，一般写0即可。</p><p>yAxisIndex：设置缩放组件控制的是哪个y轴，一般写0即可。</p><h3 id="指明初始状态缩放的情况"><a href="#指明初始状态缩放的情况" class="headerlink" title="指明初始状态缩放的情况"></a>指明初始状态缩放的情况</h3><p>start：数据窗口范围的初始百分比</p><p>end：数据窗口范围的结束百分比</p><h1 id="小结-直角坐标系"><a href="#小结-直角坐标系" class="headerlink" title="小结 直角坐标系"></a>小结 直角坐标系</h1><h2 id="直角坐标系的图表"><a href="#直角坐标系的图表" class="headerlink" title="直角坐标系的图表"></a>直角坐标系的图表</h2><p>柱状图，散点图，折线图</p><h3 id="网格grid"><a href="#网格grid" class="headerlink" title="网格grid"></a>网格grid</h3><p>x轴和y轴的依附</p><h3 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h3><p>xAxis和yAxis</p><p>取值类型 value 和 category</p><h3 id="区域缩放-dataZoom"><a href="#区域缩放-dataZoom" class="headerlink" title="区域缩放 dataZoom"></a>区域缩放 dataZoom</h3><p>x轴和y轴都可以设置</p><p>inside和slider</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-散点图</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%95%A3%E7%82%B9%E5%9B%BE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%95%A3%E7%82%B9%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图可以帮助我们推断出变量之间的相关性</p><p>比如身高和体重的关系</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>ECharts最基本的代码结构：引入js，dom容器，初始化echarts对象，设置option</p><p>x轴和y轴的二维数组：数组:[{身高，体重}]</p><p>图标类型：scatter</p><pre><code class="hljs yaml"><span class="hljs-string">&lt;!DOCTYPE</span> <span class="hljs-string">html&gt;</span><span class="hljs-string">&lt;html</span> <span class="hljs-string">lang=&quot;en&quot;&gt;</span><span class="hljs-string">&lt;head&gt;</span>    <span class="hljs-string">&lt;meta</span> <span class="hljs-string">charset=&quot;UTF-8&quot;&gt;</span>    <span class="hljs-string">&lt;title&gt;Title&lt;/title&gt;</span>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src</span> <span class="hljs-string">=</span> <span class="hljs-string">lib/echarts.min.js&gt;&lt;/script&gt;</span><span class="hljs-string">&lt;/head&gt;</span><span class="hljs-string">&lt;body&gt;</span><span class="hljs-string">&lt;div</span> <span class="hljs-string">style=&quot;width:</span> <span class="hljs-string">600px;height:400px&quot;&gt;&lt;/div&gt;</span><span class="hljs-string">&lt;script&gt;</span>    <span class="hljs-string">var</span> <span class="hljs-string">data</span> <span class="hljs-string">=</span> [&#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">153.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">42</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">147.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">151.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">151.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">105.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">149.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">44.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">43.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">104.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">149.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">193.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">187.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">189.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">101.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">197.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">116.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">198.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">108.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">95.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">193</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">95.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">96.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">92.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">101.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">98.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;]    <span class="hljs-string">var</span> <span class="hljs-string">axisData</span> <span class="hljs-string">=</span> []    <span class="hljs-string">for</span> <span class="hljs-string">(var</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;i&lt;data.length;i++)&#123;</span>        <span class="hljs-string">var</span> <span class="hljs-string">height</span> <span class="hljs-string">=</span> <span class="hljs-string">data[i].height</span>        <span class="hljs-string">var</span> <span class="hljs-string">weight</span> <span class="hljs-string">=</span> <span class="hljs-string">data[i].weight</span>        <span class="hljs-string">var</span> <span class="hljs-string">newArr</span> <span class="hljs-string">=</span> [<span class="hljs-string">height</span>,<span class="hljs-string">weight</span>]        <span class="hljs-string">axisData.push(newArr)</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">console.log(axisData)</span>    <span class="hljs-string">var</span> <span class="hljs-string">myecharts</span> <span class="hljs-string">=echarts.init(document.querySelector(&quot;div&quot;))</span>    <span class="hljs-string">var</span> <span class="hljs-string">option</span> <span class="hljs-string">=</span> &#123;        <span class="hljs-string">xAxis:</span>&#123;            <span class="hljs-string">type:&#x27;value&#x27;</span>        &#125;,        <span class="hljs-string">yAxis:</span>&#123;            <span class="hljs-string">type:&#x27;value&#x27;</span>        &#125;,        <span class="hljs-string">series:</span>[            &#123;            <span class="hljs-string">type:&#x27;scatter&#x27;</span>,            <span class="hljs-string">data:axisData</span>            &#125;        ]    &#125;    <span class="hljs-string">myecharts.setOption(option)</span><span class="hljs-string">&lt;/script&gt;</span><span class="hljs-string">&lt;/body&gt;</span><span class="hljs-string">&lt;/html&gt;</span></code></pre><p><img src="image-20201116105639325.png" alt="image-20201116105639325"></p><p>调整：</p><p>将坐标轴都设置为脱离0的比例，scale</p><pre><code class="hljs scala"><span class="hljs-keyword">var</span> option = &#123;    xAxis:&#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;valu</span>e&#x27;,        scale:<span class="hljs-literal">true</span>    &#125;,    yAxis:&#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;valu</span>e&#x27;,        scale:<span class="hljs-literal">true</span>    &#125;,    series:[        &#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;scatte</span>r&#x27;,        data:axisData        &#125;    ]&#125;</code></pre><p><img src="image-20201116105731665.png" alt="image-20201116105731665"></p><h3 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h3><h4 id="气泡图效果"><a href="#气泡图效果" class="headerlink" title="气泡图效果"></a>气泡图效果</h4><p>散点的大小不同，散点的颜色不同</p><pre><code class="hljs javascript">symbolSize:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(arg)    <span class="hljs-keyword">var</span> height = arg[<span class="hljs-number">0</span>]/<span class="hljs-number">100</span>    <span class="hljs-keyword">var</span> weight = arg[<span class="hljs-number">1</span>]    <span class="hljs-keyword">var</span> bmi = weight / (height*height)    <span class="hljs-keyword">if</span>(bmi &gt;<span class="hljs-number">28</span> )&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>&#125;</code></pre><p><img src="image-20201116110522377.png" alt="image-20201116110522377"></p><pre><code class="hljs kotlin">itemStyle: &#123;    color:function (arg) &#123;        <span class="hljs-keyword">var</span> height = arg.<span class="hljs-keyword">data</span>[<span class="hljs-number">0</span>]/<span class="hljs-number">100</span>        <span class="hljs-keyword">var</span> weight = arg.<span class="hljs-keyword">data</span>[<span class="hljs-number">1</span>]        <span class="hljs-keyword">var</span> bmi = weight / (height*height)        <span class="hljs-keyword">if</span>(bmi &gt;<span class="hljs-number">28</span> )&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;red&#x27;</span>        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;green&#x27;</span>    &#125;&#125;</code></pre><p><img src="image-20201116110734498.png" alt="image-20201116110734498"></p><h4 id="涟漪动画"><a href="#涟漪动画" class="headerlink" title="涟漪动画"></a>涟漪动画</h4><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;effectScatte</span>r&#x27;,</code></pre><p><img src="image-20201116110840646.png" alt="image-20201116110840646"></p><pre><code class="hljs awk">showEffectOn:<span class="hljs-string">&#x27;emphasis&#x27;</span>, <span class="hljs-regexp">//</span>render emphasis</code></pre><p>render是直接渲染，emphasis触碰到才会显示</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-折线图</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%8A%98%E7%BA%BF%E5%9B%BE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%8A%98%E7%BA%BF%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;1月&#x27;</span>, <span class="hljs-string">&#x27;2月&#x27;</span>, <span class="hljs-string">&#x27;3月&#x27;</span>, <span class="hljs-string">&#x27;4月&#x27;</span>, <span class="hljs-string">&#x27;5月&#x27;</span>, <span class="hljs-string">&#x27;6月&#x27;</span>, <span class="hljs-string">&#x27;7月&#x27;</span>, <span class="hljs-string">&#x27;8月&#x27;</span>, <span class="hljs-string">&#x27;9月&#x27;</span>, <span class="hljs-string">&#x27;10月&#x27;</span>, <span class="hljs-string">&#x27;11月&#x27;</span>, <span class="hljs-string">&#x27;12月&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">3000</span>, <span class="hljs-number">2800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> MyEchart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            xAxis:&#123;                data:xDataArr,<span class="javascript">                type:<span class="hljs-string">&#x27;category&#x27;</span></span>            &#125;,            yAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;康师傅&#x27;</span>,</span>                    data:yDataArr,<span class="javascript">                    type:<span class="hljs-string">&#x27;line&#x27;</span></span>                &#125;            ]        &#125;        MyEchart.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112105336387.png" alt="image-20201112105336387"></p><h3 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h3><p>标记：最大值 最小值 平均值 标注区间</p><p>markPoint markLine markArea</p><p>线条控制： 平滑 风格</p><p>smooth lineStyle</p><p>填充风格： </p><p>areaStyle</p><p>紧挨边缘：</p><p>boundaryGap</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;1月&#x27;</span>, <span class="hljs-string">&#x27;2月&#x27;</span>, <span class="hljs-string">&#x27;3月&#x27;</span>, <span class="hljs-string">&#x27;4月&#x27;</span>, <span class="hljs-string">&#x27;5月&#x27;</span>, <span class="hljs-string">&#x27;6月&#x27;</span>, <span class="hljs-string">&#x27;7月&#x27;</span>, <span class="hljs-string">&#x27;8月&#x27;</span>, <span class="hljs-string">&#x27;9月&#x27;</span>, <span class="hljs-string">&#x27;10月&#x27;</span>, <span class="hljs-string">&#x27;11月&#x27;</span>, <span class="hljs-string">&#x27;12月&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">3000</span>, <span class="hljs-number">2800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> MyEchart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            xAxis:&#123;                data:xDataArr,<span class="javascript">                type:<span class="hljs-string">&#x27;category&#x27;</span></span>            &#125;,            yAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;康师傅&#x27;</span>,</span>                    data:yDataArr,<span class="javascript">                    type:<span class="hljs-string">&#x27;line&#x27;</span>,</span>                    markPoint:&#123;                        data:[                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;max&#x27;</span></span>                            &#125;,                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;min&#x27;</span></span>                            &#125;                        ]                    &#125;,                    markLine:&#123;                        data:[                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;average&#x27;</span></span>                            &#125;                        ]                    &#125;,                    markArea:&#123;                        data:[                            [                                &#123;<span class="javascript">                                    xAxis: <span class="hljs-string">&#x27;1月&#x27;</span></span>                                &#125;,                                &#123;<span class="javascript">                                    xAxis:<span class="hljs-string">&#x27;2月&#x27;</span></span>                                &#125;                            ],                            [                                &#123;<span class="javascript">                                    xAxis: <span class="hljs-string">&#x27;7月&#x27;</span></span>                                &#125;,                                &#123;<span class="javascript">                                    xAxis:<span class="hljs-string">&#x27;8月&#x27;</span></span>                                &#125;                            ]                        ]                    &#125;,<span class="javascript">                    smooth:<span class="hljs-literal">true</span>,</span>                    lineStyle:&#123;<span class="javascript">                        color:<span class="hljs-string">&#x27;blue&#x27;</span>,</span><span class="javascript">                        type: <span class="hljs-string">&#x27;solid&#x27;</span> <span class="hljs-comment">//dashed dotted solid</span></span>                    &#125;,                    areaStyle:&#123;<span class="javascript">                        color:<span class="hljs-string">&#x27;pink&#x27;</span></span>                    &#125;                &#125;            ]        &#125;        MyEchart.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112110149506.png" alt="image-20201112110149506"></p><pre><code class="hljs css"><span class="hljs-selector-tag">xAxis</span>:&#123;    <span class="hljs-attribute">data</span>:xDataArr,    type:<span class="hljs-string">&#x27;category&#x27;</span>,    boundaryGap: false&#125;,</code></pre><p><img src="image-20201116094800273.png" alt="image-20201116094800273"></p><p>缩放：脱离0值比例</p><pre><code class="hljs css"><span class="hljs-selector-tag">yAxis</span>:&#123;    <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;value&#x27;</span>,    scale: true&#125;,</code></pre><p><img src="image-20201116094925730.png" alt="image-20201116094925730"></p><p>堆叠图</p><pre><code class="hljs vim">var option = &#123;    title:&#123;        tex<span class="hljs-variable">t:</span><span class="hljs-string">&#x27;康师傅&#x27;</span>    &#125;,    xAxi<span class="hljs-variable">s:</span>&#123;        dat<span class="hljs-variable">a:xDataArr</span>,        <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;category&#x27;</span>,    &#125;,    yAxi<span class="hljs-variable">s:</span>&#123;        <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;value&#x27;</span>,    &#125;,    serie<span class="hljs-variable">s:</span>[        &#123;            dat<span class="hljs-variable">a:yDataArr</span>,            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,            stack:<span class="hljs-string">&#x27;all&#x27;</span>,            areaStyle:<span class="hljs-string">&#x27;&#x27;</span>        &#125;,        &#123;            dat<span class="hljs-variable">a:yDataArr2</span>,            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,            stack:<span class="hljs-string">&#x27;all&#x27;</span>,            areaStyle: <span class="hljs-string">&#x27;&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201116095525978.png" alt="image-20201116095525978"></p><p><img src="image-20201116095450013.png" alt="image-20201116095450013"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-柱状图</title>
    <link href="/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%9F%B1%E7%8A%B6%E5%9B%BE/"/>
    <url>/2020/11/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E6%9F%B1%E7%8A%B6%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> chars = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> xData = [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yData = [<span class="hljs-number">88</span>,<span class="hljs-number">92</span>,<span class="hljs-number">63</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> options = &#123;</span>            xAxis:&#123;<span class="javascript">              type:<span class="hljs-string">&#x27;category&#x27;</span>,</span>              data:xData            &#125;,            yAxis: &#123;<span class="javascript">              type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;语文&#x27;</span>,</span><span class="javascript">                    type:<span class="hljs-string">&#x27;bar&#x27;</span>,</span>                    data:yData                &#125;            ]        &#125;        chars.setOption(options)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112090208295.png" alt="image-20201112090208295"></p><h3 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h3><h4 id="最大值，最小值，平均值"><a href="#最大值，最小值，平均值" class="headerlink" title="最大值，最小值，平均值"></a>最大值，最小值，平均值</h4><p>markPoint/markLine</p><pre><code class="hljs css"><span class="hljs-selector-tag">markPoint</span>:&#123;    <span class="hljs-attribute">data</span>:[        &#123;            type:<span class="hljs-string">&#x27;max&#x27;</span>,            name:<span class="hljs-string">&#x27;最大值&#x27;</span>        &#125;,        &#123;            <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;min&#x27;</span>,            name:<span class="hljs-string">&#x27;最小值&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201112090347635.png" alt="image-20201112090347635">=</p><pre><code class="hljs css"><span class="hljs-selector-tag">markLine</span>:&#123;    <span class="hljs-attribute">data</span>:[        &#123;            type:<span class="hljs-string">&#x27;average&#x27;</span>,            name:<span class="hljs-string">&#x27;平均值&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201112090514005.png" alt="image-20201112090514005"></p><h4 id="显示-数值显示-柱宽度-横向柱状图"><a href="#显示-数值显示-柱宽度-横向柱状图" class="headerlink" title="显示 数值显示 柱宽度 横向柱状图"></a>显示 数值显示 柱宽度 横向柱状图</h4><pre><code class="hljs css"><span class="hljs-selector-tag">label</span>:&#123;  <span class="hljs-attribute">show</span>:true&#125;,</code></pre><p><img src="image-20201112090838767.png" alt="image-20201112090838767"></p><pre><code class="hljs groovy"><span class="hljs-attr">barWidth:</span><span class="hljs-string">&#x27;30%&#x27;</span>,</code></pre><p><img src="image-20201112091048420.png" alt="image-20201112091048420"></p><h3 id="柱状图小结"><a href="#柱状图小结" class="headerlink" title="柱状图小结"></a>柱状图小结</h3><p>基本的代码结构，x轴和y轴的数据，series的type设置为bar</p><p>最大值/最小值markPoint 平均值markLIne 数值的显示label 柱状图宽度 barWidth</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ECharts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts—基本使用</title>
    <link href="/2020/11/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts%E2%80%94%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/11/10/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts%E2%80%94%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ECharts-js的介绍"><a href="#ECharts-js的介绍" class="headerlink" title="ECharts.js的介绍"></a>ECharts.js的介绍</h1><p>是一个javascript实现的开源可视化库，兼容性强，底层依赖矢量图ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><p>开源免费/功能丰富/社区活跃</p><h1 id="ECharts-js的特点"><a href="#ECharts-js的特点" class="headerlink" title="ECharts.js的特点"></a>ECharts.js的特点</h1><h2 id="丰富的可视化类型"><a href="#丰富的可视化类型" class="headerlink" title="丰富的可视化类型"></a>丰富的可视化类型</h2><p>折线图，柱状图，饼图，K线图</p><h2 id="多种数据支持"><a href="#多种数据支持" class="headerlink" title="多种数据支持"></a>多种数据支持</h2><p>key-value</p><p>二维表</p><p>TypedArray</p><h2 id="流数据支持"><a href="#流数据支持" class="headerlink" title="流数据支持"></a>流数据支持</h2><p>流数据的动态渲染</p><p>增量渲染技术</p><h1 id="ECharts-js上手"><a href="#ECharts-js上手" class="headerlink" title="ECharts.js上手"></a>ECharts.js上手</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>步骤1：引入echart.js</p><p>步骤2：准备一个呈现图表的盒子 div</p><p>步骤3：初始化echarts实例对象</p><p>步骤4：准备配置项</p><p>步骤5：将配置项设置给echarts实例对象</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-comment">&lt;!--    步骤1：引入echart.js--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-comment">&lt;!--步骤2：准备一个呈现图表的盒子 div--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">    <span class="hljs-comment">// 步骤3：初始化echarts实例对象</span></span><span class="javascript">    <span class="hljs-comment">//参数，dom决定图表最终呈现的位置</span></span><span class="javascript">    <span class="hljs-keyword">var</span> mCharts =  echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">    <span class="hljs-comment">// 步骤4：准备配置项</span></span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            xAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;category&#x27;</span>,</span><span class="javascript">                data:[<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小王&#x27;</span>]</span>            &#125;,            yAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;语文&#x27;</span>,</span><span class="javascript">                    type:<span class="hljs-string">&#x27;bar&#x27;</span>,</span>                    data:[70,92,87]                &#125;            ]        &#125;<span class="javascript">        <span class="hljs-comment">//步骤5：将配置项设置给echarts实例对象</span></span>        mCharts.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201110115759608.png" alt="image-20201110115759608"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>引入</p><p>准备</p><p>设置</p><h2 id="配置项的使用"><a href="#配置项的使用" class="headerlink" title="配置项的使用"></a>配置项的使用</h2><p>除了配置项以外，其他的代码都是固定不变的。</p><p>配置项的学习和使用应该参考官方文档和示例</p><h1 id="ECharts的基本使用"><a href="#ECharts的基本使用" class="headerlink" title="ECharts的基本使用"></a>ECharts的基本使用</h1><p>xAxis：直角坐标系中的x轴</p><p>yAxis：直角坐标系中的y轴</p><p>series：系列列表，每个系列通过type决定自己的图表类型</p><h1 id="ECharts通用配置"><a href="#ECharts通用配置" class="headerlink" title="ECharts通用配置"></a>ECharts通用配置</h1><p>标题title</p><p>提示tooltip</p><p>工具按钮toolbox</p><p>图例legend</p><h2 id="标题title"><a href="#标题title" class="headerlink" title="标题title"></a>标题title</h2><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><pre><code class="hljs less"><span class="hljs-attribute">text</span>:<span class="hljs-string">&#x27;成绩展示&#x27;</span>,<span class="hljs-attribute">textStyle</span>:&#123;    <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>&#125;</code></pre><p><img src="image-20201112092027219.png" alt="image-20201112092027219"></p><h3 id="标题边框"><a href="#标题边框" class="headerlink" title="标题边框"></a>标题边框</h3><p>borderWidth，borderColor，borderRadius</p><pre><code class="hljs groovy"><span class="hljs-attr">borderWidth:</span><span class="hljs-number">5</span>,<span class="hljs-attr">borderColor:</span><span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-attr">borderRadius:</span><span class="hljs-number">5</span></code></pre><p><img src="image-20201112092213828.png" alt="image-20201112092213828"></p><h3 id="标题位置"><a href="#标题位置" class="headerlink" title="标题位置"></a>标题位置</h3><p>left，top，right，bottom</p><h2 id="tooltip提示框"><a href="#tooltip提示框" class="headerlink" title="tooltip提示框"></a>tooltip提示框</h2><p>提示框组件，用于配置鼠标滑过或点击图表时候的显示框</p><h3 id="trigger触发类型"><a href="#trigger触发类型" class="headerlink" title="trigger触发类型"></a>trigger触发类型</h3><p>item，axis</p><pre><code class="hljs css"><span class="hljs-selector-tag">tooltip</span>:&#123;    <span class="hljs-attribute">trigger</span>:<span class="hljs-string">&#x27;item&#x27;</span>&#125;,</code></pre><p><img src="image-20201112101802949.png" alt="image-20201112101802949"></p><pre><code class="hljs groovy"><span class="hljs-attr">trigger:</span><span class="hljs-string">&#x27;axis&#x27;</span></code></pre><p><img src="image-20201112101901278.png" alt="image-20201112101901278"></p><h3 id="triggerOn触发时机"><a href="#triggerOn触发时机" class="headerlink" title="triggerOn触发时机"></a>triggerOn触发时机</h3><p>mouseover，click</p><h3 id="格式化formatter"><a href="#格式化formatter" class="headerlink" title="格式化formatter"></a>格式化formatter</h3><p>字符串模板，回调函数</p><pre><code class="hljs groovy"><span class="hljs-attr">formatter:</span><span class="hljs-string">&#x27;haha&#x27;</span></code></pre><p><img src="image-20201112102037709.png" alt="image-20201112102037709"></p><h2 id="toolbox工具栏"><a href="#toolbox工具栏" class="headerlink" title="toolbox工具栏"></a>toolbox工具栏</h2><p>echarts提供的工具栏，内置有导出图片，数据视图，动态类型转换，数据区缩放，重置（五个工具）</p><pre><code class="hljs dts"><span class="hljs-symbol">toolbox:</span> &#123; <span class="hljs-comment">// 工具箱按钮</span><span class="hljs-symbol">    feature:</span> &#123;<span class="hljs-symbol">        saveAsImage:</span> &#123;&#125;, <span class="hljs-comment">// 导出图片</span>    &#125;&#125;,</code></pre><p><img src="image-20201112102726603.png" alt="image-20201112102726603"></p><pre><code class="hljs avrasm"><span class="hljs-symbol">dataView:</span> &#123;&#125;</code></pre><p><img src="image-20201112102843693.png" alt="image-20201112102843693"></p><pre><code class="hljs less"><span class="hljs-attribute">toolbox</span>: &#123; <span class="hljs-comment">// 工具箱按钮</span>    <span class="hljs-attribute">feature</span>: &#123;        <span class="hljs-attribute">saveAsImage</span>: &#123;&#125;, <span class="hljs-comment">// 导出图片</span>        <span class="hljs-attribute">dataView</span>: &#123;&#125;,        <span class="hljs-attribute">restore</span>:&#123;&#125;,        <span class="hljs-attribute">dataZoom</span>:&#123;&#125;,        <span class="hljs-attribute">magicType</span>: &#123;            <span class="hljs-attribute">type</span>:[<span class="hljs-string">&#x27;bar&#x27;</span>,<span class="hljs-string">&#x27;line&#x27;</span>]        &#125;    &#125;&#125;,</code></pre><p><img src="image-20201112103135197.png" alt="image-20201112103135197"></p><p>还可以进行柱状图和折线图之间的转换</p><h3 id="legend图例"><a href="#legend图例" class="headerlink" title="legend图例"></a>legend图例</h3><p>用于筛选系列，需要和series配合使用    </p><p>legend中的data是一个数组</p><p>legend中的data值需要和series数组中某组数据的name一致</p><pre><code class="hljs css"><span class="hljs-selector-tag">legend</span>: &#123;    <span class="hljs-attribute">data</span>:[<span class="hljs-string">&#x27;语文&#x27;</span>,<span class="hljs-string">&#x27;数学&#x27;</span>]&#125;</code></pre><p><img src="image-20201112104849141.png" alt="image-20201112104849141"></p><h1 id="ECharts常用图表"><a href="#ECharts常用图表" class="headerlink" title="ECharts常用图表"></a>ECharts常用图表</h1><p>一共有七大图表</p><p>柱状图，折线图，散点图，饼图，地图，雷达图，仪表盘图</p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> chars = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;div&quot;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> xData = [<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-string">&#x27;王五&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yData = [<span class="hljs-number">88</span>,<span class="hljs-number">92</span>,<span class="hljs-number">63</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> options = &#123;</span>            xAxis:&#123;<span class="javascript">              type:<span class="hljs-string">&#x27;category&#x27;</span>,</span>              data:xData            &#125;,            yAxis: &#123;<span class="javascript">              type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;语文&#x27;</span>,</span><span class="javascript">                    type:<span class="hljs-string">&#x27;bar&#x27;</span>,</span>                    data:yData                &#125;            ]        &#125;        chars.setOption(options)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112090208295.png" alt="image-20201112090208295"></p><h3 id="常见效果"><a href="#常见效果" class="headerlink" title="常见效果"></a>常见效果</h3><h4 id="最大值，最小值，平均值"><a href="#最大值，最小值，平均值" class="headerlink" title="最大值，最小值，平均值"></a>最大值，最小值，平均值</h4><p>markPoint/markLine</p><pre><code class="hljs css"><span class="hljs-selector-tag">markPoint</span>:&#123;    <span class="hljs-attribute">data</span>:[        &#123;            type:<span class="hljs-string">&#x27;max&#x27;</span>,            name:<span class="hljs-string">&#x27;最大值&#x27;</span>        &#125;,        &#123;            <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;min&#x27;</span>,            name:<span class="hljs-string">&#x27;最小值&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201112090347635.png" alt="image-20201112090347635">=</p><pre><code class="hljs css"><span class="hljs-selector-tag">markLine</span>:&#123;    <span class="hljs-attribute">data</span>:[        &#123;            type:<span class="hljs-string">&#x27;average&#x27;</span>,            name:<span class="hljs-string">&#x27;平均值&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201112090514005.png" alt="image-20201112090514005"></p><h4 id="显示-数值显示-柱宽度-横向柱状图"><a href="#显示-数值显示-柱宽度-横向柱状图" class="headerlink" title="显示 数值显示 柱宽度 横向柱状图"></a>显示 数值显示 柱宽度 横向柱状图</h4><pre><code class="hljs css"><span class="hljs-selector-tag">label</span>:&#123;  <span class="hljs-attribute">show</span>:true&#125;,</code></pre><p><img src="image-20201112090838767.png" alt="image-20201112090838767"></p><pre><code class="hljs groovy"><span class="hljs-attr">barWidth:</span><span class="hljs-string">&#x27;30%&#x27;</span>,</code></pre><p><img src="image-20201112091048420.png" alt="image-20201112091048420"></p><h3 id="柱状图小结"><a href="#柱状图小结" class="headerlink" title="柱状图小结"></a>柱状图小结</h3><p>基本的代码结构，x轴和y轴的数据，series的type设置为bar</p><p>最大值/最小值markPoint 平均值markLIne 数值的显示label 柱状图宽度 barWidth</p><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;1月&#x27;</span>, <span class="hljs-string">&#x27;2月&#x27;</span>, <span class="hljs-string">&#x27;3月&#x27;</span>, <span class="hljs-string">&#x27;4月&#x27;</span>, <span class="hljs-string">&#x27;5月&#x27;</span>, <span class="hljs-string">&#x27;6月&#x27;</span>, <span class="hljs-string">&#x27;7月&#x27;</span>, <span class="hljs-string">&#x27;8月&#x27;</span>, <span class="hljs-string">&#x27;9月&#x27;</span>, <span class="hljs-string">&#x27;10月&#x27;</span>, <span class="hljs-string">&#x27;11月&#x27;</span>, <span class="hljs-string">&#x27;12月&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">3000</span>, <span class="hljs-number">2800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> MyEchart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            xAxis:&#123;                data:xDataArr,<span class="javascript">                type:<span class="hljs-string">&#x27;category&#x27;</span></span>            &#125;,            yAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;康师傅&#x27;</span>,</span>                    data:yDataArr,<span class="javascript">                    type:<span class="hljs-string">&#x27;line&#x27;</span></span>                &#125;            ]        &#125;        MyEchart.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112105336387.png" alt="image-20201112105336387"></p><h2 id="常见效果-1"><a href="#常见效果-1" class="headerlink" title="常见效果"></a>常见效果</h2><p>标记：最大值 最小值 平均值 标注区间</p><p>markPoint markLine markArea</p><p>线条控制： 平滑 风格</p><p>smooth lineStyle</p><p>填充风格： </p><p>areaStyle</p><p>紧挨边缘：</p><p>boundaryGap</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;lib/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 600px;height: 400px&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">        <span class="hljs-keyword">var</span> xDataArr = [<span class="hljs-string">&#x27;1月&#x27;</span>, <span class="hljs-string">&#x27;2月&#x27;</span>, <span class="hljs-string">&#x27;3月&#x27;</span>, <span class="hljs-string">&#x27;4月&#x27;</span>, <span class="hljs-string">&#x27;5月&#x27;</span>, <span class="hljs-string">&#x27;6月&#x27;</span>, <span class="hljs-string">&#x27;7月&#x27;</span>, <span class="hljs-string">&#x27;8月&#x27;</span>, <span class="hljs-string">&#x27;9月&#x27;</span>, <span class="hljs-string">&#x27;10月&#x27;</span>, <span class="hljs-string">&#x27;11月&#x27;</span>, <span class="hljs-string">&#x27;12月&#x27;</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> yDataArr = [<span class="hljs-number">3000</span>, <span class="hljs-number">2800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">700</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>]</span><span class="javascript">        <span class="hljs-keyword">var</span> MyEchart = echarts.init(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>))</span><span class="javascript">        <span class="hljs-keyword">var</span> option = &#123;</span>            xAxis:&#123;                data:xDataArr,<span class="javascript">                type:<span class="hljs-string">&#x27;category&#x27;</span></span>            &#125;,            yAxis:&#123;<span class="javascript">                type:<span class="hljs-string">&#x27;value&#x27;</span></span>            &#125;,            series:[                &#123;<span class="javascript">                    name:<span class="hljs-string">&#x27;康师傅&#x27;</span>,</span>                    data:yDataArr,<span class="javascript">                    type:<span class="hljs-string">&#x27;line&#x27;</span>,</span>                    markPoint:&#123;                        data:[                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;max&#x27;</span></span>                            &#125;,                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;min&#x27;</span></span>                            &#125;                        ]                    &#125;,                    markLine:&#123;                        data:[                            &#123;<span class="javascript">                                type:<span class="hljs-string">&#x27;average&#x27;</span></span>                            &#125;                        ]                    &#125;,                    markArea:&#123;                        data:[                            [                                &#123;<span class="javascript">                                    xAxis: <span class="hljs-string">&#x27;1月&#x27;</span></span>                                &#125;,                                &#123;<span class="javascript">                                    xAxis:<span class="hljs-string">&#x27;2月&#x27;</span></span>                                &#125;                            ],                            [                                &#123;<span class="javascript">                                    xAxis: <span class="hljs-string">&#x27;7月&#x27;</span></span>                                &#125;,                                &#123;<span class="javascript">                                    xAxis:<span class="hljs-string">&#x27;8月&#x27;</span></span>                                &#125;                            ]                        ]                    &#125;,<span class="javascript">                    smooth:<span class="hljs-literal">true</span>,</span>                    lineStyle:&#123;<span class="javascript">                        color:<span class="hljs-string">&#x27;blue&#x27;</span>,</span><span class="javascript">                        type: <span class="hljs-string">&#x27;solid&#x27;</span> <span class="hljs-comment">//dashed dotted solid</span></span>                    &#125;,                    areaStyle:&#123;<span class="javascript">                        color:<span class="hljs-string">&#x27;pink&#x27;</span></span>                    &#125;                &#125;            ]        &#125;        MyEchart.setOption(option)    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="image-20201112110149506.png" alt="image-20201112110149506"></p><pre><code class="hljs css"><span class="hljs-selector-tag">xAxis</span>:&#123;    <span class="hljs-attribute">data</span>:xDataArr,    type:<span class="hljs-string">&#x27;category&#x27;</span>,    boundaryGap: false&#125;,</code></pre><p><img src="image-20201116094800273.png" alt="image-20201116094800273"></p><p>缩放：脱离0值比例</p><pre><code class="hljs css"><span class="hljs-selector-tag">yAxis</span>:&#123;    <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;value&#x27;</span>,    scale: true&#125;,</code></pre><p><img src="image-20201116094925730.png" alt="image-20201116094925730"></p><p>堆叠图</p><pre><code class="hljs vim">var option = &#123;    title:&#123;        tex<span class="hljs-variable">t:</span><span class="hljs-string">&#x27;康师傅&#x27;</span>    &#125;,    xAxi<span class="hljs-variable">s:</span>&#123;        dat<span class="hljs-variable">a:xDataArr</span>,        <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;category&#x27;</span>,    &#125;,    yAxi<span class="hljs-variable">s:</span>&#123;        <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;value&#x27;</span>,    &#125;,    serie<span class="hljs-variable">s:</span>[        &#123;            dat<span class="hljs-variable">a:yDataArr</span>,            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,            stack:<span class="hljs-string">&#x27;all&#x27;</span>,            areaStyle:<span class="hljs-string">&#x27;&#x27;</span>        &#125;,        &#123;            dat<span class="hljs-variable">a:yDataArr2</span>,            <span class="hljs-built_in">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,            stack:<span class="hljs-string">&#x27;all&#x27;</span>,            areaStyle: <span class="hljs-string">&#x27;&#x27;</span>        &#125;    ]&#125;</code></pre><p><img src="image-20201116095525978.png" alt="image-20201116095525978"></p><p><img src="image-20201116095450013.png" alt="image-20201116095450013"></p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>散点图可以帮助我们推断出变量之间的相关性</p><p>比如身高和体重的关系</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>ECharts最基本的代码结构：引入js，dom容器，初始化echarts对象，设置option</p><p>x轴和y轴的二维数组：数组:[{身高，体重}]</p><p>图标类型：scatter</p><pre><code class="hljs yaml"><span class="hljs-string">&lt;!DOCTYPE</span> <span class="hljs-string">html&gt;</span><span class="hljs-string">&lt;html</span> <span class="hljs-string">lang=&quot;en&quot;&gt;</span><span class="hljs-string">&lt;head&gt;</span>    <span class="hljs-string">&lt;meta</span> <span class="hljs-string">charset=&quot;UTF-8&quot;&gt;</span>    <span class="hljs-string">&lt;title&gt;Title&lt;/title&gt;</span>    <span class="hljs-string">&lt;script</span> <span class="hljs-string">src</span> <span class="hljs-string">=</span> <span class="hljs-string">lib/echarts.min.js&gt;&lt;/script&gt;</span><span class="hljs-string">&lt;/head&gt;</span><span class="hljs-string">&lt;body&gt;</span><span class="hljs-string">&lt;div</span> <span class="hljs-string">style=&quot;width:</span> <span class="hljs-string">600px;height:400px&quot;&gt;&lt;/div&gt;</span><span class="hljs-string">&lt;script&gt;</span>    <span class="hljs-string">var</span> <span class="hljs-string">data</span> <span class="hljs-string">=</span> [&#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">153.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">42</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">147.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">151.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">151.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">105.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">45</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">149.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">44.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">155</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">43.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">51.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">50</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">158.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">49.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">159.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">47.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">52.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">152.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">104.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">154.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">54.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">161.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">156.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">149.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">46.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">162.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">48.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;female&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">193.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">187.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">173</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">60.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">189.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">59.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">57</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">164.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">101.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">56.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">197.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">192</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">169.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">53.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">178.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">55.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">157.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">58</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">78.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">116.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">163.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">198.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">166.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">108.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">63.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">68.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">165.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">172.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">95.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">193</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">95.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">96.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">171.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">69.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">86.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">92.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">93.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">61.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">168.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">185.4</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">66.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">160</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">88.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">186.7</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">101.4</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">91.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">67.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">175.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">81.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">75.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">181.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">182.9</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">102.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">184.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">71.8</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">94.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">70.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">64.5</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">77.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">72.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">87.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">174</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">80</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">176.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.6</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">74.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">188</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">85.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">73.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">167.6</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">76.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">65.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">183</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">90.9</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">89.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">170.2</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">62.3</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">82.7</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">179.1</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">79.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">190.5</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">98.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">177.8</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">84.1</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;, &#123; <span class="hljs-attr">&quot;gender&quot;:</span> <span class="hljs-string">&quot;male&quot;</span>, <span class="hljs-attr">&quot;height&quot;:</span> <span class="hljs-number">180.3</span>, <span class="hljs-attr">&quot;weight&quot;:</span> <span class="hljs-number">83.2</span> &#125;]    <span class="hljs-string">var</span> <span class="hljs-string">axisData</span> <span class="hljs-string">=</span> []    <span class="hljs-string">for</span> <span class="hljs-string">(var</span> <span class="hljs-string">i</span> <span class="hljs-string">=</span> <span class="hljs-number">0</span><span class="hljs-string">;i&lt;data.length;i++)&#123;</span>        <span class="hljs-string">var</span> <span class="hljs-string">height</span> <span class="hljs-string">=</span> <span class="hljs-string">data[i].height</span>        <span class="hljs-string">var</span> <span class="hljs-string">weight</span> <span class="hljs-string">=</span> <span class="hljs-string">data[i].weight</span>        <span class="hljs-string">var</span> <span class="hljs-string">newArr</span> <span class="hljs-string">=</span> [<span class="hljs-string">height</span>,<span class="hljs-string">weight</span>]        <span class="hljs-string">axisData.push(newArr)</span>    <span class="hljs-string">&#125;</span>    <span class="hljs-string">console.log(axisData)</span>    <span class="hljs-string">var</span> <span class="hljs-string">myecharts</span> <span class="hljs-string">=echarts.init(document.querySelector(&quot;div&quot;))</span>    <span class="hljs-string">var</span> <span class="hljs-string">option</span> <span class="hljs-string">=</span> &#123;        <span class="hljs-string">xAxis:</span>&#123;            <span class="hljs-string">type:&#x27;value&#x27;</span>        &#125;,        <span class="hljs-string">yAxis:</span>&#123;            <span class="hljs-string">type:&#x27;value&#x27;</span>        &#125;,        <span class="hljs-string">series:</span>[            &#123;            <span class="hljs-string">type:&#x27;scatter&#x27;</span>,            <span class="hljs-string">data:axisData</span>            &#125;        ]    &#125;    <span class="hljs-string">myecharts.setOption(option)</span><span class="hljs-string">&lt;/script&gt;</span><span class="hljs-string">&lt;/body&gt;</span><span class="hljs-string">&lt;/html&gt;</span></code></pre><p><img src="image-20201116105639325.png" alt="image-20201116105639325"></p><p>调整：</p><p>将坐标轴都设置为脱离0的比例，scale</p><pre><code class="hljs scala"><span class="hljs-keyword">var</span> option = &#123;    xAxis:&#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;valu</span>e&#x27;,        scale:<span class="hljs-literal">true</span>    &#125;,    yAxis:&#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;valu</span>e&#x27;,        scale:<span class="hljs-literal">true</span>    &#125;,    series:[        &#123;        <span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;scatte</span>r&#x27;,        data:axisData        &#125;    ]&#125;</code></pre><p><img src="image-20201116105731665.png" alt="image-20201116105731665"></p><h3 id="常见效果-2"><a href="#常见效果-2" class="headerlink" title="常见效果"></a>常见效果</h3><h4 id="气泡图效果"><a href="#气泡图效果" class="headerlink" title="气泡图效果"></a>气泡图效果</h4><p>散点的大小不同，散点的颜色不同</p><pre><code class="hljs javascript">symbolSize:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(arg)    <span class="hljs-keyword">var</span> height = arg[<span class="hljs-number">0</span>]/<span class="hljs-number">100</span>    <span class="hljs-keyword">var</span> weight = arg[<span class="hljs-number">1</span>]    <span class="hljs-keyword">var</span> bmi = weight / (height*height)    <span class="hljs-keyword">if</span>(bmi &gt;<span class="hljs-number">28</span> )&#123;        <span class="hljs-keyword">return</span> <span class="hljs-number">20</span>    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>&#125;</code></pre><p><img src="image-20201116110522377.png" alt="image-20201116110522377"></p><pre><code class="hljs kotlin">itemStyle: &#123;    color:function (arg) &#123;        <span class="hljs-keyword">var</span> height = arg.<span class="hljs-keyword">data</span>[<span class="hljs-number">0</span>]/<span class="hljs-number">100</span>        <span class="hljs-keyword">var</span> weight = arg.<span class="hljs-keyword">data</span>[<span class="hljs-number">1</span>]        <span class="hljs-keyword">var</span> bmi = weight / (height*height)        <span class="hljs-keyword">if</span>(bmi &gt;<span class="hljs-number">28</span> )&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;red&#x27;</span>        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;green&#x27;</span>    &#125;&#125;</code></pre><p><img src="image-20201116110734498.png" alt="image-20201116110734498"></p><h4 id="涟漪动画"><a href="#涟漪动画" class="headerlink" title="涟漪动画"></a>涟漪动画</h4><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">type</span></span>:<span class="hljs-symbol">&#x27;effectScatte</span>r&#x27;,</code></pre><p><img src="image-20201116110840646.png" alt="image-20201116110840646"></p><pre><code class="hljs awk">showEffectOn:<span class="hljs-string">&#x27;emphasis&#x27;</span>, <span class="hljs-regexp">//</span>render emphasis</code></pre><p>render是直接渲染，emphasis触碰到才会显示</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化ECharts-前言</title>
    <link href="/2020/11/09/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%89%8D%E8%A8%80/"/>
    <url>/2020/11/09/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96ECharts-%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>ECharts.js</p><p>Vue全家桶（Vue router,Vuex）</p><p>Webpack打包工具</p><p>Axios 前端后端数据交互</p><p>WebSocket</p><p>koa2</p><h1 id="数据可视化概念"><a href="#数据可视化概念" class="headerlink" title="数据可视化概念"></a>数据可视化概念</h1><p>把数据以更直观的方式展现——图表</p><p>可以清晰有效的传递与沟通信息</p><p>还可以看到隐藏在数据中的信息</p><h1 id="可视化的实现方式"><a href="#可视化的实现方式" class="headerlink" title="可视化的实现方式"></a>可视化的实现方式</h1><h2 id="报表类"><a href="#报表类" class="headerlink" title="报表类"></a>报表类</h2><p>Excel</p><p>水晶报表</p><h2 id="商业智能BI"><a href="#商业智能BI" class="headerlink" title="商业智能BI"></a>商业智能BI</h2><p>microsoft BI</p><p>Power BI</p><h2 id="编码类"><a href="#编码类" class="headerlink" title="编码类"></a>编码类</h2><p>Echarts.js 百度开发</p><p>D3.js 国外开发</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端中package-json文件</title>
    <link href="/2020/11/08/%E5%89%8D%E7%AB%AF%E4%B8%ADpackage-json%E6%96%87%E4%BB%B6/"/>
    <url>/2020/11/08/%E5%89%8D%E7%AB%AF%E4%B8%ADpackage-json%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h1><p>这是我的一个前端项目的package.json文件</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;parking_space_master&quot;</span>,  <span class="hljs-attr">&quot;version&quot;</span>: <span class="hljs-string">&quot;1.0.0&quot;</span>,  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;A Vue.js project&quot;</span>,  <span class="hljs-attr">&quot;author&quot;</span>: <span class="hljs-string">&quot;mmz &lt;372461239@qq.com&gt;&quot;</span>,  <span class="hljs-attr">&quot;private&quot;</span>: <span class="hljs-literal">true</span>,  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;    <span class="hljs-attr">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js&quot;</span>,    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;npm run dev&quot;</span>,    <span class="hljs-attr">&quot;unit&quot;</span>: <span class="hljs-string">&quot;jest --config test/unit/jest.conf.js --coverage&quot;</span>,    <span class="hljs-attr">&quot;e2e&quot;</span>: <span class="hljs-string">&quot;node test/e2e/runner.js&quot;</span>,    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;npm run unit &amp;&amp; npm run e2e&quot;</span>,    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint --ext .js,.vue src test/unit test/e2e/specs&quot;</span>,    <span class="hljs-attr">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span>  &#125;,  <span class="hljs-attr">&quot;dependencies&quot;</span>: &#123;    <span class="hljs-attr">&quot;axios&quot;</span>: <span class="hljs-string">&quot;^0.18.0&quot;</span>,    <span class="hljs-attr">&quot;echarts&quot;</span>: <span class="hljs-string">&quot;^4.2.1&quot;</span>,    <span class="hljs-attr">&quot;element-ui&quot;</span>: <span class="hljs-string">&quot;^2.7.2&quot;</span>,    <span class="hljs-attr">&quot;jquery&quot;</span>: <span class="hljs-string">&quot;^3.4.1&quot;</span>,    <span class="hljs-attr">&quot;stylus&quot;</span>: <span class="hljs-string">&quot;^0.54.5&quot;</span>,    <span class="hljs-attr">&quot;stylus-loader&quot;</span>: <span class="hljs-string">&quot;^3.0.2&quot;</span>,    <span class="hljs-attr">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.5.2&quot;</span>,    <span class="hljs-attr">&quot;vue-router&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,    <span class="hljs-attr">&quot;vuex&quot;</span>: <span class="hljs-string">&quot;^3.1.1&quot;</span>  &#125;,  <span class="hljs-attr">&quot;devDependencies&quot;</span>: &#123;    <span class="hljs-attr">&quot;autoprefixer&quot;</span>: <span class="hljs-string">&quot;^7.1.2&quot;</span>,    <span class="hljs-attr">&quot;babel-core&quot;</span>: <span class="hljs-string">&quot;^6.22.1&quot;</span>,    <span class="hljs-attr">&quot;babel-eslint&quot;</span>: <span class="hljs-string">&quot;^8.2.1&quot;</span>,    <span class="hljs-attr">&quot;babel-helper-vue-jsx-merge-props&quot;</span>: <span class="hljs-string">&quot;^2.0.3&quot;</span>,    <span class="hljs-attr">&quot;babel-jest&quot;</span>: <span class="hljs-string">&quot;^21.0.2&quot;</span>,    <span class="hljs-attr">&quot;babel-loader&quot;</span>: <span class="hljs-string">&quot;^7.1.1&quot;</span>,    <span class="hljs-attr">&quot;babel-plugin-dynamic-import-node&quot;</span>: <span class="hljs-string">&quot;^1.2.0&quot;</span>,    <span class="hljs-attr">&quot;babel-plugin-syntax-jsx&quot;</span>: <span class="hljs-string">&quot;^6.18.0&quot;</span>,    <span class="hljs-attr">&quot;babel-plugin-transform-es2015-modules-commonjs&quot;</span>: <span class="hljs-string">&quot;^6.26.0&quot;</span>,    <span class="hljs-attr">&quot;babel-plugin-transform-runtime&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,    <span class="hljs-attr">&quot;babel-plugin-transform-vue-jsx&quot;</span>: <span class="hljs-string">&quot;^3.5.0&quot;</span>,    <span class="hljs-attr">&quot;babel-preset-env&quot;</span>: <span class="hljs-string">&quot;^1.3.2&quot;</span>,    <span class="hljs-attr">&quot;babel-preset-stage-2&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,    <span class="hljs-attr">&quot;babel-register&quot;</span>: <span class="hljs-string">&quot;^6.22.0&quot;</span>,    <span class="hljs-attr">&quot;chalk&quot;</span>: <span class="hljs-string">&quot;^2.0.1&quot;</span>,    <span class="hljs-attr">&quot;chromedriver&quot;</span>: <span class="hljs-string">&quot;^2.27.2&quot;</span>,    <span class="hljs-attr">&quot;copy-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^4.0.1&quot;</span>,    <span class="hljs-attr">&quot;cross-spawn&quot;</span>: <span class="hljs-string">&quot;^5.0.1&quot;</span>,    <span class="hljs-attr">&quot;css-loader&quot;</span>: <span class="hljs-string">&quot;^0.28.0&quot;</span>,    <span class="hljs-attr">&quot;eslint&quot;</span>: <span class="hljs-string">&quot;^4.15.0&quot;</span>,    <span class="hljs-attr">&quot;eslint-config-standard&quot;</span>: <span class="hljs-string">&quot;^10.2.1&quot;</span>,    <span class="hljs-attr">&quot;eslint-friendly-formatter&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,    <span class="hljs-attr">&quot;eslint-loader&quot;</span>: <span class="hljs-string">&quot;^1.7.1&quot;</span>,    <span class="hljs-attr">&quot;eslint-plugin-import&quot;</span>: <span class="hljs-string">&quot;^2.7.0&quot;</span>,    <span class="hljs-attr">&quot;eslint-plugin-node&quot;</span>: <span class="hljs-string">&quot;^5.2.0&quot;</span>,    <span class="hljs-attr">&quot;eslint-plugin-promise&quot;</span>: <span class="hljs-string">&quot;^3.4.0&quot;</span>,    <span class="hljs-attr">&quot;eslint-plugin-standard&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,    <span class="hljs-attr">&quot;eslint-plugin-vue&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span>,    <span class="hljs-attr">&quot;extract-text-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^3.0.0&quot;</span>,    <span class="hljs-attr">&quot;file-loader&quot;</span>: <span class="hljs-string">&quot;^1.1.4&quot;</span>,    <span class="hljs-attr">&quot;friendly-errors-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^1.6.1&quot;</span>,    <span class="hljs-attr">&quot;html-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^2.30.1&quot;</span>,    <span class="hljs-attr">&quot;jest&quot;</span>: <span class="hljs-string">&quot;^22.0.4&quot;</span>,    <span class="hljs-attr">&quot;jest-serializer-vue&quot;</span>: <span class="hljs-string">&quot;^0.3.0&quot;</span>,    <span class="hljs-attr">&quot;nightwatch&quot;</span>: <span class="hljs-string">&quot;^0.9.12&quot;</span>,    <span class="hljs-attr">&quot;node-notifier&quot;</span>: <span class="hljs-string">&quot;^5.1.2&quot;</span>,    <span class="hljs-attr">&quot;optimize-css-assets-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^3.2.0&quot;</span>,    <span class="hljs-attr">&quot;ora&quot;</span>: <span class="hljs-string">&quot;^1.2.0&quot;</span>,    <span class="hljs-attr">&quot;portfinder&quot;</span>: <span class="hljs-string">&quot;^1.0.13&quot;</span>,    <span class="hljs-attr">&quot;postcss-import&quot;</span>: <span class="hljs-string">&quot;^11.0.0&quot;</span>,    <span class="hljs-attr">&quot;postcss-loader&quot;</span>: <span class="hljs-string">&quot;^2.0.8&quot;</span>,    <span class="hljs-attr">&quot;postcss-url&quot;</span>: <span class="hljs-string">&quot;^7.2.1&quot;</span>,    <span class="hljs-attr">&quot;rimraf&quot;</span>: <span class="hljs-string">&quot;^2.6.0&quot;</span>,    <span class="hljs-attr">&quot;selenium-server&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,    <span class="hljs-attr">&quot;semver&quot;</span>: <span class="hljs-string">&quot;^5.3.0&quot;</span>,    <span class="hljs-attr">&quot;shelljs&quot;</span>: <span class="hljs-string">&quot;^0.7.6&quot;</span>,    <span class="hljs-attr">&quot;uglifyjs-webpack-plugin&quot;</span>: <span class="hljs-string">&quot;^1.1.1&quot;</span>,    <span class="hljs-attr">&quot;url-loader&quot;</span>: <span class="hljs-string">&quot;^0.5.8&quot;</span>,    <span class="hljs-attr">&quot;vue-jest&quot;</span>: <span class="hljs-string">&quot;^1.0.2&quot;</span>,    <span class="hljs-attr">&quot;vue-loader&quot;</span>: <span class="hljs-string">&quot;^13.3.0&quot;</span>,    <span class="hljs-attr">&quot;vue-style-loader&quot;</span>: <span class="hljs-string">&quot;^3.0.1&quot;</span>,    <span class="hljs-attr">&quot;vue-template-compiler&quot;</span>: <span class="hljs-string">&quot;^2.5.2&quot;</span>,    <span class="hljs-attr">&quot;webpack&quot;</span>: <span class="hljs-string">&quot;^3.6.0&quot;</span>,    <span class="hljs-attr">&quot;webpack-bundle-analyzer&quot;</span>: <span class="hljs-string">&quot;^2.9.0&quot;</span>,    <span class="hljs-attr">&quot;webpack-dev-server&quot;</span>: <span class="hljs-string">&quot;^2.9.1&quot;</span>,    <span class="hljs-attr">&quot;webpack-merge&quot;</span>: <span class="hljs-string">&quot;^4.1.0&quot;</span>  &#125;,  <span class="hljs-attr">&quot;engines&quot;</span>: &#123;    <span class="hljs-attr">&quot;node&quot;</span>: <span class="hljs-string">&quot;&gt;= 6.0.0&quot;</span>,    <span class="hljs-attr">&quot;npm&quot;</span>: <span class="hljs-string">&quot;&gt;= 3.0.0&quot;</span>  &#125;,  <span class="hljs-attr">&quot;browserslist&quot;</span>: [    <span class="hljs-string">&quot;&gt; 1%&quot;</span>,    <span class="hljs-string">&quot;last 2 versions&quot;</span>,    <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span>  ]&#125;</code></pre><h1 id="结构解析"><a href="#结构解析" class="headerlink" title="结构解析"></a>结构解析</h1><p>name 项目名称</p><p>version 版本号</p><p>description 项目描述</p><p>author 作者</p><p>private 为true，代表npm拒绝发布它，私有存储库</p><p>scripts 指定了运行一些脚本命令，npm run dev</p><p>dependencies 整个项目正常运行的时候依赖的包，也就是用户在npm install的时候，安装都是自动安装的这些依赖</p><p>devDependencies 项目开发时候依赖度的工具包，运行时不依赖于这些包</p><p>engines 指定项目的工作环境，除非用户自己设置，这个字段只是建议值</p><p>browserslist 在不同的前端工具之间共用目标浏览器和node版本的配置工具</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程互斥的软件实现方法（十八）</title>
    <link href="/2020/11/07/%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89/"/>
    <url>/2020/11/07/%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201107074926041.png" alt="image-20201107074926041"></p><h1 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h1><p>算法思想：两个进程访问临界区后把使用临界区的权限转交给另一个进程，也就是说每个进程进入临界区的权限只能被另一个进程赋予。</p><p><img src="image-20201107075118503.png" alt="image-20201107075118503"></p><p>有一点像java中的volatile修饰的关键字，把修饰的变量作为单标志法的标志。</p><p>同一时刻最多只允许一个进程访问临界区。</p><p>但是该算法导致了访问顺序是固定的，那么违背了“空闲让进”原则。</p><h1 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h1><p>算法思想：设置一个布尔类型的数组flag[]，数组中各个元素用来标记进程想进入临界区的意愿，0为true，flag[0] = true意味着0号进程P0想要进入临界区，每个进程在进入临界区之前先检查当前有没有别的进程想进入临界区，如果没有，把当前自身对应的标志flag[i]设置为true，之后开始访问临界区。</p><p><img src="image-20201107075705286.png" alt="image-20201107075705286"></p><p>按照上面的顺序执行,P0和P1会同时访问临界区，因此双标志法的主要问题是，违背了“忙则等待”原则。</p><p>原因在检查和上锁不是原子操作，两个处理不是一气呵成的。</p><h1 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h1><p>算法思想：在双标志先检查的方法改版，前一个算法的问题是先检查，后上锁。但是这两个操作又无法一气呵成，因此导致了两个进程同时进入临界区的问题。因此，人们又想到了先上锁，后检查的方法，来避免上述问题。</p><p><img src="image-20201107080051255.png" alt="image-20201107080051255"></p><p>先上锁，后检查。</p><p>当然，问题还是存在的，如果按照顺序1526的顺序，P0和P1都无法进入临界区。</p><p>因此，双标志后检查法虽然解决了“忙则等待”的问题，但是又违背了“空闲让进”和“有限等待”原则，会因为进程都长期无法访问临界区资源而产生“饥饿”现象。</p><h1 id="peterson算法"><a href="#peterson算法" class="headerlink" title="peterson算法"></a>peterson算法</h1><p>算法思想：双标志后检查中，两个进程都想访问临界区，但是谁都不让谁，最后谁都无法进入临界区，peterson想到一种方法，如果双方都抢着进入临界区，那可以让进程尝试“孔融让梨”</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程同步与互斥（十七）</title>
    <link href="/2020/11/03/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/"/>
    <url>/2020/11/03/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201106235038036.png" alt="image-20201106235038036"></p><h1 id="进程同步概念"><a href="#进程同步概念" class="headerlink" title="进程同步概念"></a>进程同步概念</h1><p>进程具有异步性的特征，异步性是指各个并发的进程以各自的，独立的，不可预知的速度向前推进。</p><p>同步亦称为直接制约关系，它是指完成某种任务而建立的两个或者多种进程，这些进程因为需要在某些位置上协调他们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p><h1 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h1><p>进程的并发需要共享的支持，各个并发执行的进程不可避免的需要共享一些系统资源（比如内存，打印机，摄像头这种IO设备）</p><p>我们把一个时间段内只允许一个进程使用的资源称为临界资源，许多物理设备（比如摄像头，打印机）都属于临界资源，此外还有更多变量，数据，内存都属于临界资源。</p><p>对临界资源的访问，必须互斥的进行，互斥，又称为间接制约关系。进程互斥，指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待，当前访问临界资源的进程结束时候，释放该资源之后，另一个进程才能去访问该资源。</p><h2 id="两种资源共享方式"><a href="#两种资源共享方式" class="headerlink" title="两种资源共享方式"></a>两种资源共享方式</h2><p>互斥共享方式和同时共享方式</p><h2 id="遵循原则"><a href="#遵循原则" class="headerlink" title="遵循原则"></a>遵循原则</h2><p>1）空闲让进，临界区空闲，可以允许一个请求进入临界区的进程立即进入临界区</p><p>2）忙则等待，当已有进程访问临界区，其他试图进入临界区的进程必须等待</p><p>3）有限等待，对请求访问的进程，应该保证能在有限时间内进入临界区（保证不会饥饿） </p><p>4）让权等待，当进程不能进入临界区，应该立即释放处理机，防止进程忙等待</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201107000516392.png" alt="image-20201107000516392"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调度算法（十六）</title>
    <link href="/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/"/>
    <url>/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201103103830284.png" alt="image-20201103103830284"></p><h1 id="时间片轮转调度"><a href="#时间片轮转调度" class="headerlink" title="时间片轮转调度"></a>时间片轮转调度</h1><p>算法思想：公平地，轮流地为各个进程服务，让每个进程在一定时间间隔内得到响应。</p><p>算法规则：按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片，若进程未在一个时间片内执行完毕，剥夺处理机，将进程重新放到就绪队列尾重新排队。</p><p>用于作业/进程调度：用于进程调度</p><p>是否可抢占：抢占式算法，通过时钟中断来通知cpu时间片已经到了。</p><p>优点：公平，响应快，适用于分时操作系统</p><p>缺点：由于高频率的进程切换，因此有一定的开销，不区分任务的紧急程度</p><p>是否会导致饥饿：不会</p><h1 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h1><p>算法思想：随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来决定处理顺序。</p><p>算法规则：为每个进程或者作业设置一个优先级，调度的时候选择优先级最高的来进行处理</p><p>用于作业/进程调度：可以用于进程、作业调度</p><p>是否可抢占：抢占式和非抢占式都有</p><p>优点：用优先级区分紧急程度、重要程度，适用于实时操作系统，可灵活地调整对各种作业/进程的偏好程度。</p><p>缺点：若源源不断的有高优先级进程到来，可能会导致饥饿</p><p>是否会导致饥饿：是</p><h1 id="补充一下"><a href="#补充一下" class="headerlink" title="补充一下"></a>补充一下</h1><p>就绪队列未必只有一个，可以按照不同的优先级来组织，另外，也可以把优先级高的进程排在更靠近队头的位置。根据优先级是否可以动态改变，可以分为静态优先级和动态优先级两种。</p><p>静态优先级：创建进程时确定，之后一直保持不变</p><p>动态优先级：创建进程时有一个初始值，之后会根据情况动态地调整优先级</p><h2 id="通常"><a href="#通常" class="headerlink" title="通常"></a>通常</h2><p>系统进程优先级高于用户进程</p><p>前台进程优先级高于后台进程</p><p>操作系统更偏好于IO进程，这里对应的是计算型进程（或者成为cpu繁忙型进程）</p><h1 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h1><p>算法思想：对其他调度算法的折中权衡</p><p>算法规则：</p><p>1）设置多级优先就绪队列，各队列优先级从高到低，时间片从小到大</p><p>2）新的进程到达之后，先进入第一级队列，按照fcfs原则排队等待被分配时间片，若用完时间片进程还未结束，则进程进入下一级队尾，如果此时已经是在最下级的队列，则重新放回该队列的队尾。</p><p>3）只要第k级队列为空时，才会为k+1级队头的进程分配时间片</p><p>用于进程/作业调度：用于进程调度</p><p>是否可抢占：抢占式的算法</p><p>优点：对各类型进程相对公平，每个新到达的进程都可以很快得到响应，短进程只用较少的时间就可完成；不必实现估计进程的运行时间，可灵活的调整对各类进程的偏好程度。</p><p>是否会导致饥饿：会</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201103143014562.png" alt="image-20201103143014562"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调度算法（十五）</title>
    <link href="/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/"/>
    <url>/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201103095556074.png" alt="image-20201103095556074"></p><h1 id="先来先服务"><a href="#先来先服务" class="headerlink" title="先来先服务"></a>先来先服务</h1><p>算法思想：主要从“公平”思想来考虑（类似我们生活中排队买东西的例子）</p><p>算法规则：按照作业/进程到达的先后顺序进行服务</p><p>用于作业/进程调度：用于作业调度，考虑的是哪个作业先到达后备队列，用于进程调度时，考虑的是哪个进程先到达就绪队列。</p><p>是否可抢占：非抢占式</p><p>优点：公平，算法实现简单</p><p>缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间过大，对短作业来说用户体验不好。即对长作业有利，对短作业不利。</p><p>是否会导致饥饿：不会</p><h1 id="短作业优先"><a href="#短作业优先" class="headerlink" title="短作业优先"></a>短作业优先</h1><p>算法思想：追求最少的平均等待时间，最少的平均周转时间，最少的平均带权周转时间</p><p>算法规则：最短的作业/进程优先得到服务（要求服务的时间最短）</p><p>用于作业/进程调度： 都可以使用</p><p>是否可抢占：是非抢占式算法， 也有抢占式算法，最短剩余时间优先算法</p><p>优点：最短平均等待时间，平均周转时间</p><p>缺点：对短作业有利，对长作业不利。</p><p>是否会导致饥饿：可能会导致饥饿</p><h1 id="高响应比优先"><a href="#高响应比优先" class="headerlink" title="高响应比优先"></a>高响应比优先</h1><p>算法思想：要考虑作业/进程等待时间和要求服务的时间</p><p>算法规则：在每次调度，计算到达队列的响应比，选择一个响应比最大的为其服务</p><p>用于作业/进程调度：都可以使用</p><p>是否可抢占：非抢占式</p><p>是否会导致饥饿：不会</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201103100818664.png" alt="image-20201103100818664"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调度算法的评价指标（十四）</title>
    <link href="/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/"/>
    <url>/2020/11/03/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201103091115468.png" alt="image-20201103091115468"></p><h1 id="cpu利用率"><a href="#cpu利用率" class="headerlink" title="cpu利用率"></a>cpu利用率</h1><p>早期的计算机中，cpu比较昂贵，所以希望让cpu更多的工作。</p><p>cpu利用率，指cpu忙碌的时间占总时间的比例</p><p>利用率 =  cpu忙碌/总时间</p><h1 id="系统吞吐量"><a href="#系统吞吐量" class="headerlink" title="系统吞吐量"></a>系统吞吐量</h1><p>希望用尽量少的时间处理尽可能多的作业。</p><p>系统吞吐量：单位时间内完成作业的数量</p><p>系统吞吐量 = 总共完成了多少作业/总共花了多少时间</p><h1 id="周转时间"><a href="#周转时间" class="headerlink" title="周转时间"></a>周转时间</h1><p>对于计算机的用户来说，很关系一个作业提交到完成花费了多少时间。</p><p>周转时间，是指从作业被提交给系统开始，到作业完成总共花费了多少时间。</p><p>它总共包括四大部分：</p><p>1）作业在外存后备对列上等待作业调度（高级调度）的时间</p><p>2）进程在就绪队列等待的进程调度的时间</p><p>3）进程在cpu上执行的时间</p><p>4）进程等待io操作完成的时间</p><p>后面三项可能在一个作业的整个处理过程中，可能发生很多次。</p><p>周转时间 = 作业完成时间 - 作业提交时间</p><p>平均周转时间 = 各作业周转时间之和/作业数量</p><h1 id="带权周转时间"><a href="#带权周转时间" class="headerlink" title="带权周转时间"></a>带权周转时间</h1><p>带权周转时间 = 作业周转时间/作业实际运行时间</p><h1 id="等待时间"><a href="#等待时间" class="headerlink" title="等待时间"></a>等待时间</h1><p>等待时间，指作业/进程处于等待处理机状态之和，等待时间越长，用户满意度越低。</p><p>对于进程来说，等待时间就是进程在创建pcb之后，等待被服务的时间之和，等待IO完成的期间也其实进程在被服务的，所以不计入等待时间。</p><p>对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间。</p><h1 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h1><p>对于计算机用户来说，会希望自己的提交请求（比如通过键盘输入一个调试命令）尽早地开始被系统服务、回应。</p><p>响应时间，指从用户提交请求到首次产生响应所需要的时间。</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201103092504578.png" alt="image-20201103092504578"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程调度的时机切换与过程调度方式（十三）</title>
    <link href="/2020/11/03/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/11/03/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%87%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201103085438159.png" alt="image-20201103085438159"></p><h1 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h1><p>进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。</p><p>需要进行进程调度与切换的情况，一种是主动放弃处理机的资源，另一种是被动放弃处理机的资源。</p><h2 id="主动放弃"><a href="#主动放弃" class="headerlink" title="主动放弃"></a>主动放弃</h2><p>进程正常终止</p><p>运行过程中发生异常而终止</p><p>进程主动请求阻塞（I/O等待）</p><h2 id="被动放弃"><a href="#被动放弃" class="headerlink" title="被动放弃"></a>被动放弃</h2><p>分给进程的时间片用完</p><p>有更紧急的作业需要处理（I/O中断）</p><p>有更高优先级的进程进入就绪队列</p><h2 id="不能进行进程调度和切换的情况"><a href="#不能进行进程调度和切换的情况" class="headerlink" title="不能进行进程调度和切换的情况"></a>不能进行进程调度和切换的情况</h2><p>在处理中断的情况中，中断处理情况复杂，与硬件有紧密相关，很难做到在中断处理过程中进行进程切换。</p><p>进程在操作系统内核程序临界区中</p><p>在原子操作过程中（原语），原子操作不可中断，要一气呵成（如之前讲过的pcb中进程标志位，并把pcb放到相应的队列中）</p><h1 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h1><p>非剥夺调度方式，又称为非抢占式，只允许进程主动放弃处理机资源，在运行过程中即便有更紧急的任务到达，当前进程继续会使用处理机，直到该进程终止或者主动要求进入阻塞态。实现简单，系统开销小但是无法及时处理紧急任务，适用于早起的批处理系统。</p><p>剥夺调度方式，又称为抢占式，当一个进程在处理机上执行的时候，如果有一个更紧急的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧急的那个进程。可以优先处理紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断），适用于分时操作系统，实时操作系统。</p><h1 id="进程切换与过程"><a href="#进程切换与过程" class="headerlink" title="进程切换与过程"></a>进程切换与过程</h1><h2 id="狭义的进程调度与进程切换的区别"><a href="#狭义的进程调度与进程切换的区别" class="headerlink" title="狭义的进程调度与进程切换的区别"></a>狭义的进程调度与进程切换的区别</h2><p>狭义的进程调度指的是从就绪队列中选中一个要运行的进程。（这个进程是可以刚刚被暂停执行的进程，也可能是另外一个进程，后一种情况急需要进程切换）</p><p>进程切换就是一个进程让出处理机，另一个进程获取该处理机。</p><h2 id="广义的进程调度"><a href="#广义的进程调度" class="headerlink" title="广义的进程调度"></a>广义的进程调度</h2><p>包含了一个选择一个进程和进程切换的两个步骤</p><p>1.对原来运行进程的各种数据的保存</p><p>2.对新的进程各种数据恢复现场</p><p>都是从pcb进行保存或者恢复</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>进程的切换是有代价的，因此如果过于频繁的进行进程调度、切换，必然会导致整个系统的效率低下，使系统大部分时间都花在了进程切换上面，而真正用于执行进程的时间减少。</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>处理机调度的概念、层次 （十二）</title>
    <link href="/2020/11/03/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%B1%82%E6%AC%A1-%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/"/>
    <url>/2020/11/03/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%B1%82%E6%AC%A1-%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><h1 id="调度的基本概念"><a href="#调度的基本概念" class="headerlink" title="调度的基本概念"></a>调度的基本概念</h1><p>当有一堆任何需要处理，但由于资源有限，这些事情没办法同时处理，这就需要确定某种规则来决定处理这些任务的顺序，这就是调度的研究问题。</p><p>在多道程序系统中，进程的数量往往是多于处理机的个数，这样不可能同时并行的处理各个进程。</p><p>处理机调度，就是从就绪队列中按照一定的算法选择一个进程并将处理机分配给它运行，以实现进程的并发执行。</p><h1 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h1><p>由于内存空间有限，有时候无法将用户提交的作业全部放入内存中，因此就需要确定某种规则来决定将作业调入内存的顺序。</p><p>所谓高级调度（作业调度），按一定的原则从外存中处于后备队列的作业中挑选一个（或多个）作业，给他们分配内存等必要的资源，并建立相应的进程（建立PCB），以使他们获得竞争处理机资源的权利。</p><p>高级调度是辅存（外存）与内存之间的调度，每个作业只调入一次，调出一次。作业调入会建立相应的pcb，作业调出的时候才会撤销pcb，高级调度主要是指调入的问题，因为只有调入的时机才会由操作系统来确定，但是调出的时机必然是作业运行结束才调出。</p><h1 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h1><p>引入虚拟存储技术之后，可以将暂时不运行的进程放在外存等待，等它重新具备了运行条件且内存又稍微空闲，再重新调入内存。</p><p>这么作是为了提交内存空间利用率和系统吞吐量。</p><p>暂时调到外存等待的状态为挂起状态，值得注意的是，pcb不会一起调到外存，而是会常驻内存。pcb记录着进程数据在外存中的存放位置，进程状态信息，操作系统会通过内存中的pcb来保持对各个进程的监控，管理。被挂起的进程pcb会被放到挂起队列中。</p><p>中级调度（内存调度），就是要决定将哪个处于挂起状态的进程重新调入内存。</p><p>一个进程可能会被多次调出，调入。因为中级调度发生的频率要比高级调度要高。</p><h1 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h1><p>低级调度（进程调度），其主要任务是按照某种方式和策略从就绪队列中选取一个进程，将处理器分配给他。</p><p>进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度。</p><p>进程调度很高，一般几十毫秒一次。</p><h1 id="三层调度的联系、对比"><a href="#三层调度的联系、对比" class="headerlink" title="三层调度的联系、对比"></a>三层调度的联系、对比</h1><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程模型（十一）</title>
    <link href="/2020/10/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/"/>
    <url>/2020/10/30/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201030170456670.png" alt="image-20201030170456670"></p><h1 id="线程概念"><a href="#线程概念" class="headerlink" title="线程概念"></a>线程概念</h1><p>在没有引入进程之前，系统在各个程序中只能串行执行。引入了进程之后，可以通过聊天加上听音乐。</p><p>但是一个聊天软件是一个进程，但是一个进程也要做很多的事情怎么办，发图片，语音，传送文件等等，应该怎么去做呢。</p><p>目前，线程是一个最基本的cpu执行单元，也是程序执行流的最小单位。</p><p>引入线程之后，进程只除cpu之外的系统资源的分配单元（如打印机，内存地址空间都是分配给进程的）</p><h1 id="引入线程机制之后"><a href="#引入线程机制之后" class="headerlink" title="引入线程机制之后"></a>引入线程机制之后</h1><p><img src="image-20201030171557691.png" alt="image-20201030171557691"></p><h1 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h1><p><img src="image-20201030171647765.png" alt="image-20201030171647765"></p><h1 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h1><h2 id="用户级别线程"><a href="#用户级别线程" class="headerlink" title="用户级别线程"></a>用户级别线程</h2><p><img src="image-20201030171753244.png" alt="image-20201030171753244"></p><p>用户级别线程由应用程序通过线程库实现。所有的线程管理工作都由应用程序负责（包括线程切换）</p><p>用户级别线程，线程切换可以在用户态下面即可完成，无需操作系统干预。</p><h2 id="内核级别线程"><a href="#内核级别线程" class="headerlink" title="内核级别线程"></a>内核级别线程</h2><p><img src="image-20201030171942203.png" alt="image-20201030171942203"></p><p>内核级线程的管理工作，由操作系统内核完成，线程调度，切换等工作，都由内核负责，因此，内核级别的切换必然需要在核心态下面才能完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在同时支持用户级别线程和内核级别线程的系统中，可采用二者组合的方式，将n个用户级别线程映射到m个内核级别线程上。</p><p><img src="image-20201030172130829.png" alt="image-20201030172130829"></p><p>只有内核级别线程，操作系统才是处理机分配的单位。</p><p>上图虽然有三个用户级别线程，但是只有两个内核级别线程。如果当前的cpu为4核，也只会分配2核。</p><h1 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h1><p>在同时支持用户级别线程和内核级别线程的系统中，由几个用户级别线程映射到几个内核级别线程的问题引出了“多线程模型”问题</p><h2 id="多对一模型"><a href="#多对一模型" class="headerlink" title="多对一模型"></a>多对一模型</h2><p>多个用户及线程映射到一个内核级别线程，每个用户进程只对应一个内核级别线程。</p><p><img src="image-20201030172632719.png" alt="image-20201030172632719"></p><p>优点：用户级别线程切换在用户态就可以完成，不需要切换到核心态，线程管理的系统开销小，效率高。</p><p>缺点：当一个用户级别线程阻塞之后，整个进程都会被阻塞，并发度不高，多个线程无法在多个处理机上运行。</p><h2 id="一对一模型"><a href="#一对一模型" class="headerlink" title="一对一模型"></a>一对一模型</h2><p><img src="image-20201030173234816.png" alt="image-20201030173234816"></p><p>一对一模型：一个用户及线程映射到一个内核级别线程，每个用户进程与用户级别线程同数量的内核级别线程。</p><p>优点：当一个线程被阻塞后，别的线程还可以继续运行，并发能力强，多线程可以在多处理机上运行。</p><p>缺点：一个用户进程占用多个内核级别线程，线程切换由操作系统内核完成， 需要切换到核心态，因此线程管理的成本高，开销大。</p><h2 id="多对多模型"><a href="#多对多模型" class="headerlink" title="多对多模型"></a>多对多模型</h2><p><img src="image-20201030173507627.png" alt="image-20201030173507627"></p><p>n用户级别线程映射到m内核级别线程，每个用户对应m个级别内核线程</p><p>克服了多对一的模型并发读不高，克服一对一，一个用户进程占用太多的内核级别线程，开销太大的缺点。</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201030173648312.png" alt="image-20201030173648312"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程通信（十）</title>
    <link href="/2020/10/30/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%88%E5%8D%81%EF%BC%89/"/>
    <url>/2020/10/30/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201030163554094.png" alt="image-20201030163554094"></p><h1 id="进程通信的定义"><a href="#进程通信的定义" class="headerlink" title="进程通信的定义"></a>进程通信的定义</h1><p>就是进程之间信息的交换</p><p>进程是分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立</p><p>为了保证安全，一个进程是不能访问另一个的进程空间的</p><p>但是进程之间的进程交换又是必须实现的，为了保证进程的安全通信，操作系统提供了一些办法</p><h1 id="进程通信的分类"><a href="#进程通信的分类" class="headerlink" title="进程通信的分类"></a>进程通信的分类</h1><p><img src="image-20201030164052320.png" alt="image-20201030164052320"></p><h1 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h1><p>开辟一个共享空间，两个进程同时对空间进行访问。但是必须要注意的是，对共享空间的访问必须是互斥的。</p><p>操作系统只提供共享空间和互斥工具（pv操作）</p><p>共享存储还分为两种，基于数据结构的共享和基于存储区的共享。</p><h2 id="基于数据结构的共享"><a href="#基于数据结构的共享" class="headerlink" title="基于数据结构的共享"></a>基于数据结构的共享</h2><p>比如共享空间放入一个长度为10的数组，这种共享方式比较慢，是一种低级通信方式，固定的数据结构。</p><h2 id="基于存储区的共享"><a href="#基于存储区的共享" class="headerlink" title="基于存储区的共享"></a>基于存储区的共享</h2><p>在内存中画出一块共享存储区，数据的形式，存放的位置都由进程控制，而不是操作系统，相比之下，这种共享方式速度更快，是一种高级通信方式。</p><h1 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h1><p>管道是指用于连接读写进程的一个共享文件，又名pipe文件，其实就是在内存区域开辟一个大小固定的缓冲区</p><p>管道只能实现半双工通信，在某个时间段，只能实现单向的传输，如果想要实现双全工通信，则需要设置两个管道。</p><p>各个进程互斥的访问管道。</p><p>数据以字符流的形式写入管道，当管道写满的时候，写进程的write（）系统调用将会被阻塞，等待读进程将数据取走，当读进程将数据全部取走之后，管道变空，此时读进程的read（）系统调用将会被阻塞。</p><p>如果没写满，就不允许读，如果没读完，就不允许写。</p><p>数据一旦被读出，就从管道中被抛弃，这就意味着读进程最多只能有一个，否则就会出现读错数据的情况。</p><h1 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h1><p>进程之间的数据交换以格式化的消息为单位，进程通过操作系统提供的发送/接收消息两个原语进行数据交换。</p><p>消息包括消息头和消息体，消息头包括，发送进程ID，接收进程ID，消息类型，消息长度等格式化的信息。</p><h2 id="直接通信方式"><a href="#直接通信方式" class="headerlink" title="直接通信方式"></a>直接通信方式</h2><p>进程1通过发送原语，将消息发送到进程2的消息缓冲队列中。然后进程2会通过接受原语，接受消息。</p><h2 id="间接通信方式"><a href="#间接通信方式" class="headerlink" title="间接通信方式"></a>间接通信方式</h2><p>消息先发送到中间实体（信箱中），因为也称为“信箱通信方式”，操作系统会维护一个信箱。由于消息头的原因，不会出错。</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201030165927270.png" alt="image-20201030165927270"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程控制 （九）</title>
    <link href="/2020/10/19/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <url>/2020/10/19/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201019165219755.png" alt="image-20201019165219755"></p><h1 id="进程控制的定义"><a href="#进程控制的定义" class="headerlink" title="进程控制的定义"></a>进程控制的定义</h1><p>进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程，撤销已有进程，实现进程状态控制等功能。</p><p>总结一句话，就是像上一篇所讲的那样，实现进程的状态转换。</p><h1 id="如何实现进程控制"><a href="#如何实现进程控制" class="headerlink" title="如何实现进程控制"></a>如何实现进程控制</h1><p>回顾一下之前的进程的组织问题，操作系统会将各个pcb挂载到就绪队列指针/阻塞队列指针。</p><p><img src="image-20201019165622380.png" alt="image-20201019165622380"></p><p>进程被创建，在创建态，需要初始化pcb，然后分配系统资源。初始化结束之后，会把pcb放入到就绪队列中。这就是创建态——&gt;就绪态。</p><p>当就绪态的进程获取了cpu，那么他会进入到运行态，需要恢复进程运行环境，修改pcb内容和相应队列。</p><p>如果某个进程在运行态中，自己发生了系统调用，从运行态进入到了阻塞态，需要操作系统保存运行环境，修改pcb内容和相应队列（阻塞队列）。</p><p>阻塞态转换到就绪态，需要修改pcb内容和相应队列。</p><p>运行态到终止态，回收进程拥有的资源，撤销pcb。</p><h2 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h2><p>原语用于进程控制，因为他的特点是执行期间不可以被中断，只能一气呵成。</p><p>这种不可被中断的操作，即为原子操作。</p><p>原语中采用“关中断指令”和“开中断指令”实现。</p><p><img src="image-20201019172754064.png" alt="image-20201019172754064"></p><p>显然，开/关中断指令的权限非常大，必然只是允许在核心态下执行的特权指令。</p><h1 id="进程控制相关的原语"><a href="#进程控制相关的原语" class="headerlink" title="进程控制相关的原语"></a>进程控制相关的原语</h1><p>进程控制会导致进程状态的转换：所以无论哪个原语，要做的事情有三件。</p><p>1.更新pcb中的信息（修改进程状态标志，将运行环境保存到pcb中，从pcb中恢复运行环境）</p><p>a.所有的进程控制原语一定都会修改进程状态标志</p><p>b.剥夺当前运行进程的cpu使用权必然需要保存其运行的环境</p><p>c.某进程开始运行前必然要恢复期运行环境</p><p>2.将pcb插入合适的队列，就绪队列/阻塞队列</p><p>3.分配和回收资源</p><h2 id="创建原语"><a href="#创建原语" class="headerlink" title="创建原语"></a>创建原语</h2><p><img src="image-20201019203714006.png" alt="image-20201019203714006"></p><h2 id="撤销原语"><a href="#撤销原语" class="headerlink" title="撤销原语"></a>撤销原语</h2><p><img src="image-20201019204241101.png" alt="image-20201019204241101"></p><h2 id="阻塞与唤醒原语"><a href="#阻塞与唤醒原语" class="headerlink" title="阻塞与唤醒原语"></a>阻塞与唤醒原语</h2><p><img src="image-20201019214410047.png" alt="image-20201019214410047"></p><h2 id="进程的切换"><a href="#进程的切换" class="headerlink" title="进程的切换"></a>进程的切换</h2><p><img src="image-20201019214535442.png" alt="image-20201019214535442"></p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201019215211999.png" alt="image-20201019215211999">mei</p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程的状态与转换 （八）</title>
    <link href="/2020/10/19/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2-1/"/>
    <url>/2020/10/19/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2-1/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201019163330020.png" alt="image-20201019163330020"></p><h1 id="进程的状态——三种状态"><a href="#进程的状态——三种状态" class="headerlink" title="进程的状态——三种状态"></a>进程的状态——三种状态</h1><p>进程是程序的一次执行，在这个执行的过程中，有的进程正在被执行，也就是正在被cpu处理，有的需要等待cpu的服务。可见，进程的状态是会有多种变化的。为了方便对各个进程的管理，操作系统需要将进程合理地划分几种状态。</p><p><img src="image-20201019163524511.png" alt="image-20201019163524511"></p><h1 id="进程的状态——另外的两种状态"><a href="#进程的状态——另外的两种状态" class="headerlink" title="进程的状态——另外的两种状态"></a>进程的状态——另外的两种状态</h1><p>创建态与结束态。</p><h2 id="创建态"><a href="#创建态" class="headerlink" title="创建态"></a>创建态</h2><p>操作系统需要完成创建进程。操作系统为这个进程分配pcb，程序段和数据段。</p><h2 id="终止态"><a href="#终止态" class="headerlink" title="终止态"></a>终止态</h2><p>进程运行结束（或者由于bug/异常的原因导致进程无法执行下去，数组越界，除数为0），需要撤销进程。还需要将分配给进程的资源回收，撤销进程pcb等工作。</p><h1 id="进程状态的转换"><a href="#进程状态的转换" class="headerlink" title="进程状态的转换"></a>进程状态的转换</h1><p><img src="image-20201019164122957.png"></p><p>创建成功之后，就会由创建态进入到就绪态，此时等待cpu的资源，其他的资源都准备就绪。</p><p>等到cpu资源来到时，就绪态就会进入到运行态，此时进程被调度。</p><p>运行态时，如果进程运行结束，或者由于bug和异常退出，那么会进入到终止态。</p><p>运行态时，如果时间片运行到头了，就会退回到就绪态。</p><p>运行态时，进程用系统调用请求操作系统的某种资源，或者请求等待某件时间发生，这是一个主动行为的过程，会导致进程进入到阻塞太。</p><p>阻塞态到就绪态，是因为申请的资源被分配了，或者等待事件发生了。但是阻塞态进入到就绪态不是进程自身能控制的，是一种被动的行为。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>阻塞态是无法直接进入到运行态的，也不能由就绪态直接接入到则阻塞态。</p><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p><img src="image-20201019164631212.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>258.各位相加</title>
    <link href="/2020/10/16/258-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/"/>
    <url>/2020/10/16/258-%E5%90%84%E4%BD%8D%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addDigits</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;        <span class="hljs-keyword">while</span>(num/<span class="hljs-number">10</span> != <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;            <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>)&#123;                res += num%<span class="hljs-number">10</span>;                num = num/<span class="hljs-number">10</span>;            &#125;            num = res;        &#125;        <span class="hljs-keyword">return</span> num;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是一个简单的逻辑</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>242.有效的字母异位词</title>
    <link href="/2020/10/16/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2020/10/16/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(String s, String t)</span> </span>&#123;        <span class="hljs-keyword">if</span>(s.length() != t.length())&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">char</span>[] first =s.toCharArray();        <span class="hljs-keyword">char</span>[] last = t.toCharArray();        Arrays.sort(first);        Arrays.sort(last);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();++i)&#123;            <span class="hljs-keyword">if</span>(first[i] != last[i])&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>转成char，比较</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>240.搜索二维矩阵二</title>
    <link href="/2020/10/16/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E4%BA%8C/"/>
    <url>/2020/10/16/240-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">searchMatrix</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-keyword">null</span> || matrix.length &lt;= <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">int</span> width = matrix[<span class="hljs-number">0</span>].length;        <span class="hljs-keyword">int</span> height = matrix.length;        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> last = width-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(first&lt;height &amp;&amp; last&gt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">if</span>(target == matrix[first][last])&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; matrix[first][last])&#123;                first++;            &#125;<span class="hljs-keyword">else</span>&#123;                last--;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>时间复杂度是O(n+m)，算法很简单。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>238.除自身以外数组的乘积</title>
    <link href="/2020/10/16/238-%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/"/>
    <url>/2020/10/16/238-%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E5%A4%96%E6%95%B0%E7%BB%84%E7%9A%84%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] productExceptSelf(<span class="hljs-keyword">int</span>[] nums) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];        &#125;        <span class="hljs-keyword">int</span> length = nums.length;        <span class="hljs-keyword">int</span>[] first = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];        <span class="hljs-keyword">int</span>[] last = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];        first[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;length;++i)&#123;            first[i] = first[i-<span class="hljs-number">1</span>]*nums[i-<span class="hljs-number">1</span>];        &#125;        last[length-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = length-<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;--i)&#123;            last[i] = last[i+<span class="hljs-number">1</span>]*nums[i+<span class="hljs-number">1</span>];        &#125;        <span class="hljs-keyword">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;length;++i)&#123;            result[i] = first[i] * last[i];        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>左边数的数组和右边数的数组，然后进行一次乘积，最后返回数组。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>234.回文链表</title>
    <link href="/2020/10/16/234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/16/234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">if</span>(head.next == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        ListNode quick = head.next;        ListNode slow = head;        <span class="hljs-keyword">while</span>(quick != <span class="hljs-keyword">null</span> &amp;&amp; quick.next != <span class="hljs-keyword">null</span>)&#123;            quick = quick.next.next;            slow = slow.next;        &#125;                ListNode nownode = reverse(slow.next);        slow.next = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">while</span>(nownode != <span class="hljs-keyword">null</span> &amp;&amp; head != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(head.val != nownode.val)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;            nownode = nownode.next;            head= head.next;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    ListNode pre = <span class="hljs-keyword">null</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span></span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> pre;        &#125;        ListNode next = head.next;        head.next = pre;        pre = head;        head = next;        <span class="hljs-keyword">return</span> reverse(head);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>翻转链表，对比</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>230.二叉搜索树中第k小的元素</title>
    <link href="/2020/10/16/230-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/"/>
    <url>/2020/10/16/230-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACk%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        LinkedList&lt;TreeNode&gt; list  = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;            <span class="hljs-keyword">while</span>(root != <span class="hljs-keyword">null</span>)&#123;                list.add(root);                root = root.left;            &#125;            root = list.removeLast();            <span class="hljs-keyword">if</span>(--k == <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">return</span> root.val;            &#125;            root = root.right;        &#125;    &#125;&#125;</code></pre><h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><p>时间复杂度，如果是平衡树logn+k，当树是一个不平衡树n+k，所以所有的节点都在左子树。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>215.数组中的第k个最大元素</title>
    <link href="/2020/10/16/215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
    <url>/2020/10/16/215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> nums[coreFind(nums,nums.length-k,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>)];    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">coreFind</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> k ,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;        <span class="hljs-keyword">if</span>(start&lt;end)&#123;            <span class="hljs-keyword">int</span> pos = quick(nums,start,end);            <span class="hljs-keyword">if</span>(pos == k)&#123;                <span class="hljs-keyword">return</span> pos;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pos&lt;k)&#123;                <span class="hljs-keyword">return</span> coreFind(nums,k,pos+<span class="hljs-number">1</span>,end);            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">return</span> coreFind(nums,k,start,pos-<span class="hljs-number">1</span>);            &#125;        &#125;        <span class="hljs-keyword">return</span> start;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">quick</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;            <span class="hljs-keyword">if</span>(start&gt; end)&#123;                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">int</span> temp = nums[start];            <span class="hljs-keyword">int</span> i = start;            <span class="hljs-keyword">int</span> j = end;            <span class="hljs-keyword">while</span>(i&lt;j)&#123;                <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; nums[j] &gt;= temp)&#123;                    j--;                &#125;                <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; nums[i] &lt;= temp)&#123;                    i++;                &#125;                <span class="hljs-keyword">if</span>(i&lt;j)&#123;                    <span class="hljs-keyword">int</span> tmp = nums[i];                    nums[i] = nums[j];                    nums[j] = tmp;                &#125;            &#125;            nums[start] = nums[i];            nums[i] =temp;            <span class="hljs-keyword">return</span> i;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第k大，那么在递增排序，他的位置就是第nums.length-k个。</p><p>用快排和二分排序，时间复杂度O(n)</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>198.打家劫舍</title>
    <link href="/2020/10/16/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <url>/2020/10/16/198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];        &#125;        <span class="hljs-keyword">int</span> pre = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> cur = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">int</span> temp =cur;            cur = Math.max(cur,pre+nums[i]);            pre = temp;        &#125;        <span class="hljs-keyword">return</span> cur;    &#125;&#125;</code></pre><h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><p>其实这是一道动态规划的题，只不过化简了，我们只需用一个变量就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>189.旋转数组</title>
    <link href="/2020/10/16/189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/16/189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        k  = k%nums.length;        reverse(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);        reverse(nums,k,nums.length-<span class="hljs-number">1</span>);        reverse(nums,<span class="hljs-number">0</span>,k-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;        <span class="hljs-keyword">while</span>(start&lt;end)&#123;            <span class="hljs-keyword">int</span> temp = nums[start];            nums[start] = nums[end];            nums[end] = temp;            start++;            end--;        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>反转三次，原地修改。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>179.最大的数</title>
    <link href="/2020/10/16/179-%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0/"/>
    <url>/2020/10/16/179-%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">largestNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;        &#125;        String[] string = <span class="hljs-keyword">new</span> String[nums.length];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;            string[i] = Integer.toString(nums[i]);        &#125;        Arrays.sort(string,(o1,o2) -&gt; (o2+o1).compareTo(o1+o2));        <span class="hljs-keyword">if</span>(string[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;0&quot;</span>))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span>;        &#125;        StringBuilder stringbuilder = <span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;string.length;++i)&#123;            stringbuilder.append(string[i]);        &#125;        <span class="hljs-keyword">return</span> stringbuilder.toString();    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>利用java中的compareTo</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>172.阶乘后的零</title>
    <link href="/2020/10/16/172-%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/"/>
    <url>/2020/10/16/172-%E9%98%B6%E4%B9%98%E5%90%8E%E7%9A%84%E9%9B%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">trailingZeroes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span> zeroCount = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)&#123;            n /=<span class="hljs-number">5</span>;            zeroCount +=n;        &#125;        <span class="hljs-keyword">return</span> zeroCount;    &#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是当前的数反复除以5就可以，因为从5到1相乘为20，所以之后每有一个5就会多一个零。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>162.寻找峰值</title>
    <link href="/2020/10/16/162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
    <url>/2020/10/16/162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findPeakElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">return</span> core(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;        <span class="hljs-keyword">if</span>(left == right)&#123;            <span class="hljs-keyword">return</span> left;        &#125;        <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(nums[mid] &gt;nums[mid+<span class="hljs-number">1</span>])&#123;            <span class="hljs-keyword">return</span> core(nums,left,mid);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> core(nums,mid+<span class="hljs-number">1</span>,right);        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>因为想找的点永远是nums[i] &gt;nums[i+1]那么这个点就是峰值点。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>152.乘积最大子数组</title>
    <link href="/2020/10/16/152-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/16/152-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> max = nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">int</span> min = nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">int</span> res = nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">int</span> length = nums.length;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;length;++i)&#123;            <span class="hljs-keyword">int</span> maxf = max;            <span class="hljs-keyword">int</span> minf = min;            max = Math.max(maxf*nums[i],Math.max(nums[i],minf*nums[i]));            min = Math.min(minf*nums[i],Math.min(nums[i],maxf*nums[i]));            res = Math.max(res,max);        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>动态规划</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>150.逆波兰表达式</title>
    <link href="/2020/10/16/150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/10/16/150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(String[] tokens)</span> </span>&#123;        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();        Integer op1,op2;        <span class="hljs-keyword">for</span>(String s:tokens)&#123;            <span class="hljs-keyword">switch</span>(s)&#123;                <span class="hljs-keyword">case</span><span class="hljs-string">&quot;+&quot;</span>:                        op2 = stack.pop();                        op1 = stack.pop();                        stack.push(op2+op1);                        <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span><span class="hljs-string">&quot;-&quot;</span>:                        op2 = stack.pop();                        op1 = stack.pop();                        stack.push(op1-op2);                        <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span><span class="hljs-string">&quot;*&quot;</span>:                    op2 = stack.pop();                    op1 = stack.pop();                    stack.push(op2*op1);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span><span class="hljs-string">&quot;/&quot;</span>:                    op2 = stack.pop();                    op1 = stack.pop();                    stack.push(op1/op2);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">default</span>:                    stack.push(Integer.valueOf(s));                    <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> stack.pop();    &#125;&#125;</code></pre><h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><p>优化之后，用switch，就是用栈，有操作符号，返回前两个数然后进行操作，在入栈。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>148.排序链表</title>
    <link href="/2020/10/16/148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/16/148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> head;        &#125;        ListNode quick = head.next;        ListNode slow = head;        <span class="hljs-keyword">while</span>(quick != <span class="hljs-keyword">null</span> &amp;&amp; quick.next != <span class="hljs-keyword">null</span>)&#123;            quick = quick.next.next;            slow = slow.next;        &#125;        ListNode temp = slow.next;        slow.next = <span class="hljs-keyword">null</span>;        ListNode left = sortList(head);        ListNode right = sortList(temp);        ListNode cur = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        ListNode res = cur;        <span class="hljs-keyword">while</span>(left != <span class="hljs-keyword">null</span> &amp;&amp; right != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(left.val &lt; right.val)&#123;                cur.next = left;                left = left.next;            &#125;<span class="hljs-keyword">else</span>&#123;                cur.next = right;                right = right.next;            &#125;            cur = cur.next;        &#125;        cur.next = (left!= <span class="hljs-keyword">null</span>)?left:right;        <span class="hljs-keyword">return</span> res.next;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>归并排序，快慢指针找到中间节点。然后进行递归排序。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>146.LRU缓存机制</title>
    <link href="/2020/10/16/146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/10/16/146-LRU%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LRUCache</span> </span>&#123;   LinkedList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();    HashMap&lt;Integer,Integer&gt; hashmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-keyword">int</span> capacity;    <span class="hljs-keyword">int</span> size;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        list.addFirst(number);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        list.remove(<span class="hljs-keyword">new</span> Integer(number));    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveToHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> number)</span></span>&#123;        remove(number);        addNode(number);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">popTail</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> list.pollLast();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LRUCache</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;        <span class="hljs-keyword">this</span>.size = <span class="hljs-number">0</span>;        <span class="hljs-keyword">this</span>.capacity = capacity;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;        <span class="hljs-keyword">if</span>(hashmap.containsKey(key))&#123;            moveToHead(key);            <span class="hljs-keyword">return</span> hashmap.get(key);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">put</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key, <span class="hljs-keyword">int</span> value)</span> </span>&#123;        <span class="hljs-keyword">if</span>(hashmap.containsKey(key))&#123;            hashmap.put(key,value);            moveToHead(key);        &#125;<span class="hljs-keyword">else</span>&#123;            hashmap.put(key,value);            addNode(key);            size++;        &#125;        <span class="hljs-keyword">if</span>(size &gt; capacity)&#123;            <span class="hljs-keyword">int</span> number = popTail();            hashmap.remove(number);            --size;        &#125;    &#125;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Your LRUCache object will be instantiated and called as such:</span><span class="hljs-comment"> * LRUCache obj = new LRUCache(capacity);</span><span class="hljs-comment"> * int param_1 = obj.get(key);</span><span class="hljs-comment"> * obj.put(key,value);</span><span class="hljs-comment"> */</span></code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>逻辑</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>144.二叉树的前序遍历</title>
    <link href="/2020/10/15/144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/15/144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;       List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        TreeNode pre = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">while</span>(root != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(root.left != <span class="hljs-keyword">null</span>)&#123;                pre = root.left;                <span class="hljs-keyword">while</span>(pre.right != <span class="hljs-keyword">null</span>  &amp;&amp; pre.right != root)&#123;                    pre =pre.right;                &#125;                <span class="hljs-keyword">if</span>(pre.right == <span class="hljs-keyword">null</span>)&#123;                    pre.right = root;                    res.add(root.val);                    root = root.left;                &#125;<span class="hljs-keyword">else</span>&#123;                                        pre.right = <span class="hljs-keyword">null</span>;                    root = root.right;                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                res.add(root.val);                root =root.right;            &#125;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实跟中序遍历，非递归没什么区别的，就是什么时候加入这个值，很有说道。中序遍历时，当该pre节点已经指向了root，这个时候在把节点的值加入。前序遍历的时候，如果pre没有指向root，这个时候加入。大同小异其实都一样的。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>143.重排链表</title>
    <link href="/2020/10/15/143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/15/143-%E9%87%8D%E6%8E%92%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reorderList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> ;        &#125;        ListNode first = head;        ListNode last = head;        <span class="hljs-keyword">while</span>(last  != <span class="hljs-keyword">null</span> &amp;&amp; last.next != <span class="hljs-keyword">null</span>)&#123;            first = first.next;            last = last.next.next;;        &#125;        ListNode newHead = first.next;        first.next = <span class="hljs-keyword">null</span>;        ListNode newnode = reverse(newHead);        ListNode result = head;        <span class="hljs-keyword">while</span>(newnode != <span class="hljs-keyword">null</span>)&#123;            ListNode temp  = newnode.next;            newnode.next = head.next;            head.next = newnode;            head = newnode.next;            newnode = temp;        &#125;    &#125;    ListNode pre = <span class="hljs-keyword">null</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head)</span></span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> pre;        &#125;        ListNode next = head.next;        head.next = pre;        pre = head;        head = next;        <span class="hljs-keyword">return</span> reverse(head);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>好不容易有一道自己做出来差不多的题了，首先利用快慢指针找到中点，然后反转中点后面的链表的，然后相当于并归两个链表。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>142.环形链表二</title>
    <link href="/2020/10/15/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%BA%8C/"/>
    <url>/2020/10/15/142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123;</span><span class="hljs-comment"> *         val = x;</span><span class="hljs-comment"> *         next = null;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode meet = core(head);        <span class="hljs-keyword">if</span>(meet == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode first = head;        <span class="hljs-keyword">while</span>(first != meet)&#123;            first= first.next;            meet = meet.next;        &#125;        <span class="hljs-keyword">return</span> meet;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">core</span><span class="hljs-params">(ListNode head)</span></span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode first = head;        ListNode last = head;        <span class="hljs-keyword">while</span>(last != <span class="hljs-keyword">null</span> &amp;&amp; last.next != <span class="hljs-keyword">null</span>)&#123;            first = first.next;            last = last.next.next;            <span class="hljs-keyword">if</span>(first == last)&#123;                <span class="hljs-keyword">return</span> first;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>找到第一次相遇的地方（快慢指针）、</p><p>然后从head头部和第一次相遇的地方遍历，什么时候再次相遇就是环的入口。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>141.环形链表</title>
    <link href="/2020/10/15/141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/15/141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123;</span><span class="hljs-comment"> *         val = x;</span><span class="hljs-comment"> *         next = null;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasCycle</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;           ListNode pre = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);        pre.next = head;        ListNode first = pre;        ListNode last = pre;        <span class="hljs-keyword">while</span>(last != <span class="hljs-keyword">null</span> &amp;&amp; last.next != <span class="hljs-keyword">null</span>)&#123;            last = last.next.next;            first = first.next;            <span class="hljs-keyword">if</span>(last == first)&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>快慢指针</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>139.单词拆分</title>
    <link href="/2020/10/15/139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
    <url>/2020/10/15/139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;        HashSet&lt;String&gt; hashset = <span class="hljs-keyword">new</span> HashSet(wordDict);        <span class="hljs-keyword">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[s.length()+<span class="hljs-number">1</span>];        dp[<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=s.length();++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;i;++j)&#123;                <span class="hljs-keyword">if</span>(dp[j] &amp;&amp; hashset.contains(s.substring(j,i)))&#123;                    dp[i] = <span class="hljs-keyword">true</span>;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>动态规划</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>137.只出现一次的数字二</title>
    <link href="/2020/10/15/137-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%E4%BA%8C/"/>
    <url>/2020/10/15/137-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">32</span>];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num :nums)&#123;            <span class="hljs-keyword">int</span> mask = <span class="hljs-number">1</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">31</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;                <span class="hljs-keyword">if</span>((num &amp; mask) != <span class="hljs-number">0</span>)&#123;                    result[i]++;                &#125;                mask &lt;&lt;=<span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;++i)&#123;            res &lt;&lt;=<span class="hljs-number">1</span>;            res +=result[i]%<span class="hljs-number">3</span>;        &#125;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>因为是int类型，相当于有32个位置，来存储当前每个位出现多少次，因为其他每个数都出现3次，所以%3就知道哪位多了。最后返回res</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>136.只出现一次的数字</title>
    <link href="/2020/10/15/136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2020/10/15/136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">int</span> result = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i :nums)&#123;            result ^=i;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>因为任何一个人异或他本身都等于0，所以每个数字除了那个数字都出现了两次。所有的数字都异或一次就可以。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>125.验证回文串</title>
    <link href="/2020/10/15/125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <url>/2020/10/15/125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        s= s.toLowerCase();        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> last = s.length()-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(first&lt;=last)&#123;            <span class="hljs-keyword">while</span>(!((s.charAt(first) &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s.charAt(first) &lt;=<span class="hljs-string">&#x27;z&#x27;</span>) || (s.charAt(first) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(first) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)))&#123;                first++;                <span class="hljs-keyword">if</span>(first&gt;last)&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;            <span class="hljs-keyword">while</span>(!((s.charAt(last) &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; s.charAt(last) &lt;=<span class="hljs-string">&#x27;z&#x27;</span>) || (s.charAt(last) &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; s.charAt(last) &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)))&#123;                last--;                <span class="hljs-keyword">if</span>(first&gt;last)&#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;            <span class="hljs-keyword">if</span>(first &lt;= last &amp;&amp;  s.charAt(first) != s.charAt(last))&#123;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;            first++;            last--;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>简单的逻辑判断。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>121.买卖股票的最佳时机</title>
    <link href="/2020/10/15/121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <url>/2020/10/15/121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;        <span class="hljs-keyword">if</span>(prices == <span class="hljs-keyword">null</span> || prices.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> minprice = prices[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">1</span>;i&lt;prices.length;++i)&#123;            <span class="hljs-keyword">if</span>(prices[i] &lt;minprice)&#123;                minprice = prices[i];            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prices[i] - minprice &gt; max)&#123;                max = prices[i] - minprice;            &#125;        &#125;        <span class="hljs-keyword">return</span> max;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这题是比较简单的题，照理说用动态规划。但是可以加快，就不用动态规划了。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>114.二叉树展开为链表</title>
    <link href="/2020/10/15/114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/15/114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        core(root);        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;list.size();++i)&#123;            TreeNode pre = list.get(i-<span class="hljs-number">1</span>);            TreeNode cur = list.get(i);            pre.left =<span class="hljs-keyword">null</span>;            pre.right =cur;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(TreeNode root)</span></span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        list.add(root);        core(root.left);        core(root.right);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>先把所有的节点放在一个list中，然后遍历去进行，左边为null，右边为下一个节点。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>109.有序链表转换二叉搜索树</title>
    <link href="/2020/10/15/109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2020/10/15/109-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">sortedListToBST</span><span class="hljs-params">(ListNode head)</span> </span>&#123;       List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();       <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;           <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;       &#125;        <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span>)&#123;           list.add(head.val);       &#125;       <span class="hljs-keyword">int</span>[] nums = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[list.size()];       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;list.size();++i)&#123;           nums[i] = list.get(i);       &#125;       <span class="hljs-keyword">return</span> core(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;        <span class="hljs-keyword">if</span>(start&gt;end)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">int</span> mid = (start+end)/<span class="hljs-number">2</span>;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(nums[mid]);        root.left = core(nums,start,mid-<span class="hljs-number">1</span>);        root.right = core(nums,mid+<span class="hljs-number">1</span>,end);        <span class="hljs-keyword">return</span> root;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">sortedListToBST</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">return</span> core(head,<span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">core</span><span class="hljs-params">(ListNode left,ListNode right)</span></span>&#123;        <span class="hljs-keyword">if</span>(left == right)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode mid = coreMid(left,right);        TreeNode node = <span class="hljs-keyword">new</span> TreeNode(mid.val);        node.left = core(left,mid);        node.right = core(mid.next,right);        <span class="hljs-keyword">return</span> node;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">coreMid</span><span class="hljs-params">(ListNode left,ListNode right)</span></span>&#123;        ListNode fast = left;        ListNode slow = left;        <span class="hljs-keyword">while</span>(fast != right &amp;&amp; fast.next != right)&#123;            fast=  fast.next;            fast = fast.next;            slow = slow.next;        &#125;        <span class="hljs-keyword">return</span> slow;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一种方法是我的题解，相当于把链表转换成为数组，然后根据上一题的方式，进行递归得到最后的答案。但是时间复杂度特别高，击败了7%的用户。</p><p>第二种方法也是需要这么做，但是不用转换成数组了，直接用链表去做，找到中间的元素就用快慢指针去做即可。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>108.将有序数组转换成为二叉搜索树</title>
    <link href="/2020/10/15/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2020/10/15/108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">sortedArrayToBST</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">return</span> core(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;        <span class="hljs-keyword">if</span>(start&gt;end)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;         <span class="hljs-keyword">int</span> mid = (start+end)/<span class="hljs-number">2</span>;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(nums[mid]);        root.left = core(nums,start,mid-<span class="hljs-number">1</span>);        root.right = core(nums,mid+<span class="hljs-number">1</span>,end);        <span class="hljs-keyword">return</span> root;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是一种递归，二叉搜索树，要保证两边高度相差不超过1.</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>105.从前序和中序遍历构造二叉树</title>
    <link href="/2020/10/15/105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/15/105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;        <span class="hljs-keyword">if</span> (preorder == <span class="hljs-keyword">null</span> || preorder.length == <span class="hljs-number">0</span> || inorder == <span class="hljs-keyword">null</span> || inorder.length == <span class="hljs-number">0</span> || preorder.length != inorder.length) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">return</span> core(preorder, <span class="hljs-number">0</span>, preorder.length - <span class="hljs-number">1</span>, inorder, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder,<span class="hljs-keyword">int</span> ps,<span class="hljs-keyword">int</span> pe,<span class="hljs-keyword">int</span>[] inorder,<span class="hljs-keyword">int</span> is,<span class="hljs-keyword">int</span> ie)</span></span>&#123;        <span class="hljs-keyword">if</span>(ps&gt;pe || is&gt;ie)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[ps]);        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;preorder.length;++i)&#123;            <span class="hljs-keyword">if</span>(preorder[ps] == inorder[is+i])&#123;                index = i;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        root.left = core(preorder,ps+<span class="hljs-number">1</span>,ps+index,inorder,is,is+index-<span class="hljs-number">1</span>);        root.right = core(preorder,ps+index+<span class="hljs-number">1</span>,pe,inorder,is+index+<span class="hljs-number">1</span>,ie);        <span class="hljs-keyword">return</span> root;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>做过好多遍了，要考虑开始与结束。</p><p>还有这个index记住，是加的索引，不是哪里截止了。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>104.二叉树的最大深度</title>
    <link href="/2020/10/15/104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <url>/2020/10/15/104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">return</span> core(root);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">core</span><span class="hljs-params">(TreeNode root)</span></span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> left = core(root.left);        <span class="hljs-keyword">int</span> right = core(root.right);        <span class="hljs-keyword">return</span> Math.max(left,right)+<span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>挺简单的，就是遍历出一个深度。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>103.二叉树的锯齿层次遍历</title>
    <link href="/2020/10/15/103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/15/103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) &#123;        List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        LinkedList&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        list.add(root);        <span class="hljs-keyword">int</span> level = <span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(!list.isEmpty())&#123;            <span class="hljs-keyword">int</span> size = list.size();            LinkedList&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;size;++i)&#123;                TreeNode cur = list.pollLast();                <span class="hljs-keyword">if</span>(cur.left != <span class="hljs-keyword">null</span>)&#123;                    list.addFirst(cur.left);                &#125;                <span class="hljs-keyword">if</span>(cur.right != <span class="hljs-keyword">null</span>)&#123;                    list.addFirst(cur.right);                &#125;                <span class="hljs-keyword">if</span>((level&amp;<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)&#123;                    queue.addFirst(cur.val);                &#125;<span class="hljs-keyword">else</span>&#123;                    queue.addLast(cur.val);                &#125;                            &#125;            lists.add(queue);            level++;        &#125;        <span class="hljs-keyword">return</span> lists;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>用一个双向链表即可，用size判断奇数还是偶数，然后用linkedlist从前边还是后边去加。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>102.二叉树的层次遍历</title>
    <link href="/2020/10/15/102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/15/102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;        List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        LinkedList&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        list.add(root);        <span class="hljs-keyword">while</span>(!list.isEmpty())&#123;            LinkedList&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();            <span class="hljs-keyword">while</span>(!list.isEmpty())&#123;                stack.addFirst(list.pollLast());            &#125;            List&lt;Integer&gt; arraylist = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();            <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;                TreeNode cur = stack.pollLast();                arraylist.add(cur.val);                <span class="hljs-keyword">if</span>(cur.left != <span class="hljs-keyword">null</span>)&#123;                    list.addFirst(cur.left);                &#125;                <span class="hljs-keyword">if</span>(cur.right != <span class="hljs-keyword">null</span>)&#123;                    list.addFirst(cur.right);                &#125;            &#125;            lists.add(arraylist);        &#125;        <span class="hljs-keyword">return</span> lists;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>自己有点愚蠢在里面加了一层双向链表去做，其实用size得到当前有多少节点，然后遍历出来就行了</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>101.对称二叉树</title>
    <link href="/2020/10/15/101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/10/15/101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">return</span> core(root,root);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">core</span><span class="hljs-params">(TreeNode first,TreeNode last)</span></span>&#123;        <span class="hljs-keyword">if</span>(first == <span class="hljs-keyword">null</span> &amp;&amp; last == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">if</span>(first == <span class="hljs-keyword">null</span> || last == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">if</span>(first.val != last.val)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> core(first.left,last.right) &amp;&amp; core(first.right,last.left);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>没什么难的，就是判断是否对称二叉树，左边的与右边（数值）是否相等。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>98.验证二叉搜索树</title>
    <link href="/2020/10/15/98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2020/10/15/98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">return</span>  core(root,<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">core</span><span class="hljs-params">(TreeNode root,Integer top,Integer bot)</span></span>&#123;        <span class="hljs-keyword">if</span>(root == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">if</span>(bot != <span class="hljs-keyword">null</span> &amp;&amp; root.val&lt;=bot)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">if</span>(top != <span class="hljs-keyword">null</span> &amp;&amp; root.val &gt;= top)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">if</span>(!core(root.left,root.val,bot))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">if</span>(!core(root.right,top,root.val))&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>递归，对于左子树来说，不能大于他的父节点，对于右子树来说，不能小于他的父节点。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>96.不同的二叉搜索树一</title>
    <link href="/2020/10/15/96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%80/"/>
    <url>/2020/10/15/96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n+<span class="hljs-number">1</span>];        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;i&lt;=n;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;=i;++j)&#123;                dp[i] +=dp[j-<span class="hljs-number">1</span>]*dp[i-j];            &#125;        &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>动态规划，找到方程。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>95.不同的二叉搜索树</title>
    <link href="/2020/10/15/95-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2020/10/15/95-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">generateTrees</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        &#125;        <span class="hljs-keyword">return</span> core(<span class="hljs-number">1</span>,n);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;TreeNode&gt; <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end)</span></span>&#123;        List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">if</span>(start&gt;end)&#123;            list.add(<span class="hljs-keyword">null</span>);            <span class="hljs-keyword">return</span> list;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = start;i&lt;=end;++i)&#123;            List&lt;TreeNode&gt; lefts = core(start,i-<span class="hljs-number">1</span>);            List&lt;TreeNode&gt; rights = core(i+<span class="hljs-number">1</span>,end);            <span class="hljs-keyword">for</span>(TreeNode left:lefts)&#123;                <span class="hljs-keyword">for</span>(TreeNode right:rights)&#123;                    TreeNode cur = <span class="hljs-keyword">new</span> TreeNode(i);                    cur.left = left;                    cur.right = right;                    list.add(cur);                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> list;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>对于1来说，左边就是null了，右边是list包含（2~5），所以这种排列也有很多种可怜，就用递归去慢慢递归，然后得出结果。</p><p>有一个误区就是list不是总体的list，而是单独的一个list作为return的结果。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>94.二叉树的中序遍历</title>
    <link href="/2020/10/14/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/10/14/94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs vbscript">/** * Definition <span class="hljs-keyword">for</span> a binary tree node. * <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> TreeNode &#123; *     <span class="hljs-built_in">int</span> val; *     TreeNode <span class="hljs-built_in">left</span>; *     TreeNode <span class="hljs-built_in">right</span>; *     TreeNode() &#123;&#125; *     TreeNode(<span class="hljs-built_in">int</span> val) &#123; this.val = val; &#125; *     TreeNode(<span class="hljs-built_in">int</span> val, TreeNode <span class="hljs-built_in">left</span>, TreeNode <span class="hljs-built_in">right</span>) &#123; *         this.val = val; *         this.<span class="hljs-built_in">left</span> = <span class="hljs-built_in">left</span>; *         this.<span class="hljs-built_in">right</span> = <span class="hljs-built_in">right</span>; *     &#125; * &#125; */<span class="hljs-keyword">class</span> Solution &#123;        <span class="hljs-keyword">public</span> List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123;        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        TreeNode pre = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">while</span>(root != <span class="hljs-literal">null</span>)&#123;            <span class="hljs-keyword">if</span>(root.<span class="hljs-built_in">left</span> != <span class="hljs-literal">null</span>)&#123;                pre = root.<span class="hljs-built_in">left</span>;                <span class="hljs-keyword">while</span>(pre.<span class="hljs-built_in">right</span> != <span class="hljs-literal">null</span>  &amp;&amp; pre.<span class="hljs-built_in">right</span> != root)&#123;                    pre =pre.<span class="hljs-built_in">right</span>;                &#125;                <span class="hljs-keyword">if</span>(pre.<span class="hljs-built_in">right</span> == <span class="hljs-literal">null</span>)&#123;                    pre.<span class="hljs-built_in">right</span> = root;                    root = root.<span class="hljs-built_in">left</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    res.add(root.val);                    pre.<span class="hljs-built_in">right</span> = <span class="hljs-literal">null</span>;                    root = root.<span class="hljs-built_in">right</span>;                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                res.add(root.val);                root =root.<span class="hljs-built_in">right</span>;            &#125;        &#125;        return res;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>mirrors算法，首先root是根，先看他是否有左节点，如果有，pre首先为他的左节点，然后这个时候一直根据pre向右遍历，直到这个pre的右节点为空（那么就设置当前pre的右节点连接到root上面，然后把root = root.left）,如果当前右节点已经指向了root，那么打印出这个节点，把这个节点右节点重新指向空，并且root = root.right。如果左节点为空，那么直接说明已经到了叶子节点，list.add（root.val）即可，然后root = root.right</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>92.反转链表二</title>
    <link href="/2020/10/14/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E4%BA%8C/"/>
    <url>/2020/10/14/92-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseBetween</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> reverse(head,n);        &#125;<span class="hljs-keyword">else</span>&#123;            head.next =  reverseBetween(head.next,m-<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">return</span> head;    &#125;    ListNode pre = <span class="hljs-keyword">null</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverse</span><span class="hljs-params">(ListNode head,<span class="hljs-keyword">int</span> n)</span></span>&#123;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;            pre = head.next;            <span class="hljs-keyword">return</span> head;        &#125;        ListNode last = reverse(head.next,n-<span class="hljs-number">1</span>);        head.next.next = head;        head.next = pre;        <span class="hljs-keyword">return</span> last;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这是一个看到的算法，用递归的方式去做很简单的。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>91.解码方法</title>
    <link href="/2020/10/14/91-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
    <url>/2020/10/14/91-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length()&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">char</span>[] chars = s.toCharArray();        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length()];        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span>(chars[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;chars.length;++i)&#123;            <span class="hljs-keyword">if</span>(chars[i] != <span class="hljs-string">&#x27;0&#x27;</span>)&#123;                dp[i] = dp[i-<span class="hljs-number">1</span>];            &#125;            <span class="hljs-keyword">int</span> temp = <span class="hljs-number">10</span> *(chars[i-<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>) + chars[i]-<span class="hljs-string">&#x27;0&#x27;</span>;            <span class="hljs-keyword">if</span>(temp &lt;=<span class="hljs-number">26</span> &amp;&amp; temp &gt;=<span class="hljs-number">10</span>)&#123;                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;                    dp[i]++;                &#125;<span class="hljs-keyword">else</span>&#123;                    dp[i] +=dp[i-<span class="hljs-number">2</span>];                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>动态规划，如果当前的数字大于等于10并且小于等于26那么说明，他可以凑成一个组合。dp[i]+=dp[i-2].</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>90.子集二</title>
    <link href="/2020/10/14/90-%E5%AD%90%E9%9B%86%E4%BA%8C/"/>
    <url>/2020/10/14/90-%E5%AD%90%E9%9B%86%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    HashSet&lt;List&lt;Integer&gt;&gt; hashset = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="hljs-keyword">int</span>[] nums) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        Arrays.sort(nums);        core(<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(),nums);        <span class="hljs-keyword">return</span> lists;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, List&lt;Integer&gt; list,<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;        <span class="hljs-keyword">if</span>(!hashset.contains(list))&#123;            hashset.add(<span class="hljs-keyword">new</span> ArrayList(list));            lists.add(<span class="hljs-keyword">new</span> ArrayList(list));        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = index;i&lt;nums.length;++i)&#123;            list.add(nums[i]);            core(i+<span class="hljs-number">1</span>,list,nums);            list.remove(list.size()-<span class="hljs-number">1</span>);        &#125;    &#125; &#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>相比于子集一，就是在外面加了一套hashset用于过滤重复的，最后也直接返回lists即可。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>88.合并两个有序数组</title>
    <link href="/2020/10/14/88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/14/88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span> count = m+n-<span class="hljs-number">1</span> ;         m = m-<span class="hljs-number">1</span>;         n = n-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(m &gt;=<span class="hljs-number">0</span> &amp;&amp; n &gt;=<span class="hljs-number">0</span> )&#123;            <span class="hljs-keyword">if</span>(nums1[m] &gt;nums2[n])&#123;                nums1[count] = nums1[m--];            &#125;<span class="hljs-keyword">else</span>&#123;                nums1[count] = nums2[n--];            &#125;            count--;        &#125;        <span class="hljs-keyword">while</span>(m &gt;=<span class="hljs-number">0</span> &amp;&amp; n&lt;<span class="hljs-number">0</span>)&#123;            nums1[count--] = nums1[m--];        &#125;        <span class="hljs-keyword">while</span>(n &gt;= <span class="hljs-number">0</span> &amp;&amp; m&lt;<span class="hljs-number">0</span>)&#123;            nums1[count--] = nums2[n--];        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>要记住，可能存在一个数组已经到头了，但是另一个数组还有数组存在的情况，所以要根据剩余的进行一次放到数组nums1中。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>86.分隔链表</title>
    <link href="/2020/10/14/86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/14/86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">partition</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> x)</span> </span>&#123;        ListNode before_head = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        ListNode before = before_head;        ListNode after_head = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);        ListNode after = after_head;        <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">if</span>(head.val &lt;x)&#123;                before.next = head;                before = before.next;            &#125;<span class="hljs-keyword">else</span>&#123;                after.next = head;                after = after.next;            &#125;            head =head.next;        &#125;        after.next =<span class="hljs-keyword">null</span>;        before.next = after_head.next;        <span class="hljs-keyword">return</span> before_head.next;    &#125;&#125;</code></pre><h1 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h1><p>新建两个链表，然后根据这两个链表在进行排列。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>83.删除排序链表中的重复元素</title>
    <link href="/2020/10/14/83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <url>/2020/10/14/83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode result = head;                <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span> &amp;&amp; head.next != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">while</span>(head != <span class="hljs-keyword">null</span> &amp;&amp; head.next != <span class="hljs-keyword">null</span> &amp;&amp; head.val == head.next.val)&#123;                head.next = head.next.next;            &#125;            head = head.next;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一次while判断之后，第二次while也要判断一次。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>79.单词搜索</title>
    <link href="/2020/10/14/79-%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
    <url>/2020/10/14/79-%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word)</span> </span>&#123;        <span class="hljs-keyword">int</span> row = board.length;        <span class="hljs-keyword">int</span> col = board[<span class="hljs-number">0</span>].length;        Boolean[][] flag =<span class="hljs-keyword">new</span> Boolean[row][col];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;i&lt;row;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;col;++j) &#123;                flag[i][j] = <span class="hljs-keyword">false</span>;            &#125;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;i&lt;row;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;col;++j)&#123;                <span class="hljs-keyword">if</span>(Core(board,word,<span class="hljs-number">0</span>,flag,row,col,i,j))&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">Core</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board,String word,<span class="hljs-keyword">int</span> index,Boolean[][] flag,<span class="hljs-keyword">int</span> row,<span class="hljs-keyword">int</span> col,<span class="hljs-keyword">int</span> rows,<span class="hljs-keyword">int</span> cols)</span></span>&#123;        <span class="hljs-keyword">if</span>(index == word.length())&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">boolean</span> result = <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">if</span>(rows &gt;=<span class="hljs-number">0</span> &amp;&amp; rows&lt; row &amp;&amp; cols &gt;=<span class="hljs-number">0</span> &amp;&amp; cols&lt;col &amp;&amp; flag[rows][cols] == <span class="hljs-keyword">false</span> &amp;&amp; board[rows][cols] ==word.charAt(index))&#123;            flag[rows][cols] = <span class="hljs-keyword">true</span>;            result = Core(board,word,index+<span class="hljs-number">1</span>,flag,row,col,rows+<span class="hljs-number">1</span>,cols)||                    Core(board,word,index+<span class="hljs-number">1</span>,flag,row,col,rows-<span class="hljs-number">1</span>,cols)||                    Core(board,word,index+<span class="hljs-number">1</span>,flag,row,col,rows,cols+<span class="hljs-number">1</span>)||                    Core(board,word,index+<span class="hljs-number">1</span>,flag,row,col,rows,cols-<span class="hljs-number">1</span>);            flag[rows][cols] =<span class="hljs-keyword">false</span>;            <span class="hljs-keyword">return</span> result;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>相当于遍历整个图</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>78.子集</title>
    <link href="/2020/10/14/78-%E5%AD%90%E9%9B%86/"/>
    <url>/2020/10/14/78-%E5%AD%90%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="hljs-keyword">int</span>[] nums) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        core(nums,<span class="hljs-keyword">new</span> ArrayList(),<span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> lists;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,List&lt;Integer&gt; list,<span class="hljs-keyword">int</span> index)</span></span>&#123;        lists.add(<span class="hljs-keyword">new</span> ArrayList(list));        <span class="hljs-keyword">if</span>(list.size() == nums.length)&#123;            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = index;i&lt;nums.length;++i)&#123;            list.add(nums[i]);            core(nums,list,i+<span class="hljs-number">1</span>);            list.remove(list.size()-<span class="hljs-number">1</span>);        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>遍历，全排列，所有有一个list为[]</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>75.颜色分类</title>
    <link href="/2020/10/13/75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
    <url>/2020/10/13/75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sortColors</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> last = nums.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;=last;++i)&#123;            <span class="hljs-keyword">while</span>(i&lt;=last &amp;&amp; nums[i] == <span class="hljs-number">2</span>)&#123;                <span class="hljs-keyword">int</span> temp = nums[i];                nums[i] = nums[last];                nums[last] = temp;                --last;            &#125;            <span class="hljs-keyword">if</span>(nums[i] == <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">int</span> temp = nums[i];                nums[i] = nums[first];                nums[first] = temp;                first++;             &#125;        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>采用的是双指针的思想，因为后面的指针后面一直就是2，前面的指针就是1，所以while判断是为了如果超过last指针的，直接跳出循环即可。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>70.爬楼梯</title>
    <link href="/2020/10/13/70-%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <url>/2020/10/13/70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(n &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">2</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;        &#125;        <span class="hljs-keyword">int</span> f1 = <span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> f2 = <span class="hljs-number">2</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>;i&lt;=n;++i)&#123;            <span class="hljs-keyword">int</span> temp = f1+f2;            f1 = f2;            f2= temp;        &#125;        <span class="hljs-keyword">return</span> f2;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这个需要考虑用中间变量去存，如果用数组的话，太占用空间复杂度。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>69.x的平方根</title>
    <link href="/2020/10/13/69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
    <url>/2020/10/13/69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = x;        <span class="hljs-keyword">int</span> ans = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;            <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;            <span class="hljs-keyword">if</span>((<span class="hljs-keyword">long</span>)mid*mid &lt;=x)&#123;                ans = mid;                left = mid+<span class="hljs-number">1</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                right = mid-<span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> ans;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一：一定记住比较的使用用long在外面扩上，防止溢出。</p><p>第二：比较的时候，如果当前值已经小于等于，把left要置位mid+1;如果大于把right置位mid-1。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>66.加一</title>
    <link href="/2020/10/13/66-%E5%8A%A0%E4%B8%80/"/>
    <url>/2020/10/13/66-%E5%8A%A0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] plusOne(<span class="hljs-keyword">int</span>[] digits) &#123;        <span class="hljs-keyword">if</span>(digits == <span class="hljs-keyword">null</span> || digits.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];        &#125;        LinkedList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">int</span>  flag = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = digits.length-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;--i)&#123;            <span class="hljs-keyword">int</span> number = digits[i]+flag;            <span class="hljs-keyword">if</span>(i == digits.length-<span class="hljs-number">1</span>)&#123;                number++;            &#125;            flag = number/<span class="hljs-number">10</span>;            list.addFirst(number%<span class="hljs-number">10</span>);        &#125;        <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;            list.addFirst(<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">int</span>[] num = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[list.size()];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =<span class="hljs-number">0</span>;i&lt;list.size();++i)&#123;            num[i] = list.get(i);        &#125;        <span class="hljs-keyword">return</span> num;            &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实这道题跟链表比较相似，我采用的这种方法可能比较复杂，先转ArrayList，再转成数组的形式。</p><p>还有一种方法利用jdk8的stream方法</p><p> return list.stream().mapToInt(Integer::intValue).toArray();</p><p>这样也可以返回数组类型</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>64.最小路径和</title>
    <link href="/2020/10/13/64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <url>/2020/10/13/64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minPathSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] grid)</span> </span>&#123;        <span class="hljs-keyword">if</span>(grid == <span class="hljs-keyword">null</span> || grid.length &lt;=<span class="hljs-number">0</span> || grid[<span class="hljs-number">0</span>].length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> length = grid[<span class="hljs-number">0</span>].length;        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;grid.length;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;grid[<span class="hljs-number">0</span>].length;++j)&#123;                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)&#123;                    dp[j] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span>)&#123;                    dp[j] = dp[j-<span class="hljs-number">1</span>]+grid[i][j];                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;                    dp[j] +=grid[i][j];                &#125;<span class="hljs-keyword">else</span>&#123;                    dp[j] = Math.min(dp[j],dp[j-<span class="hljs-number">1</span>])+grid[i][j];                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];    &#125;&#125;</code></pre><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>dp，要求是最小路径</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>62.不同路径</title>
    <link href="/2020/10/13/62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <url>/2020/10/13/62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;m;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;n;++j)&#123;                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)&#123;                    dp[j] = <span class="hljs-number">1</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    dp[j] += dp[j-<span class="hljs-number">1</span>];                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>一位数组的dp即可。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>61.旋转链表</title>
    <link href="/2020/10/13/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/13/61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">if</span>(head.next ==<span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> head;        &#125;        <span class="hljs-keyword">int</span> n;        ListNode oldnode = head;        <span class="hljs-keyword">for</span>(n=<span class="hljs-number">1</span>;oldnode.next != <span class="hljs-keyword">null</span> ;++n)&#123;            oldnode = oldnode.next;        &#125;        oldnode.next = head;        ListNode newnode = head;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i= <span class="hljs-number">0</span>;i  &lt; n-k % n-<span class="hljs-number">1</span>;++i)&#123;            newnode = newnode.next;        &#125;        ListNode result = newnode.next;        newnode.next = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">return</span> result;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实我一直百思不得其解这个，n-k%n-1是怎么来的。</p><p>因为是向右移动，自己画个图就能画出来。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>56.合并区间</title>
    <link href="/2020/10/13/56-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <url>/2020/10/13/56-%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] merge(<span class="hljs-keyword">int</span>[][] intervals) &#123;        List&lt;<span class="hljs-keyword">int</span>[]&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span>(intervals == <span class="hljs-keyword">null</span> || intervals.length &lt;= <span class="hljs-number">0</span> || intervals[<span class="hljs-number">0</span>].length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>][]);        &#125;        Arrays.sort(intervals,(o1,o2) -&gt; o1[<span class="hljs-number">0</span>]-o2[<span class="hljs-number">0</span>]);        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(index &lt; intervals.length)&#123;            <span class="hljs-keyword">int</span> left = intervals[index][<span class="hljs-number">0</span>];            <span class="hljs-keyword">int</span> right = intervals[index][<span class="hljs-number">1</span>];            <span class="hljs-keyword">while</span>(index+<span class="hljs-number">1</span> &lt;intervals.length &amp;&amp; intervals[index+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] &lt;= right)&#123;                right = Math.max(right,intervals[index+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);                index++;            &#125;            list.add(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left,right&#125;);            index++;        &#125;        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>][]);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一个是list转换成数组的时候toArray() ，参数可以是泛型，表明转换成什么类型的。</p><p>第二个倒是里面的逻辑，别忘了每次while或者list.add之后，都需要把索引index++。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>55.跳跃游戏</title>
    <link href="/2020/10/13/55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
    <url>/2020/10/13/55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canJump</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[nums.length];        dp[<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(dp[i])&#123;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;=nums[i];++j)&#123;                    <span class="hljs-keyword">if</span>((i+j) &gt;= nums.length-<span class="hljs-number">1</span>)&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                    &#125;                    dp[i+j] = <span class="hljs-keyword">true</span>;            &#125;            &#125;                    &#125;        <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>] == <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">canJump</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> target = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(i&lt;=target)&#123;                target = Math.max(target,i+nums[i]);                <span class="hljs-keyword">if</span>(target &gt;= nums.length-<span class="hljs-number">1</span>)&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一种是我自己用dp做出来的，时间复杂度和空间复杂度都特别高。</p><p>第二种是参考别人的方法做出来的，判断能达到的最大值是否到达数组的最后一个。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>54.螺旋矩阵</title>
    <link href="/2020/10/13/54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <url>/2020/10/13/54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">spiralOrder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;        List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-keyword">null</span> || matrix.length &lt;= <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> list;        &#125;        <span class="hljs-keyword">int</span> height = matrix.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> width = matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = matrix[<span class="hljs-number">0</span>].length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> top = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> bot = matrix.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(left&lt;=right &amp;&amp; top&lt;=bot)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = left;i&lt;=right;++i)&#123;                list.add(matrix[top][i]);            &#125;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = top+<span class="hljs-number">1</span>;i&lt;=bot;++i)&#123;                list.add(matrix[i][right]);            &#125;            <span class="hljs-keyword">if</span>(left&lt;right &amp;&amp; top &lt; bot)&#123;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = right-<span class="hljs-number">1</span>;i&gt;left;--i)&#123;                    list.add(matrix[bot][i]);                &#125;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = bot;i&gt;top;--i)&#123;                    list.add(matrix[i][left]);                &#125;            &#125;            left++;            right--;            top++;            bot--;        &#125;        <span class="hljs-keyword">return</span> list;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>考虑left,right,top,bot四个阈值。</p><p>用大while循环，去过滤left&lt;=right,top=bot</p><p>还要考虑小范围的东西，有的时候并没有元素了，所以有if(left&lt;right &amp;&amp; top &lt; bot)判断</p>]]></content>
    
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>53.最大子序和</title>
    <link href="/2020/10/13/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"/>
    <url>/2020/10/13/53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> max = nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">int</span> target = nums[<span class="hljs-number">0</span>];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(target &lt; <span class="hljs-number">0</span>)&#123;                target = nums[i];            &#125;<span class="hljs-keyword">else</span>&#123;                target +=nums[i];            &#125;            max = Math.max(max,target);        &#125;        <span class="hljs-keyword">return</span> max;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>判断逻辑挺简单的，如果当前target小于0，那么直接舍弃，若不，累加。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>50.Pow(x,n)</title>
    <link href="/2020/10/13/50-Pow-x-n/"/>
    <url>/2020/10/13/50-Pow-x-n/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span> || n == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;        &#125;        <span class="hljs-keyword">long</span> N = n;        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/compute(x,-N);        &#125;        <span class="hljs-keyword">return</span> compute(x,N);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">compute</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x,<span class="hljs-keyword">long</span> n)</span></span>&#123;        <span class="hljs-keyword">if</span>( n == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> x;        &#125;        <span class="hljs-keyword">if</span>(n% <span class="hljs-number">2</span>== <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">double</span> half = compute(x,n/<span class="hljs-number">2</span>);            <span class="hljs-keyword">return</span> half * half;        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">double</span> half = compute(x,n/<span class="hljs-number">2</span>);            <span class="hljs-keyword">return</span> half* half*x;        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一：考虑这个参数应该为long类型</p><p>第二：考虑时间复杂度，用递归的思想去计算这个值。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>49.字母异位词分组</title>
    <link href="/2020/10/13/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <url>/2020/10/13/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;     List&lt;List&lt;String&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;        <span class="hljs-keyword">if</span>(strs == <span class="hljs-keyword">null</span> || strs.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;        HashMap&lt;String,Integer&gt; hashmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;strs.length;++i)&#123;            String string = strs[i];            <span class="hljs-keyword">char</span>[] nowchar = string.toCharArray();            Arrays.sort(nowchar);            String target = <span class="hljs-keyword">new</span> String(nowchar);            <span class="hljs-keyword">if</span>(hashmap.containsKey(target))&#123;                <span class="hljs-keyword">int</span> index = hashmap.get(target);                lists.get(index).add(string);            &#125;<span class="hljs-keyword">else</span>&#123;                hashmap.put(target,count++);                List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();                list.add(string);                lists.add(list);            &#125;        &#125;        <span class="hljs-keyword">return</span> lists;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>利用一个hashmap存放key为String类型的单词，value存放索引（索引存放于在lists里面的索引）。</p><p>然后每次传入新的string之后，利用Arrays.sort()方法去进行排序，之后进行比较。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>48.旋转图像</title>
    <link href="/2020/10/13/48-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <url>/2020/10/13/48-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix)</span> </span>&#123;        <span class="hljs-keyword">if</span>(matrix == <span class="hljs-keyword">null</span> || matrix.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">int</span> length = matrix.length;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;length;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i;j&lt;length;++j)&#123;                <span class="hljs-keyword">int</span> temp = matrix[i][j];                matrix[i][j] = matrix[j][i];                matrix[j][i] = temp;            &#125;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;length;++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;j&lt;length/<span class="hljs-number">2</span>;++j)&#123;                <span class="hljs-keyword">int</span> temp = matrix[i][j];                matrix[i][j] = matrix[i][length-j-<span class="hljs-number">1</span>];                matrix[i][length-j-<span class="hljs-number">1</span>] = temp;            &#125;        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>先是根据对角线进行一次翻转，然后再根据中轴线进行每一行的翻转，最后得到了这个图形。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>46.全排列</title>
    <link href="/2020/10/12/46-%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <url>/2020/10/12/46-%E5%85%A8%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        core(<span class="hljs-number">0</span>,nums);        <span class="hljs-keyword">return</span> lists;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;        <span class="hljs-keyword">if</span>(index == nums.length-<span class="hljs-number">1</span>)&#123;            List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList();            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i :nums)&#123;                list.add(i);            &#125;            lists.add(list);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = index;i&lt;nums.length;++i)&#123;                swap(i,index,nums);                core(index+<span class="hljs-number">1</span>,nums);                swap(i,index,nums);            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> start,<span class="hljs-keyword">int</span> end,<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;        <span class="hljs-keyword">int</span> temp = nums[start];        nums[start] = nums[end];        nums[end] = temp;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>全排列问题，就是相当于每个数进行一次排列，排列这种数组常用的方式是交换swap，同样的像组合排列一样，需要在swap回来。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>40.组合总和</title>
    <link href="/2020/10/12/40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
    <url>/2020/10/12/40-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="hljs-keyword">int</span>[] candidates, <span class="hljs-keyword">int</span> target) &#123;        <span class="hljs-keyword">if</span>(candidates == <span class="hljs-keyword">null</span> || candidates.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;                Arrays.sort(candidates);        core(<span class="hljs-keyword">new</span> ArrayList(),<span class="hljs-number">0</span>,candidates,target);        HashSet&lt;List&lt;Integer&gt;&gt; hashset = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(lists);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayList(hashset);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(List&lt;Integer&gt; list,<span class="hljs-keyword">int</span> index,<span class="hljs-keyword">int</span>[] candidates,<span class="hljs-keyword">int</span> target)</span></span>&#123;               <span class="hljs-keyword">if</span>(target == <span class="hljs-number">0</span>)&#123;            lists.add (<span class="hljs-keyword">new</span> ArrayList(list));            <span class="hljs-keyword">return</span> ;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = index;i&lt;candidates.length;++i)&#123;            <span class="hljs-keyword">if</span>(target-candidates[i] &lt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-keyword">if</span>(i&gt;index &amp;&amp; candidates[i] == candidates[i-<span class="hljs-number">1</span>])&#123;                <span class="hljs-keyword">continue</span>;            &#125;            list.add(candidates[i]);            core(list,i+<span class="hljs-number">1</span>,candidates,target-candidates[i]);            list.remove(list.size()-<span class="hljs-number">1</span>);        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这道题与上一道组合排列其实很相似，只不过现在是不要可重复的数字了。</p><p>我一直用没有剪枝的方式，这样导致时间复杂度会很高，剪枝的逻辑就跟三数之和一样。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>39.组合总和</title>
    <link href="/2020/10/12/39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
    <url>/2020/10/12/39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="hljs-keyword">int</span>[] candidates, <span class="hljs-keyword">int</span> target) &#123;        <span class="hljs-keyword">if</span>(candidates == <span class="hljs-keyword">null</span> || candidates.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        Arrays.sort(candidates);        core(<span class="hljs-keyword">new</span> ArrayList(),candidates,target,<span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> lists;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(List&lt;Integer&gt; list,<span class="hljs-keyword">int</span>[] candidates,<span class="hljs-keyword">int</span> target,<span class="hljs-keyword">int</span> index)</span></span>&#123;        <span class="hljs-keyword">if</span>(target&lt;<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">if</span>(target == <span class="hljs-number">0</span>)&#123;            lists.add(<span class="hljs-keyword">new</span> ArrayList(list));            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = index;i&lt;candidates.length;++i)&#123;            list.add(candidates[i]);            core(list,candidates,target-candidates[i],i);            list.remove(list.size()-<span class="hljs-number">1</span>);        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这道题是可以选取重复的数字，所以在递归循环中，index为i，而不是i+1</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>38.外观数组</title>
    <link href="/2020/10/12/38-%E5%A4%96%E8%A7%82%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/12/38-%E5%A4%96%E8%A7%82%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">countAndSay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;1&quot;</span>;        &#125;        StringBuffer stringbuffer = <span class="hljs-keyword">new</span> StringBuffer();        String string = countAndSay(n-<span class="hljs-number">1</span>);        <span class="hljs-keyword">int</span> length = string.length();        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i&lt;=length;++i)&#123;            <span class="hljs-keyword">if</span>(i == length)&#123;                stringbuffer.append(i-index).append(string.charAt(index)).toString();            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(string.charAt(i) != string.charAt(index))&#123;                stringbuffer.append(i-index).append(string.charAt(index));                index = i;            &#125;        &#125;        <span class="hljs-keyword">return</span> stringbuffer.toString();    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>首先这是一个递归的题，n==1的时候，字符串只有“1”，然后慢慢的往上去叠。</p><p>剩下的就是一个逻辑的事情了，index一开始是记录0，下面就是每次记录位移的距离与当前这个数字是多少，然后用stringbuffer进行叠加。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>35.搜索插入位置</title>
    <link href="/2020/10/12/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <url>/2020/10/12/35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(nums[i] &gt;= target)&#123;                <span class="hljs-keyword">return</span> i;            &#125;        &#125;        <span class="hljs-keyword">return</span> nums.length;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>挺简单的。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>34.在排序数组中查找第一个和最后一个位置</title>
    <link href="/2020/10/12/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/"/>
    <url>/2020/10/12/34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;        &#125;        <span class="hljs-keyword">int</span> left = coreFirst(nums,target);        <span class="hljs-keyword">int</span> right = coreLast(nums,target);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;left,right&#125;;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">coreFirst</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> target)</span></span>&#123;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;             <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;             <span class="hljs-keyword">if</span>(target == nums[mid])&#123;                 right = mid-<span class="hljs-number">1</span>;             &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; nums[mid])&#123;                 left = mid+<span class="hljs-number">1</span>;             &#125;<span class="hljs-keyword">else</span>&#123;                 right = mid-<span class="hljs-number">1</span>;             &#125;        &#125;        <span class="hljs-keyword">if</span>(left != nums.length &amp;&amp; nums[left] == target)&#123;            <span class="hljs-keyword">return</span> left;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">coreLast</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> target)</span></span>&#123;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;             <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>;             <span class="hljs-keyword">if</span>(target == nums[mid])&#123;                 left = mid+<span class="hljs-number">1</span>;             &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target &gt; nums[mid])&#123;                 left = mid+<span class="hljs-number">1</span>;             &#125;<span class="hljs-keyword">else</span>&#123;                 right = mid-<span class="hljs-number">1</span>;             &#125;        &#125;        <span class="hljs-keyword">if</span>(right != -<span class="hljs-number">1</span> &amp;&amp; nums[right] == target)&#123;            <span class="hljs-keyword">return</span> right;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实这道题一开始，我的想法并不对，用二分法找到对于二分法来说第一次出现的值，然后用–/++操作，找到这个值的开头和结尾，其实这样的时间复杂度根本不是logn，就是要利用二分法一直进行二分查找才可以。</p><p>那么还是定义两个函数，第一个找第一个位置，第二个找最后一个位置这样。有一种情况是需要特殊考虑的，就是3 4 5 5 这种情况，如果让你去找6这个target，最后也会导致left&gt;right循环退出，所以要判断一下 left != nums.length，如果相等，其实也是没找到，只不过只是数组越界了无法找到。</p><p>找第一个出现的位置的时候，left可能回到nums.length，找最后一个出现位置的时候，right可能会到-1，这些都是需要思考的事情。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>33.搜索旋转排序数组</title>
    <link href="/2020/10/12/33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2020/10/12/33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;                <span class="hljs-keyword">while</span>(left&lt;=right)&#123;            <span class="hljs-keyword">int</span> mid =(left+right)/<span class="hljs-number">2</span>;            <span class="hljs-keyword">if</span>(nums[mid] == target)&#123;                <span class="hljs-keyword">return</span> mid;            &#125;            <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt;=nums[mid])&#123;                <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">0</span>] &lt;=target &amp;&amp; target&lt;=nums[mid])&#123;                    right = mid-<span class="hljs-number">1</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    left = mid+<span class="hljs-number">1</span>;                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">if</span>(nums[mid] &lt;=target &amp;&amp; target &lt;=nums[right])&#123;                    left = mid+<span class="hljs-number">1</span>;                &#125;<span class="hljs-keyword">else</span>&#123;                    right = mid-<span class="hljs-number">1</span>;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是有一个点是一个旋转点，比如1 2 3 4 5 6 7 8 9</p><p>可能旋转成 8 9 1 2 3 4 5 6 7，也可能旋转成 3 4 5 6 7 8 9 1 2</p><p>关于这个中心点mid，就有两种不同的算法，如果在第一种nums[right] &gt;= nums[mid]，再如果target在介于中间，那么left = mid+1；如果不介于，那么right = mid-1，这样同样适用于 nums[left] &lt;= nums[mid] 也就是后者。</p><p>再用递归的思想，进行这道题的编写。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>31.下一个排列</title>
    <link href="/2020/10/12/31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/"/>
    <url>/2020/10/12/31-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nextPermutation</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-keyword">int</span> index = -<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i =nums.length-<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;            <span class="hljs-keyword">if</span>(nums[i] &lt; nums[i+<span class="hljs-number">1</span>])&#123;                index = i;                <span class="hljs-keyword">break</span>;            &#125;        &#125;        <span class="hljs-keyword">if</span>(index == -<span class="hljs-number">1</span>)&#123;            reverse(<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>,nums);            <span class="hljs-keyword">return</span>;        &#125;                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = nums.length-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--)&#123;            <span class="hljs-keyword">if</span>(nums[j] &gt;nums[index])&#123;                swap(index,j,nums);                <span class="hljs-keyword">break</span>;            &#125;        &#125;        reverse(index+<span class="hljs-number">1</span>,nums.length-<span class="hljs-number">1</span>,nums);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;        <span class="hljs-keyword">int</span> temp = nums[left];        nums[left] = nums[right];        nums[right] = temp;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] nums)</span></span>&#123;        <span class="hljs-keyword">while</span>(left&lt;right)&#123;            swap(left,right,nums);            left++;            right--;        &#125;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>个人认为这这种题就是看了才会</p><p>首先从后面往前找第一个当前位置比后一个位置小的数，记住该索引。</p><p>再从后面往前再找第一个比刚才内个索引大的这个位置，然后进行交换。</p><p>最后在从索引后面位置的一个，到结尾，进行翻转，得到正解。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>26.删除排序数组中的重复项</title>
    <link href="/2020/10/12/26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
    <url>/2020/10/12/26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(nums[i] != nums[j])&#123;                j++;                nums[j] = nums[i];            &#125;        &#125;        <span class="hljs-keyword">return</span> j+<span class="hljs-number">1</span>;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>双指针问题，如果当前位置i,j的值都一样，i继续，j不动，什么时候值不同，让j移到下一个位置，然后把当前位置j的值换成i，最后返回j+1，因为返回的是新的长度，所以j是从开始的，所以为j+1</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>24.两两交换链表中的节点</title>
    <link href="/2020/10/12/24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <url>/2020/10/12/24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode head)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> head;        &#125;        ListNode first = head;        ListNode second = head.next;                first.next = swapPairs(second.next);        second.next = first;                <span class="hljs-keyword">return</span> second;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是一个递归问题，弄明白就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>23.合并k个升序链表</title>
    <link href="/2020/10/12/23-%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/10/12/23-%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> </span>&#123;        <span class="hljs-keyword">if</span>(lists == <span class="hljs-keyword">null</span> || lists.length&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode result = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);        ListNode pre = result;                PriorityQueue&lt;ListNode&gt; queue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(            (o1,o2) -&gt;o1.val-o2.val        );        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;lists.length;++i)&#123;            <span class="hljs-keyword">if</span>(lists[i] != <span class="hljs-keyword">null</span>)&#123;                queue.add(lists[i]);            &#125;        &#125;        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;            ListNode newnode = queue.poll();            pre.next = newnode;            pre =pre.next;            <span class="hljs-keyword">if</span>(newnode.next != <span class="hljs-keyword">null</span>)&#123;                queue.add(newnode.next);            &#125;        &#125;        <span class="hljs-keyword">return</span> result.next;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这是一道hard的类型题，我取巧用了优先级队列java中的api，记住一定要重写o1,o2也就是里面的规则。</p><p>然后其他的倒是没什么难度。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>hard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20.有效的括号</title>
    <link href="/2020/10/12/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <url>/2020/10/12/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length() &lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();++i)&#123;            <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;(&#x27;</span> || s.charAt(i) == <span class="hljs-string">&#x27;&#123;&#x27;</span> || s.charAt(i) == <span class="hljs-string">&#x27;[&#x27;</span>)&#123;                stack.push(s.charAt(i));            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(stack.isEmpty()  &amp;&amp; (s.charAt(i) == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; stack.peek() == <span class="hljs-string">&#x27;(&#x27;</span>) || (s.charAt(i) == <span class="hljs-string">&#x27;&#125;&#x27;</span> &amp;&amp; stack.peek() == <span class="hljs-string">&#x27;&#123;&#x27;</span>) || (s.charAt(i) == <span class="hljs-string">&#x27;]&#x27;</span> &amp;&amp; stack.peek() == <span class="hljs-string">&#x27;[&#x27;</span>))&#123;                stack.pop();            &#125;        &#125;        <span class="hljs-keyword">return</span> stack.isEmpty();    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>考虑使用栈这种数据结构，先进后出。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19.删除链表的倒数第N个节点</title>
    <link href="/2020/10/12/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
    <url>/2020/10/12/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for singly-linked list.</span><span class="hljs-comment"> * public class ListNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     ListNode next;</span><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> n)</span> </span>&#123;        <span class="hljs-keyword">if</span>(head == <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        ListNode result = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);        result.next = head;        ListNode first= result;        ListNode second = result;        <span class="hljs-keyword">while</span>(n != <span class="hljs-number">0</span>)&#123;            first = first.next;            n--;        &#125;        <span class="hljs-keyword">while</span>(first.next != <span class="hljs-keyword">null</span>)&#123;            first = first.next;            second = second.next;        &#125;        second.next = second.next.next;        <span class="hljs-keyword">return</span> result.next;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>像这种倒数链表的题，一般都要建立一个前驱节点指向头结点，再按照逻辑去做，进行递归或者是其他操作，得到题解。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17.电话号码的字母组合</title>
    <link href="/2020/10/12/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
    <url>/2020/10/12/17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    HashMap&lt;String,String&gt; hashmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(String digits)</span> </span>&#123;        <span class="hljs-keyword">if</span>(digits == <span class="hljs-keyword">null</span> || digits.length()&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> list;        &#125;        hashmap.put(<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>);        hashmap.put(<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>);        core(<span class="hljs-string">&quot;&quot;</span>,digits);        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">core</span><span class="hljs-params">(String temp,String res)</span></span>&#123;        <span class="hljs-keyword">if</span>(res.length() == <span class="hljs-number">0</span>)&#123;            list.add(temp);        &#125;<span class="hljs-keyword">else</span>&#123;            String number = res.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);            String choose = hashmap.get(number);            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;choose.length();i++)&#123;                String newletter = temp + choose.substring(i,i+<span class="hljs-number">1</span>);                core(newletter,res.substring(<span class="hljs-number">1</span>));            &#125;        &#125;            &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一：把所有的数字放入到hashmap中，形成一个key为number的字符串，value为真正字母的字符串。</p><p>第二： 相当于一次全排列，每次递归循环，出口就是需要遍历的字符串的长度为0</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15.三数之和</title>
    <link href="/2020/10/12/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/10/12/15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;                List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        Arrays.sort(nums);        <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length&lt;<span class="hljs-number">3</span>)&#123;            <span class="hljs-keyword">return</span> lists;        &#125;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;i&lt;nums.length;++i)&#123;            <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>])&#123;                <span class="hljs-keyword">continue</span>;            &#125;            <span class="hljs-keyword">if</span>(nums[i] &gt;<span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">return</span> lists;            &#125;            <span class="hljs-keyword">int</span> left = i+<span class="hljs-number">1</span>;            <span class="hljs-keyword">int</span> right = nums.length-<span class="hljs-number">1</span>;            <span class="hljs-keyword">int</span> target = -nums[i];            <span class="hljs-keyword">while</span>(left&lt;right)&#123;                <span class="hljs-keyword">if</span>(nums[left] + nums[right] == target)&#123;                    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();                    list.add(nums[i]);                    list.add(nums[left]);                    list.add(nums[right]);                    lists.add(list);                    right--;                    left++;                    <span class="hljs-keyword">while</span>(left&lt;right &amp;&amp; nums[right] == nums[right+<span class="hljs-number">1</span>])&#123;                        right--;                    &#125;                    <span class="hljs-keyword">while</span>(left&lt;right &amp;&amp; nums[left] == nums[left-<span class="hljs-number">1</span>])&#123;                        left++;                    &#125;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[left] + nums[right] &gt;target)&#123;                    right--;                &#125;<span class="hljs-keyword">else</span>&#123;                    left++;                   &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> lists;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>第一：一定要先进行排序</p><p>第二：一定进行剪枝，分别是第一个数已经大于0了，还有当得到一组等于0的解，继续向下剪枝。</p><p>第三：一定判断边界条件。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14.最长公共前缀</title>
    <link href="/2020/10/12/14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <url>/2020/10/12/14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(String[] strs)</span> </span>&#123;        <span class="hljs-keyword">if</span>(strs == <span class="hljs-keyword">null</span> || strs.length&lt;=<span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;        &#125;        StringBuffer string = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span> ;i&lt;strs[<span class="hljs-number">0</span>].length();++i)&#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>;j&lt;strs.length;++j)&#123;                <span class="hljs-keyword">if</span>(i &gt;=strs[j].length() || strs[j].charAt(i) != strs[<span class="hljs-number">0</span>].charAt(i))&#123;                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(string);                &#125;            &#125;            string.append(strs[<span class="hljs-number">0</span>].charAt(i));        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> String(string);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是双层遍历，直接获取到结果。注意边界情况的判断即可。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11.盛最多水的容器</title>
    <link href="/2020/10/12/11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <url>/2020/10/12/11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;        <span class="hljs-keyword">if</span>(height == <span class="hljs-keyword">null</span> || height.length&lt;<span class="hljs-number">2</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> right = height.length-<span class="hljs-number">1</span>;        <span class="hljs-keyword">while</span>(left&lt;right)&#123;            <span class="hljs-keyword">int</span> width = right-left;            <span class="hljs-keyword">int</span> high = height[left]&gt;height[right]?height[right--]:height[left++];            <span class="hljs-keyword">int</span> temp  = high*width;            max = Math.max(max,temp);        &#125;        <span class="hljs-keyword">return</span> max;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是双指针的用法，哪边小，从哪边往右走。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.回文数</title>
    <link href="/2020/10/12/9-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <url>/2020/10/12/9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;        <span class="hljs-keyword">if</span>( x == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        &#125;        <span class="hljs-keyword">if</span>(x &lt;<span class="hljs-number">0</span> || x%<span class="hljs-number">10</span> == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(temp &lt; x)&#123;            <span class="hljs-keyword">int</span> tmp = x%<span class="hljs-number">10</span>;            x = x/<span class="hljs-number">10</span>;            temp = temp*<span class="hljs-number">10</span>+tmp;        &#125;                <span class="hljs-keyword">return</span> (temp == x) || (temp/<span class="hljs-number">10</span> == x);    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>只需要相当于翻转一下，到一半即可，判断是不是回文数。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.整数反转</title>
    <link href="/2020/10/11/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <url>/2020/10/11/7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(x != <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">int</span> tmp = x%<span class="hljs-number">10</span>;            <span class="hljs-keyword">if</span>(temp &gt; Integer.MAX_VALUE/<span class="hljs-number">10</span> || (temp == Integer.MAX_VALUE &amp;&amp; tmp &gt;=Integer.MAX_VALUE%<span class="hljs-number">10</span>))&#123;                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            &#125;            <span class="hljs-keyword">if</span>(temp &lt; Integer.MIN_VALUE/<span class="hljs-number">10</span> || (temp == Integer.MIN_VALUE/<span class="hljs-number">10</span> &amp;&amp;  tmp &lt;= Integer.MIN_VALUE%<span class="hljs-number">10</span>))&#123;                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;            &#125;            temp = temp*<span class="hljs-number">10</span>+tmp;            x = x/<span class="hljs-number">10</span>;        &#125;        <span class="hljs-keyword">return</span> temp;    &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是需要考虑一下整数溢出的情况，其他的就是一个翻转的过程。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.最长回文子串</title>
    <link href="/2020/10/11/5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/10/11/5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;​    <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length()&lt;=<span class="hljs-number">0</span>)&#123;​      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;​    &#125;​    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;​    String result = <span class="hljs-string">&quot;&quot;</span>;​    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();++i)&#123;​      String a = core(i,i,s);​      String b = core(i,i+<span class="hljs-number">1</span>,s);​      String temp = a.length()&gt;b.length()?a:b;​      <span class="hljs-keyword">if</span>(temp.length() &gt; length)&#123;​        result = temp;​        length = temp.length();​      &#125;​    &#125;​    <span class="hljs-keyword">return</span> result;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">core</span><span class="hljs-params">(<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,String s)</span></span>&#123;​    <span class="hljs-keyword">while</span>(left&gt;=<span class="hljs-number">0</span> &amp;&amp; right&lt;s.length() &amp;&amp; s.charAt(left) == s.charAt(right))&#123;​      left--;​      right++;​    &#125;​    <span class="hljs-keyword">return</span> s.substring(left+<span class="hljs-number">1</span>,right);  &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>在于substring的这个函数你需要的left+1这个参数，包括开始索引，到结束索引的前一个（所以就是不包含最后的索引），其他没有什么想要说的。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.无重复字符的最长子串</title>
    <link href="/2020/10/11/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/10/11/3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;​    <span class="hljs-keyword">if</span>(s == <span class="hljs-keyword">null</span> || s.length()&lt;=<span class="hljs-number">0</span>)&#123;​      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;​    &#125;​    HashMap&lt;Character,Integer&gt; hashmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();​    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;​    <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;​    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;s.length();++i)&#123;​      <span class="hljs-keyword">int</span> temp = hashmap.getOrDefault(s.charAt(i),-<span class="hljs-number">1</span>);​      tmp = i-temp&gt;tmp?tmp+<span class="hljs-number">1</span>:i-temp;​      max = Math.max(max,tmp);​      hashmap.put(s.charAt(i),i);​    &#125;​    <span class="hljs-keyword">return</span> max;  &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>其实这是一道动态规划的题，只不过加入了hashmap每次记录上一次单词出现的位置。</p><p>当前位置-上一次单词出现的位置与tmp中间量作为比较。如果大于，说明上一个单词不在当前的tmp中了，所以tmp+1；如果小于，说明上一个单词在tmp中，那么相当于进行了一次替换。</p><p>最后max是中间变量，从头到尾贯彻，作为最大值。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.两数相加</title>
    <link href="/2020/10/11/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2020/10/11/2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"></span><span class="hljs-comment"> \* Definition for singly-linked list.</span><span class="hljs-comment"></span><span class="hljs-comment"> \* public class ListNode &#123;</span><span class="hljs-comment"></span><span class="hljs-comment"> \*   int val;</span><span class="hljs-comment"></span><span class="hljs-comment"> \*   ListNode next;</span><span class="hljs-comment"></span><span class="hljs-comment"> \*   ListNode() &#123;&#125;</span><span class="hljs-comment"></span><span class="hljs-comment"> \*   ListNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"></span><span class="hljs-comment"> \*   ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><span class="hljs-comment"></span><span class="hljs-comment"> \* &#125;</span><span class="hljs-comment"></span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;​    <span class="hljs-keyword">if</span>(l1 == <span class="hljs-keyword">null</span> &amp;&amp; l2 == <span class="hljs-keyword">null</span>)&#123;​      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;​    &#125;​    ListNode result = <span class="hljs-keyword">new</span> ListNode(-<span class="hljs-number">1</span>);​    ListNode pre = result;​    <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;​    <span class="hljs-keyword">while</span>(l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>)&#123;​      <span class="hljs-keyword">int</span> val1 = l1 == <span class="hljs-keyword">null</span> ?<span class="hljs-number">0</span>:l1.val;​      <span class="hljs-keyword">int</span> val2 = l2 == <span class="hljs-keyword">null</span> ?<span class="hljs-number">0</span>:l2.val;​      <span class="hljs-keyword">int</span> temp = val1+val2+flag;​      ListNode newnode = <span class="hljs-keyword">new</span> ListNode(temp%<span class="hljs-number">10</span>);​      flag = temp / <span class="hljs-number">10</span>;​      pre.next = newnode;​      pre = pre.next;​      <span class="hljs-keyword">if</span>(l1 != <span class="hljs-keyword">null</span>)&#123;​        l1 = l1.next;​      &#125;​      <span class="hljs-keyword">if</span>(l2 != <span class="hljs-keyword">null</span>)&#123;​        l2 = l2.next;​      &#125;​    &#125;​    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;​      ListNode newnode = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);​      pre.next =newnode;​    &#125;​    <span class="hljs-keyword">return</span> result.next;  &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>没什么好说的，就是一开始用result作为最后输出的结尾，然后while的判断逻辑是l1,l2是否为空，最后判断一下当前的flag</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>力扣</tag>
      
      <tag>mid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.两数之和</title>
    <link href="/2020/10/11/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/10/11/1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;​    <span class="hljs-keyword">if</span>(nums == <span class="hljs-keyword">null</span> || nums.length&lt;=<span class="hljs-number">0</span>)&#123;​      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];​    &#125;​    HashMap&lt;Integer,Integer&gt; hashmap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();​    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.length;++i)&#123;​      <span class="hljs-keyword">if</span>(hashmap.containsKey(target-nums[i]))&#123;​        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i,hashmap.get(target-nums[i])&#125;;​      &#125;<span class="hljs-keyword">else</span>&#123;​        hashmap.put(nums[i],i);​      &#125;​    &#125;​    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];  &#125;&#125;</code></pre><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>就是用hashmap记录一下值，如果target-当前值存在于hashmap中，那么直接返回包括这两个数的索引。</p>]]></content>
    
    
    <categories>
      
      <category>力扣</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easy</tag>
      
      <tag>力扣</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程的状态与转换</title>
    <link href="/2020/10/11/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/10/11/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>进程的定义，组成，组织方式，特征 （七）</title>
    <link href="/2020/10/11/%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BB%84%E6%88%90%EF%BC%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%EF%BC%8C%E7%89%B9%E5%BE%81/"/>
    <url>/2020/10/11/%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%8C%E7%BB%84%E6%88%90%EF%BC%8C%E7%BB%84%E7%BB%87%E6%96%B9%E5%BC%8F%EF%BC%8C%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201011160211832.png"></p><h1 id="进程的定义"><a href="#进程的定义" class="headerlink" title="进程的定义"></a>进程的定义</h1><p>程序：就是一个指令序列</p><p>早起计算机的时候，只支持单道程序，内存里面只有一个程序在跑，分为程序段（程序代码）和数据段（变量）。</p><p>引入多道程序之后，内存可以有多道程序运行，各个程序的代码、运算数据存放的位置不同，操作系统需要怎么才能找到程序的存放位置呢。</p><p>操作系统在每一个进程执行之前，都会创建一个叫PCB（进程控制块）的这样的一个东西，用来描述进程当前的信息。</p><p>程序段，数据段，pcb三部分组成了进程实体（进程映像）。一般情况下，我们把进程实体就简称为进程，例如：所谓创建进程，实质上创建进程实体中的pcb，而撤销进程，实质上也是撤销进程实体中的pcb</p><p>注意：<strong>pcb是进程存在的唯一标志</strong></p><p>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</p><h1 id="进程的组成"><a href="#进程的组成" class="headerlink" title="进程的组成"></a>进程的组成</h1><h2 id="程序段"><a href="#程序段" class="headerlink" title="程序段"></a>程序段</h2><p>代码本身，指令序列</p><h2 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h2><p>程序运行时使用、产生的运算数据。如全局变量，局部变量，宏定义的常量都存放在数据段内。</p><h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><p>操作系统通过pcb来管理进程，因此pcb中应该包含操作系统对其进程管理所需的各种信息（相当于进程运行的元信息）。</p><p><img src="image-20201011161046798.png"></p><h1 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h1><p>在一个系统中，通常有十级到千级的pcb，为了能对他们加以有效的管理，应该用适当的方式把这些pcb组织起来。</p><p>上面讲到的，进程的组成是哪几个部分组成了进程，进程的组织，是讲多进程之间的组织方式</p><p>一共分为两种：链接方式和索引方式</p><p><img src="image-20201011161413822.png"></p><h2 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h2><p><img src="image-20201011161508401.png"></p><p>一共有三种指针，</p><p>执行指针：指向当前处于就绪态的进程</p><p>就绪队列指针：当前排队的进程，会根据优先级高低进行排列</p><p>阻塞队列指针：指向当前处阻塞态的进程</p><h2 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h2><p>同样也有三个指针，只不过指向的是一个表，而表中还会指向相应的pcb</p><p><img src="image-20201011162142337.png"></p><h1 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h1><p><img src="image-20201011162208795.png"></p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201011162418120.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里规约禁止使用java内置Executors创建线程池</title>
    <link href="/2020/10/09/%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8java%E5%86%85%E7%BD%AEExecutors%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2020/10/09/%E9%98%BF%E9%87%8C%E8%A7%84%E7%BA%A6%E7%A6%81%E6%AD%A2%E4%BD%BF%E7%94%A8java%E5%86%85%E7%BD%AEExecutors%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="提出几个问题"><a href="#提出几个问题" class="headerlink" title="提出几个问题"></a>提出几个问题</h1><p>1）线程池存在的意义</p><p>2）Executors创建线程池一共几种方式</p><p>3）ThreadPoolExecutor对象</p><p>4）线程池执行的逻辑和线程池参数关系</p><p>5）OOM会发生么</p><p>6）如何定义线程池参数</p><h1 id="线程池的意义"><a href="#线程池的意义" class="headerlink" title="线程池的意义"></a>线程池的意义</h1><p>线程池可以复用线程，每个线程的创建与销毁其实都会耗费资源的，所以有了池的概念，可以节省一些资源。</p><p>1）减少资源创建，减少内存开销</p><p>2）降低系统开销，创建线程需要时间，会延迟处理请求的速度</p><p>3）提高稳定性，避免无限创建线程引起的OOM（outofmemory）</p><h1 id="使用Exectors静态函数创建线程池"><a href="#使用Exectors静态函数创建线程池" class="headerlink" title="使用Exectors静态函数创建线程池"></a>使用Exectors静态函数创建线程池</h1><ul><li><strong>newCachedThreadPool</strong>创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li><strong>newFixedThreadPool</strong> 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待。</li><li><strong>newScheduledThreadPool</strong> 创建一个定长线程池，支持定时及周期性任务执行。</li><li><strong>newSingleThreadExecutor</strong> 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ul><h1 id="Java的线程池"><a href="#Java的线程池" class="headerlink" title="Java的线程池"></a>Java的线程池</h1><p>在探究之前，我们需要明确一下，线程池的创建以及比较核心的七大参数。</p><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> ThreadPoolExecutor(<span class="hljs-keyword">int</span> corePoolSize,                              <span class="hljs-keyword">int</span> maximumPoolSize,                              <span class="hljs-keyword">long</span> keepAliveTime,                              TimeUnit unit,                              BlockingQueue&lt;Runnable&gt; workQueue,                              ThreadFactory threadFactory,                              RejectedExecutionHandler <span class="hljs-keyword">handler</span>) &#123;        <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||            maximumPoolSize &lt;= <span class="hljs-number">0</span> ||            maximumPoolSize &lt; corePoolSize ||            keepAliveTime &lt; <span class="hljs-number">0</span>)            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();        <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-keyword">null</span> || threadFactory == <span class="hljs-keyword">null</span> || <span class="hljs-keyword">handler</span> == <span class="hljs-keyword">null</span>)            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NullPointerException();        <span class="hljs-keyword">this</span>.acc = System.getSecurityManager() == <span class="hljs-keyword">null</span> ?                <span class="hljs-keyword">null</span> :                AccessController.getContext();        <span class="hljs-keyword">this</span>.corePoolSize = corePoolSize;        <span class="hljs-keyword">this</span>.maximumPoolSize = maximumPoolSize;        <span class="hljs-keyword">this</span>.workQueue = workQueue;        <span class="hljs-keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);        <span class="hljs-keyword">this</span>.threadFactory = threadFactory;        <span class="hljs-keyword">this</span>.<span class="hljs-keyword">handler</span> = <span class="hljs-keyword">handler</span>;    &#125;<span class="hljs-keyword">public</span> ThreadPoolExecutor(<span class="hljs-keyword">int</span> corePoolSize,                          <span class="hljs-keyword">int</span> maximumPoolSize,                          <span class="hljs-keyword">long</span> keepAliveTime,                          TimeUnit unit,                          BlockingQueue&lt;Runnable&gt; workQueue,                          RejectedExecutionHandler <span class="hljs-keyword">handler</span>) &#123;    <span class="hljs-keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,         Executors.defaultThreadFactory(), <span class="hljs-keyword">handler</span>);&#125;</code></pre><p>corePoolSize: 核心线程数</p><p>maximumPoolSize： 最大线程数</p><p>keepAliveTime： 非核心线程数，多长时间会被销毁</p><p>unit： 时间单位</p><p>workQueue： 任务队列，阻塞队列，用于存放已经提交但是未被执行的任务</p><p>threadFactory：线程工厂，用于创建线程</p><p>handler： 拒绝策略，任务想要添加进入线程池，线程池拒绝该任务所采取的相应策略</p><h1 id="workingQueue任务队列"><a href="#workingQueue任务队列" class="headerlink" title="workingQueue任务队列"></a>workingQueue任务队列</h1><p>1.ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。</p><p>2.LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。</p><p>3.SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作，反之亦然。</p><p>4.PriorityBlockingQueue：具有优先级别的阻塞队列。</p><p>5.DelayedWorkQueue：延迟的阻塞队列。</p><h1 id="handler拒绝策略"><a href="#handler拒绝策略" class="headerlink" title="handler拒绝策略"></a>handler拒绝策略</h1><p>1.AbortPolicy：直接抛出异常，<strong>默认策略</strong></p><p>2.CallerRunsPolicy：用调用者所在的线程来执行任务</p><p>3.DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务</p><p>4.DiscardPolicy：直接丢弃任务</p><h1 id="为什么阿里规约要求手动创建线程池"><a href="#为什么阿里规约要求手动创建线程池" class="headerlink" title="为什么阿里规约要求手动创建线程池"></a>为什么阿里规约要求手动创建线程池</h1><p>Executors各个方法的弊端：<br>1）newFixedThreadPool和newSingleThreadExecutor:<br>  主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。<br>2）newCachedThreadPool和newScheduledThreadPool:<br>  主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。</p><p>第一种newFixedThreadPool和newSingleThreadExecutor用的workingQueue都是LinkedBlockingQueue都是无界的阻塞队列，所以如果生产者一直大于消费者，队列不断膨胀，可能会导致内存溢出。</p><p>第二种newCachedThreadPool使用的是SynchronousQueue和newScheduledThreadPool使用的是DelayedWorkQueue。其中maximumPoolSize参数都为Integer.MAX_VALUE，所以空闲线程存活时间为0，当添加任务的速度大于线程池处理任务的速度，可能会创建大量的线程，消耗资源，甚至导致OOM。</p><h1 id="线程池执行任务逻辑"><a href="#线程池执行任务逻辑" class="headerlink" title="线程池执行任务逻辑"></a>线程池执行任务逻辑</h1><p>提交任务，如果当前核心线程没满，创建核心线程执行任务。若满了，看任务队列是否满，若无，添加队列。若已满，创建非核心线程执行任务，如果当前非核心线程也已经满了，那么进入到拒绝策略。</p>]]></content>
    
    
    <categories>
      
      <category>线程池</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统调用 （六）</title>
    <link href="/2020/10/09/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <url>/2020/10/09/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201009205529316.png"></p><h1 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h1><p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务，主要包括命令接口和程序接口，其中，程序接口由一组系统调用组成。</p><p>供给应用程序调用的特殊函数，应用程序可以发出系统调用请求来获得操作系统的服务。</p><p>应用程序通过系统调用请求操作系统的服务，系统中各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作（如存储分配，IO操作，文件管理等），都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</p><p><img src="image-20201009211304714.png" alt="image-20201009211304714"></p><h1 id="系统调用和库函数的作用"><a href="#系统调用和库函数的作用" class="headerlink" title="系统调用和库函数的作用"></a>系统调用和库函数的作用</h1><p><img src="image-20201009211411935.png"></p><p>普通的应用程序可能调用库函数，库函数可能调用系统调用，也可能不调用系统调用。</p><h1 id="系统调用的背后的过程"><a href="#系统调用的背后的过程" class="headerlink" title="系统调用的背后的过程"></a>系统调用的背后的过程</h1><p>高级语言编译之后会变成汇编语言。</p><p><img src="image-20201009211748305.png"></p><p>传递系统调用参数 ——》 执行陷入指令（用户态） ——》 执行系统调用相应服务程序（核心态）——》返回用户程序</p><p>注意：</p><p>1）陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，从而cpu进入核心态</p><p>2）发出系统调用的请求是在用户态的，而对系统调用的相应处理是在核心态下进行的。</p><p>3） <strong>陷入指令是唯一一个在用户态下执行，而不能在核心态下面执行的指令</strong> </p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201009212119178.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中断和异常 （五）</title>
    <link href="/2020/10/09/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/10/09/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201009145255238.png" alt="image-20201009145255238"></p><h1 id="中断机制的诞生"><a href="#中断机制的诞生" class="headerlink" title="中断机制的诞生"></a>中断机制的诞生</h1><p>早起的计算机，比如博文操作系统的发展讲解的，单道处理系统，一次只能处理一个程序。所以各个程序只能串行的执行，系统资源利用率比较低。</p><p>为了解决上述问题，人们发明了操作系统（作为计算机的管理者），引入中断机制，实现了多道程序并发执行。</p><p>本质：发生中断就意味着需要操作系统介入，开展管理工作。</p><p>举个例子，如果有多道程序运行，会有一个计时器，记录运行的时间。cpu收到计时部件发出的中断信号，切换为核心态为中断信号进行处理。操作系统内核会对中断信号进行处理，接受之后发现进程一的时间片时间到了，轮到进程二执行。进程二运行之后，发出系统调用（内中断信号），请求输出。cpu切换到内核态，对中断进行处理。进程二暂停等到打印机IO，换到进程三运行。等到打印机IO完成，设备向cpu发送外中断信号，cpu接收到io设备发来的中断信号，切换为核心态对中断进行处理。</p><h1 id="中断的概念和应用"><a href="#中断的概念和应用" class="headerlink" title="中断的概念和应用"></a>中断的概念和应用</h1><p>中断发生后，cpu会从用户态进入到内核态</p><p>中断发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理</p><p>对于不同的中断信号，会进行不同的处理</p><p>发生了中断，就意味着操作系统介入，开展管理工作，由于操作系统的管理工作（比如进程切换、分配io设备等）需要使用特权指令，因此cpu要从用户态转换为内核态，中断可以使cpu从用户态切换为核心态，使操作系统或得计算机的控制权。有了中断，才能实现多道程序并发执行。</p><p>用户态到核心态的切换，只能通过中断实现的，并且是唯一的方式。</p><p>核心态到用户态的转换，通过程序状态字psw标志位标识的。</p><h1 id="中断的分类"><a href="#中断的分类" class="headerlink" title="中断的分类"></a>中断的分类</h1><p><img src="image-20201009170728978.png" alt="image-20201009170728978"></p><h2 id="外中断处理过程"><a href="#外中断处理过程" class="headerlink" title="外中断处理过程"></a>外中断处理过程</h2><p><img src="image-20201009171311786.png" alt="image-20201009171311786"></p><p>执行完每一个指令的时候，cpu都要检查当前是否有外部中断信号。</p><p>如果检测到了外部中断信号，则需要保护被中断进程的cpu环境（程序状态字psw，程序计数器pc，各种寄存器状态）</p><p>根据中断信号类型转入相应的中断处理程序</p><p>恢复原进程的cpu环境并退出中断，返回原进程继续往下执行</p><h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><p>内核态与用户态是操作系统的两种运行级别,跟intel cpu没有必然的联系, intel cpu提供Ring0-Ring3三种级别的运行模式，Ring0级别最高，Ring3最低。Linux使用了Ring3级别运行用户态，Ring0作为 内核态，没有使用Ring1和Ring2。Ring3状态不能访问Ring0的地址空间，包括代码和数据。Linux进程的4GB地址空间，3G-4G部 分大家是共享的，是内核态的地址空间，这里存放在整个内核的代码和所有的内核模块，以及内核所维护的数据。用户运行一个程序，该程序所创建的进程开始是运 行在用户态的，如果要执行文件操作，网络数据发送等操作，必须通过write，send等系统调用，这些系统调用会调用内核中的代码来完成操作，这时，必 须切换到Ring0，然后进入3GB-4GB中的内核地址空间去执行这些代码完成操作，完成后，切换回Ring3，回到用户态。这样，用户态的程序就不能 随意操作内核地址空间，具有一定的安全保护作用。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201009171956319.png" alt="image-20201009171956319"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的运行机制与体系结构 （四）</title>
    <link href="/2020/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <url>/2020/10/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201009114046283.png"></p><h1 id="预备知识：指令"><a href="#预备知识：指令" class="headerlink" title="预备知识：指令"></a>预备知识：指令</h1><p>高级语言代码会被编译/解释之后变成机器语言指令（二进制）</p><p>一条高级语言的代码翻译过来可能会对应多条指令。</p><p><img src="image-20201009114232710.png"></p><p>上图可以看到，简单的一个让x加1的代码，对应了三条指令。</p><p>所以，指令也就是cpu能识别，执行的最基本的命令。</p><h2 id="两种指令"><a href="#两种指令" class="headerlink" title="两种指令"></a>两种指令</h2><p><img src="image-20201009114400229.png"></p><p>根据指令的优先级，我们可以把指令分成如上图的两种，特权指令（加法）与非特权指令（开辟空间）。</p><p>特权指令不允许普通用户执行，cpu执行的时候需要判断一下，当前的用户是否可以执行这条指令。</p><h2 id="两种处理器状态"><a href="#两种处理器状态" class="headerlink" title="两种处理器状态"></a>两种处理器状态</h2><p><img src="image-20201009114522933.png"></p><p>用户态，就是普通用户，无法执行特权指令。核心态，指令都可以执行。</p><p>那么这个状态是用程序状态寄存器（psw）中的某标志位来标识当前处理器应该处于什么状态，如0是用户态，1是内核态。</p><h2 id="两种程序"><a href="#两种程序" class="headerlink" title="两种程序"></a>两种程序</h2><p>内核程序：操作系统的内核程序是系统的管理者，既可以执行特权指令，也可以执行非特权指令，运行在核心态。</p><p>应用程序：为了保证系统安全的运行，普通应用程序只能执行非特权指令，运行在用户态。</p><h2 id="总结回顾指令"><a href="#总结回顾指令" class="headerlink" title="总结回顾指令"></a>总结回顾指令</h2><p><img src="image-20201009114855863.png"></p><h1 id="操作系统内核"><a href="#操作系统内核" class="headerlink" title="操作系统内核"></a>操作系统内核</h1><p><img src="image-20201009143510101.png"></p><p>时钟管理：实现计时功能</p><p>原语：是一种特殊的程序，是最接近硬件的部分，这种程序的运行具有原子性。</p><p>内核是计算机上的底层软件，是操作系统最基本、最核心的部分。</p><p>实现操作系统内核功能的那些程序就是内核程序。</p><p><img src="image-20201009143659151.png"></p><h1 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h1><p><img src="image-20201009143758466.png"></p><p>分为大内核与微内核。</p><p>大内核：高性能，但是内核代码庞大</p><p>微内核：内核功能少，结构清晰，但是如果需要一些调度，内核态和用户态之间需要频繁的进行切换，性能低。</p><p>这地方的理解就跟公司的管理层一样，大公司组织架构清晰，而小公司的leader可能要处理很多事情。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201009144239267.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的发展 （三）</title>
    <link href="/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95/"/>
    <url>/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201008230507825.png"></p><h1 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h1><p>计算机能识别二进制数（01），把数写在纸带机上，让计算机进行读取，处理之后，再输出纸带机上，最后输出。计算机的处理速度快，但是纸带机速度很慢，这样cpu空闲时间很多。另外，程序用纸袋机，这样不太方便。人机速度矛盾导致资源利用率低。</p><h1 id="单道批处理阶段"><a href="#单道批处理阶段" class="headerlink" title="单道批处理阶段"></a>单道批处理阶段</h1><p>引入脱机输入/输出技术（用磁带完成）并监督程序负责控制作业的输入/输出，速度比纸带机快很多。</p><p>单道批处理系统的优点：缓解了一定程度的人机矛盾，资源利用率有所提升。</p><p>缺点：内存中仅仅能有一道程序运行，只是该程序运行之后才能调入下一道程序。cpu还是有大量的时间空闲，资源利用虽然提高但是还是很低。</p><h1 id="多道批处理阶段"><a href="#多道批处理阶段" class="headerlink" title="多道批处理阶段"></a>多道批处理阶段</h1><p>还是利用磁带完成，但是是多道程序。操作系统正式诞生，并引入了中断技术，由操作系统负责管理这些程序的运行，各个程序并发执行。</p><p>优点：多道程序并发执行，共享计算机资源。资源利用率大幅度提升，cpu和其他资源保持忙碌状态，系统吞吐量增大。</p><p>缺点：没有人机交互，用户响应时间长（用户提交作业之后只能等待计算机处理完成，中间不能控制自己的作业执行）</p><h1 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h1><p>计算机以时间片为单位轮流的为各个用户/作业服务，各个用户可以通过终端与计算机进行交互。</p><p>缺点：不能优先处理一些紧急任务，操作系统对所有的用户和作业都是公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性。</p><h1 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h1><p>优先响应一些紧急任务，某些紧急任务不需要时间排队。</p><p>在实时操作系统的控制下，计算机接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件。实时操作系统的主要特点是及时性和可靠性。</p><h1 id="其他操作系统"><a href="#其他操作系统" class="headerlink" title="其他操作系统"></a>其他操作系统</h1><h2 id="网络操作系统"><a href="#网络操作系统" class="headerlink" title="网络操作系统"></a>网络操作系统</h2><p>是伴随着计算机网络的发展而诞生的，能把网络中各个计算机结合起来，实现数据传送等功能，实现网络中各种资源的共享（文件的共享）和各台计算机之间的通信。</p><h2 id="分布式操作系统"><a href="#分布式操作系统" class="headerlink" title="分布式操作系统"></a>分布式操作系统</h2><p>主要特点是分布性和并行性，系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行/协同完成这个任务。</p><h2 id="个人计算机操作系统"><a href="#个人计算机操作系统" class="headerlink" title="个人计算机操作系统"></a>个人计算机操作系统</h2><p>windows xp / MacOs 方便个人使用</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="C:\Users\mmz\AppData\Roaming\Typora\typora-user-images\image-20201009113711074.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的四个特征 （二）</title>
    <link href="/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/"/>
    <url>/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201008223341290.png"></p><p>并发和共享是最基本的两个特征，二者互为存在条件。</p><h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><p>并发是指两个或者多个事件在同一个时间间隔内发生，这些事件宏观上是同时发生的，但是在微观上其实是互相交替发生的（一个cpu运行两个进程）。</p><p>特别注意的是并行，指两个或者多个事件在同一时刻同时发生（双核cpu执行两个进程）。</p><p>操作系统的并发性，是指计算机系统中同时存在着多个运行着的程序。</p><p>一个单核处理机（cpu）同一时刻只能执行一个程序，因此操作系统会负责协调多个程序交替执行（这些程序微观上是交替执行的，但是宏观看上去就好像在同时执行）。事实上，操作系统就是伴随着“多道程序技术”而出现的。因此，操作系统和程序并发是一起诞生的。</p><p>当今的计算机，虽然cpu有很多核，但是操作系统的并发性还是必不可少的，远远不够使用。</p><h1 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h1><p>共享即是共享资源，是指系统中的资源可供内存中多个并发执行的进程使用。</p><p>资源分为两种，互斥共享与同时共享。</p><p>互斥共享，是指同一时间只能允许一个进程访问资源。</p><p>同时共享，是指同一时间允许多个进程访问资源。</p><p>生活中的实例，互斥共享——摄像头，同时共享——发送文件。</p><h1 id="共享与并发"><a href="#共享与并发" class="headerlink" title="共享与并发"></a>共享与并发</h1><p>并发性是指计算机系统中同时存在着多个运行的程序。</p><p>共享性是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p>并发和共享是互为存在条件的。</p><h1 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h1><p>是指把一个物理上的实体对应为若干个逻辑上的对应物。物理实体（前者）是实际存在的，而逻辑上对应物（后者）是用户感受的。</p><p>一个程序需要分配内存才能运行，一个游戏如果8G，电脑有4G内存。程序同时运行内存远超于4G，利用了<strong>虚拟存储器技术</strong>，所以可以同时运行。（空分复用技术）</p><p>多个程序需要被分配多个cpu才能运行，单核的cpu是如何运行程序的呢？采用的是<strong>虚拟处理器技术</strong>，使用户看起来一共有6个cpu在同时服务。（时分复用技术）</p><p><img src="image-20201008225118513.png"></p><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><p>异步是指，在多道程序下，允许多个程序并发执行，但是由于资源有限，进程的执行不一定是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201008225444396.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统的概念（定义）目标与功能 （一）</title>
    <link href="/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%AE%9A%E4%B9%89%E7%9B%AE%E6%A0%87%E4%B8%8E%E5%8A%9F%E8%83%BD/"/>
    <url>/2020/10/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E5%AE%9A%E4%B9%89%E7%9B%AE%E6%A0%87%E4%B8%8E%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="大家都熟悉的操作系统"><a href="#大家都熟悉的操作系统" class="headerlink" title="大家都熟悉的操作系统"></a>大家都熟悉的操作系统</h1><p>如下图，我们可以看到常用的操作系统。不管是pc端还是移动端。</p><p><img src="image-20201008110624343.png"></p><h1 id="知识总览"><a href="#知识总览" class="headerlink" title="知识总览"></a>知识总览</h1><p><img src="image-20201008110710543.png"></p><h1 id="操作系统的概念和定义"><a href="#操作系统的概念和定义" class="headerlink" title="操作系统的概念和定义"></a>操作系统的概念和定义</h1><p>一台电脑的诞生：一台裸机  ——》 安装windows操作系统 ——》安装游戏 ——》启动游戏进行游戏</p><p>硬件有我们的cpu/内存/硬盘</p><p>应用程序有我们常用的微信QQ百度云</p><p>那么操作系统的概念与定义我们可想而知。</p><p>1）负责管理协同硬件/软件等计算机资源的工作</p><p>2）为上层的应用程序，用户提高简单易用的服务</p><p>3）操作系统是系统软件，不是硬件</p><p>结合以上三条就是：</p><p><strong>操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机中最基本的系统软件。</strong></p><p><img src="image-20201008110858123.png"></p><h1 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h1><h2 id="作为系统资源的管理者"><a href="#作为系统资源的管理者" class="headerlink" title="作为系统资源的管理者"></a>作为系统资源的管理者</h2><p>补充一个小知识，如果我们使用QQ与朋友进行聊天。</p><p>第一步：找到QQ文件的位置（路径） <strong>文件管理</strong> 打开找到QQ.exe这个程序的存放位置</p><p>第二步：双击打开exe文件  <strong>存储器管理</strong> 需要把相应的程序加载到内存中</p><p>第三步：QQ程序开始运行 <strong>处理器管理</strong> 对应的进程被处理器管理</p><p>第四步：开始使用QQ聊天 <strong>设备管理</strong> 分配给QQ聊天（就比如我们使用牛客网进行面试的时候，只能一个网页开启视频）</p><h2 id="作为用户和计算机硬件之间的接口"><a href="#作为用户和计算机硬件之间的接口" class="headerlink" title="作为用户和计算机硬件之间的接口"></a>作为用户和计算机硬件之间的接口</h2><p>命令接口： 允许用户使用</p><p>程序接口： 允许用户通过程序间接调用</p><p>gui： 图像化界面</p><h3 id="命令接口"><a href="#命令接口" class="headerlink" title="命令接口"></a>命令接口</h3><p>联机命令接口：用户说一句，系统做一句。cmd</p><p>脱机命令接口：用户说一堆，系统做一堆。shell脚本</p><h3 id="程序接口"><a href="#程序接口" class="headerlink" title="程序接口"></a>程序接口</h3><p>允许用户通过程序间接调用，由一组系统调用组成（程序接口=系统调用）</p><p>程序中调用user32.dll（该调用过程为系统调用，系统调用又称为广义指令）</p><h3 id="gui图形用户界面"><a href="#gui图形用户界面" class="headerlink" title="gui图形用户界面"></a>gui图形用户界面</h3><p>不需要参数，只需要鼠标与键盘的配合即可</p><h2 id="作为最接近硬件的层次"><a href="#作为最接近硬件的层次" class="headerlink" title="作为最接近硬件的层次"></a>作为最接近硬件的层次</h2><p>通常把覆盖软件的机器成为扩充机器，又称之为虚拟机。</p><p>硬件都是一些零零散散的，而操作系统就可以利用这些硬件工具做想做的事情，封装思想。</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p><img src="image-20201008140933785.png"></p>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/06/hello-world/"/>
    <url>/2020/10/06/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>程序人生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序人生</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
